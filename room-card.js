/*! For license information please see room-card.js.LICENSE.txt */
(()=>{"use strict";var t={197:(t,e,i)=>{i.r(e),i.d(e,{DEFAULT_DOMAIN_ICON:()=>X,DEFAULT_PANEL:()=>Z,DEFAULT_VIEW_ENTITY_ID:()=>st,DOMAINS_HIDE_MORE_INFO:()=>et,DOMAINS_MORE_INFO_NO_HISTORY:()=>it,DOMAINS_TOGGLE:()=>rt,DOMAINS_WITH_CARD:()=>Q,DOMAINS_WITH_MORE_INFO:()=>tt,NumberFormat:()=>n,STATES_OFF:()=>nt,TimeFormat:()=>r,UNIT_C:()=>ot,UNIT_F:()=>at,applyThemesOnElement:()=>U,computeCardSize:()=>R,computeDomain:()=>H,computeEntity:()=>L,computeRTL:()=>V,computeRTLDirection:()=>z,computeStateDisplay:()=>J,computeStateDomain:()=>B,createThing:()=>dt,debounce:()=>mt,domainIcon:()=>pt,evaluateFilter:()=>ft,fireEvent:()=>lt,fixedIcons:()=>ht,formatDate:()=>u,formatDateMonth:()=>y,formatDateMonthYear:()=>v,formatDateNumeric:()=>m,formatDateShort:()=>p,formatDateTime:()=>A,formatDateTimeNumeric:()=>C,formatDateTimeWithSeconds:()=>S,formatDateWeekday:()=>l,formatDateYear:()=>b,formatNumber:()=>K,formatTime:()=>O,formatTimeWeekday:()=>I,formatTimeWithSeconds:()=>D,forwardHaptic:()=>vt,getLovelace:()=>Ct,handleAction:()=>wt,handleActionConfig:()=>bt,handleClick:()=>$t,hasAction:()=>At,hasConfigOrEntityChanged:()=>Et,hasDoubleClick:()=>St,isNumericState:()=>q,navigate:()=>gt,numberFormatToLocale:()=>W,relativeTime:()=>j,round:()=>Y,stateIcon:()=>Nt,timerTimeRemaining:()=>P,toggleEntity:()=>_t,turnOnOffEntities:()=>Tt,turnOnOffEntity:()=>yt});var n,r,o,a=function(){return a=Object.assign||function(t){for(var e,i=1,n=arguments.length;i<n;i++)for(var r in e=arguments[i])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t},a.apply(this,arguments)},s={second:45,minute:45,hour:22,day:5},l=function(t,e){return c(e).format(t)},c=function(t){return new Intl.DateTimeFormat(t.language,{weekday:"long",month:"long",day:"numeric"})},u=function(t,e){return d(e).format(t)},d=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"long",day:"numeric"})},m=function(t,e){return h(e).format(t)},h=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"numeric",day:"numeric"})},p=function(t,e){return f(e).format(t)},f=function(t){return new Intl.DateTimeFormat(t.language,{day:"numeric",month:"short"})},v=function(t,e){return g(e).format(t)},g=function(t){return new Intl.DateTimeFormat(t.language,{month:"long",year:"numeric"})},y=function(t,e){return _(e).format(t)},_=function(t){return new Intl.DateTimeFormat(t.language,{month:"long"})},b=function(t,e){return w(e).format(t)},w=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric"})};(o=n||(n={})).language="language",o.system="system",o.comma_decimal="comma_decimal",o.decimal_comma="decimal_comma",o.space_comma="space_comma",o.none="none",function(t){t.language="language",t.system="system",t.am_pm="12",t.twenty_four="24"}(r||(r={}));var $=function(t){if(t.time_format===r.language||t.time_format===r.system){var e=t.time_format===r.language?t.language:void 0,i=(new Date).toLocaleString(e);return i.includes("AM")||i.includes("PM")}return t.time_format===r.am_pm},A=function(t,e){return E(e).format(t)},E=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"long",day:"numeric",hour:$(t)?"numeric":"2-digit",minute:"2-digit",hour12:$(t)})},S=function(t,e){return T(e).format(t)},T=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"long",day:"numeric",hour:$(t)?"numeric":"2-digit",minute:"2-digit",second:"2-digit",hour12:$(t)})},C=function(t,e){return k(e).format(t)},k=function(t){return new Intl.DateTimeFormat(t.language,{year:"numeric",month:"numeric",day:"numeric",hour:"numeric",minute:"2-digit",hour12:$(t)})},O=function(t,e){return N(e).format(t)},N=function(t){return new Intl.DateTimeFormat(t.language,{hour:"numeric",minute:"2-digit",hour12:$(t)})},D=function(t,e){return x(e).format(t)},x=function(t){return new Intl.DateTimeFormat(t.language,{hour:$(t)?"numeric":"2-digit",minute:"2-digit",second:"2-digit",hour12:$(t)})},I=function(t,e){return M(e).format(t)},M=function(t){return new Intl.DateTimeFormat(t.language,{hour:$(t)?"numeric":"2-digit",minute:"2-digit",second:"2-digit",hour12:$(t)})},j=function(t,e,i,n){void 0===n&&(n=!0);var r=function(t,e,i){void 0===e&&(e=Date.now()),void 0===i&&(i={});var n=a(a({},s),i||{}),r=(+t-+e)/1e3;if(Math.abs(r)<n.second)return{value:Math.round(r),unit:"second"};var o=r/60;if(Math.abs(o)<n.minute)return{value:Math.round(o),unit:"minute"};var l=r/3600;if(Math.abs(l)<n.hour)return{value:Math.round(l),unit:"hour"};var c=r/86400;if(Math.abs(c)<n.day)return{value:Math.round(c),unit:"day"};var u=new Date(t),d=new Date(e),m=u.getFullYear()-d.getFullYear();if(Math.round(Math.abs(m))>0)return{value:Math.round(m),unit:"year"};var h=12*m+u.getMonth()-d.getMonth();if(Math.round(Math.abs(h))>0)return{value:Math.round(h),unit:"month"};var p=r/604800;return{value:Math.round(p),unit:"week"}}(t,i);return n?function(t){return new Intl.RelativeTimeFormat(t.language,{numeric:"auto"})}(e).format(r.value,r.unit):Intl.NumberFormat(e.language,{style:"unit",unit:r.unit,unitDisplay:"long"}).format(Math.abs(r.value))};function P(t){var e,i=3600*(e=t.attributes.remaining.split(":").map(Number))[0]+60*e[1]+e[2];if("active"===t.state){var n=(new Date).getTime(),r=new Date(t.last_changed).getTime();i=Math.max(i-(n-r)/1e3,0)}return i}function F(){return(F=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var i=arguments[e];for(var n in i)Object.prototype.hasOwnProperty.call(i,n)&&(t[n]=i[n])}return t}).apply(this,arguments)}var U=function(t,e,i,n){void 0===n&&(n=!1),t._themes||(t._themes={});var r=e.default_theme;("default"===i||i&&e.themes[i])&&(r=i);var o=F({},t._themes);if("default"!==r){var a=e.themes[r];Object.keys(a).forEach((function(e){var i="--"+e;t._themes[i]="",o[i]=a[e]}))}if(t.updateStyles?t.updateStyles(o):window.ShadyCSS&&window.ShadyCSS.styleSubtree(t,o),n){var s=document.querySelector("meta[name=theme-color]");if(s){s.hasAttribute("default-content")||s.setAttribute("default-content",s.getAttribute("content"));var l=o["--primary-color"]||s.getAttribute("default-content");s.setAttribute("content",l)}}},R=function(t){return"function"==typeof t.getCardSize?t.getCardSize():4};function H(t){return t.substr(0,t.indexOf("."))}function L(t){return t.substr(t.indexOf(".")+1)}function V(t){var e,i=(null==t||null==(e=t.locale)?void 0:e.language)||"en";return t.translationMetadata.translations[i]&&t.translationMetadata.translations[i].isRTL||!1}function z(t){return V(t)?"rtl":"ltr"}function B(t){return H(t.entity_id)}var q=function(t){return!!t.attributes.unit_of_measurement||!!t.attributes.state_class},W=function(t){switch(t.number_format){case n.comma_decimal:return["en-US","en"];case n.decimal_comma:return["de","es","it"];case n.space_comma:return["fr","sv","cs"];case n.system:return;default:return t.language}},Y=function(t,e){return void 0===e&&(e=2),Math.round(t*Math.pow(10,e))/Math.pow(10,e)},K=function(t,e,i){var r=e?W(e):void 0;if(Number.isNaN=Number.isNaN||function t(e){return"number"==typeof e&&t(e)},(null==e?void 0:e.number_format)!==n.none&&!Number.isNaN(Number(t))&&Intl)try{return new Intl.NumberFormat(r,G(t,i)).format(Number(t))}catch(e){return console.error(e),new Intl.NumberFormat(void 0,G(t,i)).format(Number(t))}return"string"==typeof t?t:Y(t,null==i?void 0:i.maximumFractionDigits).toString()+("currency"===(null==i?void 0:i.style)?" "+i.currency:"")},G=function(t,e){var i=F({maximumFractionDigits:2},e);if("string"!=typeof t)return i;if(!e||!e.minimumFractionDigits&&!e.maximumFractionDigits){var n=t.indexOf(".")>-1?t.split(".")[1].length:0;i.minimumFractionDigits=n,i.maximumFractionDigits=n}return i},J=function(t,e,i,n){var r=void 0!==n?n:e.state;if("unknown"===r||"unavailable"===r)return t("state.default."+r);if(q(e)){if("monetary"===e.attributes.device_class)try{return K(r,i,{style:"currency",currency:e.attributes.unit_of_measurement})}catch(t){}return K(r,i)+(e.attributes.unit_of_measurement?" "+e.attributes.unit_of_measurement:"")}var o=B(e);if("input_datetime"===o){var a;if(void 0===n)return e.attributes.has_date&&e.attributes.has_time?(a=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day,e.attributes.hour,e.attributes.minute),A(a,i)):e.attributes.has_date?(a=new Date(e.attributes.year,e.attributes.month-1,e.attributes.day),u(a,i)):e.attributes.has_time?((a=new Date).setHours(e.attributes.hour,e.attributes.minute),O(a,i)):e.state;try{var s=n.split(" ");if(2===s.length)return A(new Date(s.join("T")),i);if(1===s.length){if(n.includes("-"))return u(new Date(n+"T00:00"),i);if(n.includes(":")){var l=new Date;return O(new Date(l.toISOString().split("T")[0]+"T"+n),i)}}return n}catch(t){return n}}return"humidifier"===o&&"on"===r&&e.attributes.humidity?e.attributes.humidity+" %":"counter"===o||"number"===o||"input_number"===o?K(r,i):e.attributes.device_class&&t("component."+o+".state."+e.attributes.device_class+"."+r)||t("component."+o+".state._."+r)||r},X="mdi:bookmark",Z="lovelace",Q=["climate","cover","configurator","input_select","input_number","input_text","lock","media_player","scene","script","timer","vacuum","water_heater","weblink"],tt=["alarm_control_panel","automation","camera","climate","configurator","cover","fan","group","history_graph","input_datetime","light","lock","media_player","script","sun","updater","vacuum","water_heater","weather"],et=["input_number","input_select","input_text","scene","weblink"],it=["camera","configurator","history_graph","scene"],nt=["closed","locked","off"],rt=new Set(["fan","input_boolean","light","switch","group","automation"]),ot="°C",at="°F",st="group.default_view",lt=function(t,e,i,n){n=n||{},i=null==i?{}:i;var r=new Event(e,{bubbles:void 0===n.bubbles||n.bubbles,cancelable:Boolean(n.cancelable),composed:void 0===n.composed||n.composed});return r.detail=i,t.dispatchEvent(r),r},ct=new Set(["call-service","divider","section","weblink","cast","select"]),ut={alert:"toggle",automation:"toggle",climate:"climate",cover:"cover",fan:"toggle",group:"group",input_boolean:"toggle",input_number:"input-number",input_select:"input-select",input_text:"input-text",light:"toggle",lock:"lock",media_player:"media-player",remote:"toggle",scene:"scene",script:"script",sensor:"sensor",timer:"timer",switch:"toggle",vacuum:"toggle",water_heater:"climate",input_datetime:"input-datetime"},dt=function(t,e){void 0===e&&(e=!1);var i=function(t,e){return n("hui-error-card",{type:"error",error:t,config:e})},n=function(t,e){var n=window.document.createElement(t);try{if(!n.setConfig)return;n.setConfig(e)}catch(n){return console.error(t,n),i(n.message,e)}return n};if(!t||"object"!=typeof t||!e&&!t.type)return i("No type defined",t);var r=t.type;if(r&&r.startsWith("custom:"))r=r.substr("custom:".length);else if(e)if(ct.has(r))r="hui-"+r+"-row";else{if(!t.entity)return i("Invalid config given.",t);var o=t.entity.split(".",1)[0];r="hui-"+(ut[o]||"text")+"-entity-row"}else r="hui-"+r+"-card";if(customElements.get(r))return n(r,t);var a=i("Custom element doesn't exist: "+t.type+".",t);a.style.display="None";var s=setTimeout((function(){a.style.display=""}),2e3);return customElements.whenDefined(t.type).then((function(){clearTimeout(s),lt(a,"ll-rebuild",{},a)})),a},mt=function(t,e,i){var n;return void 0===i&&(i=!1),function(){var r=[].slice.call(arguments),o=this,a=i&&!n;clearTimeout(n),n=setTimeout((function(){n=null,i||t.apply(o,r)}),e),a&&t.apply(o,r)}},ht={alert:"mdi:alert",automation:"mdi:playlist-play",calendar:"mdi:calendar",camera:"mdi:video",climate:"mdi:thermostat",configurator:"mdi:settings",conversation:"mdi:text-to-speech",device_tracker:"mdi:account",fan:"mdi:fan",group:"mdi:google-circles-communities",history_graph:"mdi:chart-line",homeassistant:"mdi:home-assistant",homekit:"mdi:home-automation",image_processing:"mdi:image-filter-frames",input_boolean:"mdi:drawing",input_datetime:"mdi:calendar-clock",input_number:"mdi:ray-vertex",input_select:"mdi:format-list-bulleted",input_text:"mdi:textbox",light:"mdi:lightbulb",mailbox:"mdi:mailbox",notify:"mdi:comment-alert",person:"mdi:account",plant:"mdi:flower",proximity:"mdi:apple-safari",remote:"mdi:remote",scene:"mdi:google-pages",script:"mdi:file-document",sensor:"mdi:eye",simple_alarm:"mdi:bell",sun:"mdi:white-balance-sunny",switch:"mdi:flash",timer:"mdi:timer",updater:"mdi:cloud-upload",vacuum:"mdi:robot-vacuum",water_heater:"mdi:thermometer",weblink:"mdi:open-in-new"};function pt(t,e){if(t in ht)return ht[t];switch(t){case"alarm_control_panel":switch(e){case"armed_home":return"mdi:bell-plus";case"armed_night":return"mdi:bell-sleep";case"disarmed":return"mdi:bell-outline";case"triggered":return"mdi:bell-ring";default:return"mdi:bell"}case"binary_sensor":return e&&"off"===e?"mdi:radiobox-blank":"mdi:checkbox-marked-circle";case"cover":return"closed"===e?"mdi:window-closed":"mdi:window-open";case"lock":return e&&"unlocked"===e?"mdi:lock-open":"mdi:lock";case"media_player":return e&&"off"!==e&&"idle"!==e?"mdi:cast-connected":"mdi:cast";case"zwave":switch(e){case"dead":return"mdi:emoticon-dead";case"sleeping":return"mdi:sleep";case"initializing":return"mdi:timer-sand";default:return"mdi:z-wave"}default:return console.warn("Unable to find icon for domain "+t+" ("+e+")"),"mdi:bookmark"}}var ft=function(t,e){var i=e.value||e,n=e.attribute?t.attributes[e.attribute]:t.state;switch(e.operator||"=="){case"==":return n===i;case"<=":return n<=i;case"<":return n<i;case">=":return n>=i;case">":return n>i;case"!=":return n!==i;case"regex":return n.match(i);default:return!1}},vt=function(t){lt(window,"haptic",t)},gt=function(t,e,i){void 0===i&&(i=!1),i?history.replaceState(null,"",e):history.pushState(null,"",e),lt(window,"location-changed",{replace:i})},yt=function(t,e,i){void 0===i&&(i=!0);var n,r=H(e),o="group"===r?"homeassistant":r;switch(r){case"lock":n=i?"unlock":"lock";break;case"cover":n=i?"open_cover":"close_cover";break;default:n=i?"turn_on":"turn_off"}return t.callService(o,n,{entity_id:e})},_t=function(t,e){var i=nt.includes(t.states[e].state);return yt(t,e,i)},bt=function(t,e,i,n){if(n||(n={action:"more-info"}),!n.confirmation||n.confirmation.exemptions&&n.confirmation.exemptions.some((function(t){return t.user===e.user.id}))||(vt("warning"),confirm(n.confirmation.text||"Are you sure you want to "+n.action+"?")))switch(n.action){case"more-info":(i.entity||i.camera_image)&&lt(t,"hass-more-info",{entityId:i.entity?i.entity:i.camera_image});break;case"navigate":n.navigation_path&&gt(0,n.navigation_path);break;case"url":n.url_path&&window.open(n.url_path);break;case"toggle":i.entity&&(_t(e,i.entity),vt("success"));break;case"call-service":if(!n.service)return void vt("failure");var r=n.service.split(".",2);e.callService(r[0],r[1],n.service_data,n.target),vt("success");break;case"fire-dom-event":lt(t,"ll-custom",n)}},wt=function(t,e,i,n){var r;"double_tap"===n&&i.double_tap_action?r=i.double_tap_action:"hold"===n&&i.hold_action?r=i.hold_action:"tap"===n&&i.tap_action&&(r=i.tap_action),bt(t,e,i,r)},$t=function(t,e,i,n,r){var o;if(r&&i.double_tap_action?o=i.double_tap_action:n&&i.hold_action?o=i.hold_action:!n&&i.tap_action&&(o=i.tap_action),o||(o={action:"more-info"}),!o.confirmation||o.confirmation.exemptions&&o.confirmation.exemptions.some((function(t){return t.user===e.user.id}))||confirm(o.confirmation.text||"Are you sure you want to "+o.action+"?"))switch(o.action){case"more-info":(o.entity||i.entity||i.camera_image)&&(lt(t,"hass-more-info",{entityId:o.entity?o.entity:i.entity?i.entity:i.camera_image}),o.haptic&&vt(o.haptic));break;case"navigate":o.navigation_path&&(gt(0,o.navigation_path),o.haptic&&vt(o.haptic));break;case"url":o.url_path&&window.open(o.url_path),o.haptic&&vt(o.haptic);break;case"toggle":i.entity&&(_t(e,i.entity),o.haptic&&vt(o.haptic));break;case"call-service":if(!o.service)return;var a=o.service.split(".",2),s=a[0],l=a[1],c=F({},o.service_data);"entity"===c.entity_id&&(c.entity_id=i.entity),e.callService(s,l,c,o.target),o.haptic&&vt(o.haptic);break;case"fire-dom-event":lt(t,"ll-custom",o),o.haptic&&vt(o.haptic)}};function At(t){return void 0!==t&&"none"!==t.action}function Et(t,e,i){if(e.has("config")||i)return!0;if(t.config.entity){var n=e.get("hass");return!n||n.states[t.config.entity]!==t.hass.states[t.config.entity]}return!1}function St(t){return void 0!==t&&"none"!==t.action}var Tt=function(t,e,i){void 0===i&&(i=!0);var n={};e.forEach((function(e){if(nt.includes(t.states[e].state)===i){var r=H(e),o=["cover","lock"].includes(r)?r:"homeassistant";o in n||(n[o]=[]),n[o].push(e)}})),Object.keys(n).forEach((function(e){var r;switch(e){case"lock":r=i?"unlock":"lock";break;case"cover":r=i?"open_cover":"close_cover";break;default:r=i?"turn_on":"turn_off"}t.callService(e,r,{entity_id:n[e]})}))},Ct=function(){var t=document.querySelector("home-assistant");if(t=(t=(t=(t=(t=(t=(t=(t=t&&t.shadowRoot)&&t.querySelector("home-assistant-main"))&&t.shadowRoot)&&t.querySelector("app-drawer-layout partial-panel-resolver"))&&t.shadowRoot||t)&&t.querySelector("ha-panel-lovelace"))&&t.shadowRoot)&&t.querySelector("hui-root")){var e=t.lovelace;return e.current_view=t.___curView,e}return null},kt={humidity:"mdi:water-percent",illuminance:"mdi:brightness-5",temperature:"mdi:thermometer",pressure:"mdi:gauge",power:"mdi:flash",signal_strength:"mdi:wifi"},Ot={binary_sensor:function(t,e){var i="off"===t;switch(null==e?void 0:e.attributes.device_class){case"battery":return i?"mdi:battery":"mdi:battery-outline";case"battery_charging":return i?"mdi:battery":"mdi:battery-charging";case"cold":return i?"mdi:thermometer":"mdi:snowflake";case"connectivity":return i?"mdi:server-network-off":"mdi:server-network";case"door":return i?"mdi:door-closed":"mdi:door-open";case"garage_door":return i?"mdi:garage":"mdi:garage-open";case"power":case"plug":return i?"mdi:power-plug-off":"mdi:power-plug";case"gas":case"problem":case"safety":case"tamper":return i?"mdi:check-circle":"mdi:alert-circle";case"smoke":return i?"mdi:check-circle":"mdi:smoke";case"heat":return i?"mdi:thermometer":"mdi:fire";case"light":return i?"mdi:brightness-5":"mdi:brightness-7";case"lock":return i?"mdi:lock":"mdi:lock-open";case"moisture":return i?"mdi:water-off":"mdi:water";case"motion":return i?"mdi:walk":"mdi:run";case"occupancy":case"presence":return i?"mdi:home-outline":"mdi:home";case"opening":return i?"mdi:square":"mdi:square-outline";case"running":return i?"mdi:stop":"mdi:play";case"sound":return i?"mdi:music-note-off":"mdi:music-note";case"update":return i?"mdi:package":"mdi:package-up";case"vibration":return i?"mdi:crop-portrait":"mdi:vibrate";case"window":return i?"mdi:window-closed":"mdi:window-open";default:return i?"mdi:radiobox-blank":"mdi:checkbox-marked-circle"}},cover:function(t){var e="closed"!==t.state;switch(t.attributes.device_class){case"garage":return e?"mdi:garage-open":"mdi:garage";case"door":return e?"mdi:door-open":"mdi:door-closed";case"shutter":return e?"mdi:window-shutter-open":"mdi:window-shutter";case"blind":return e?"mdi:blinds-open":"mdi:blinds";case"window":return e?"mdi:window-open":"mdi:window-closed";default:return pt("cover",t.state)}},sensor:function(t){var e=t.attributes.device_class;if(e&&e in kt)return kt[e];if("battery"===e){var i=Number(t.state);if(isNaN(i))return"mdi:battery-unknown";var n=10*Math.round(i/10);return n>=100?"mdi:battery":n<=0?"mdi:battery-alert":"hass:battery-"+n}var r=t.attributes.unit_of_measurement;return"°C"===r||"°F"===r?"mdi:thermometer":pt("sensor")},input_datetime:function(t){return t.attributes.has_date?t.attributes.has_time?pt("input_datetime"):"mdi:calendar":"mdi:clock"}},Nt=function(t){if(!t)return"mdi:bookmark";if(t.attributes.icon)return t.attributes.icon;var e=H(t.entity_id);return e in Ot?Ot[e](t):pt(e,t.state)}},342:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.actionHandler=e.actionHandlerBind=void 0;const n=i(62),r=i(156),o=i(197),a="ontouchstart"in window||navigator.maxTouchPoints>0||navigator.maxTouchPoints>0;class s extends HTMLElement{constructor(){super(),this.holdTime=500,this.held=!1,this.ripple=document.createElement("mwc-ripple")}connectedCallback(){Object.assign(this.style,{position:"absolute",width:a?"100px":"50px",height:a?"100px":"50px",transform:"translate(-50%, -50%)",pointerEvents:"none",zIndex:"999"}),this.appendChild(this.ripple),this.ripple.primary=!0,["touchcancel","mouseout","mouseup","touchmove","mousewheel","wheel","scroll"].forEach((t=>{document.addEventListener(t,(()=>{clearTimeout(this.timer),this.stopAnimation(),this.timer=void 0}),{passive:!0})}))}bind(t,e){if(t.actionHandler)return;t.actionHandler=!0,t.addEventListener("contextmenu",(t=>{const e=t||window.event;return e.preventDefault&&e.preventDefault(),e.stopPropagation&&e.stopPropagation(),e.cancelBubble=!0,e.returnValue=!1,!1}));const i=t=>{let e,i;this.held=!1,t.touches?(e=t.touches[0].pageX,i=t.touches[0].pageY):(e=t.pageX,i=t.pageY),this.timer=window.setTimeout((()=>{this.startAnimation(e,i),this.held=!0}),this.holdTime)},n=i=>{i.preventDefault(),["touchend","touchcancel"].includes(i.type)&&void 0===this.timer||(clearTimeout(this.timer),this.stopAnimation(),this.timer=void 0,this.held?(0,o.fireEvent)(t,"action",{action:"hold"}):e.hasDoubleClick?"click"===i.type&&i.detail<2||!this.dblClickTimeout?this.dblClickTimeout=window.setTimeout((()=>{this.dblClickTimeout=void 0,(0,o.fireEvent)(t,"action",{action:"tap"})}),250):(clearTimeout(this.dblClickTimeout),this.dblClickTimeout=void 0,(0,o.fireEvent)(t,"action",{action:"double_tap"})):(0,o.fireEvent)(t,"action",{action:"tap"}))};t.addEventListener("touchstart",i,{passive:!0}),t.addEventListener("touchend",n),t.addEventListener("touchcancel",n),t.addEventListener("mousedown",i,{passive:!0}),t.addEventListener("click",n),t.addEventListener("keyup",(t=>{13===t.keyCode&&n(t)}))}startAnimation(t,e){Object.assign(this.style,{left:`${t}px`,top:`${e}px`,display:null}),this.ripple.disabled=!1,this.ripple.active=!0,this.ripple.unbounded=!0}stopAnimation(){this.ripple.active=!1,this.ripple.disabled=!0,this.style.display="none"}}customElements.define("action-handler-roomcard",s),e.actionHandlerBind=(t,e)=>{const i=(()=>{const t=document.body;if(t.querySelector("action-handler-roomcard"))return t.querySelector("action-handler-roomcard");const e=document.createElement("action-handler-roomcard");return t.appendChild(e),e})();i&&i.bind(t,e)},e.actionHandler=(0,r.directive)(class extends r.Directive{update(t,[i]){return(0,e.actionHandlerBind)(t.element,i),n.noChange}render(t){}})},461:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.extractValue=e.renderRows=e.renderEntity=e.renderEntitiesRow=e.renderInfoEntity=e.renderTitle=e.clickHandler=e.renderMainEntity=e.renderValue=e.renderIcon=e.entityStyles=e.entityStateDisplay=e.renderCustomStateIcon=e.renderConditionIcons=e.entityIcon=e.entityName=e.computeEntity=e.checkConfig=void 0;const n=i(230),r=i(759),o=i(578),a=i(882),s=i(197),l=i(62),c=i(623),u=i(704),d=i(846),m=i(342);e.checkConfig=t=>{if(null==t.entities&&null==t.entity&&void 0===t.info_entities&&void 0===t.rows&&void 0===t.cards)throw new Error("Please define entities.")},e.computeEntity=t=>t.substr(t.indexOf(".")+1),e.entityName=(t,i,n)=>(0,u.getTemplateOrAttribute)(t.name,i,n)||(t.entity?n.attributes.friendly_name||(0,e.computeEntity)(n.entity_id):null)||null,e.entityIcon=(t,i,n)=>{var r;if("icon"in i&&(void 0===i.show_icon||!1===i.show_icon))throw new Error(`Entity: ${i.entity} => Icon defined but show_icon is set to false or not defined. Please set show_icon to true`);return"icon"in i?"string"==typeof i.icon?i.icon:i.icon.state_on?(0,e.renderCustomStateIcon)(t,i.icon):i.icon.conditions?(0,e.renderConditionIcons)(t,i,n):(null===(r=i.icon.template)||void 0===r?void 0:r.icon)?(0,a.evalTemplate)(n,t,i.icon.template.icon):void 0:t.attributes.icon||null},e.renderConditionIcons=(t,e,i)=>{const n=t.state;return e.icon.conditions.filter((e=>{let r=n;if(e.entity){const t=i.states[e.entity];r=e.attribute?t.attributes[e.attribute]:t.state}return e.attribute&&!e.entity&&(r=t.attributes[e.attribute]),(0,a.checkConditionalValue)(e,r)})).pop()},e.renderCustomStateIcon=(t,e)=>{switch((0,o.computeStateDomain)(t)){case"light":case"switch":case"binary_sensor":case"input_boolean":return"on"===t.state?e.state_on:e.state_off}},e.entityStateDisplay=(t,i,n)=>{if((0,a.isUnavailable)(n))return t.localize(`state.default.${n.state}`);let s=(0,a.getValue)(i),l=void 0!==i.attribute?i.unit:i.unit||n.attributes.unit_of_measurement;if(i.format)return({value:s,unit:l}=(0,e.extractValue)(i,s,t,l)),`${s}${l?` ${l}`:""}`;if(i.attribute)return`${isNaN(s)?s:(0,r.formatNumber)(s,t.locale)}${l?` ${l}`:""}`;const c=Object.assign(Object.assign({},n),{attributes:Object.assign(Object.assign({},n.attributes),{unit_of_measurement:l})});return(0,o.computeStateDisplay)(t.localize,c,t.locale)},e.entityStyles=(t,e,i)=>{if(!t)return"";if("template"in t){const n=t;return(0,a.evalTemplate)(i,e,n.template)}const n=t;return Object.keys(n).map((t=>`${t}: ${n[t]};`)).join("")},e.renderIcon=(t,i,n,r)=>{if(void 0!==i.show_icon&&!1===i.show_icon)return null;const o=(0,e.entityIcon)(t,i,n),s=(0,u.templateStyling)(t,i,n);return l.html`<state-badge
        class="icon-small ${r}"
        .stateObj="${t}"
        .overrideIcon="${(0,a.isObject)(o)?o.icon:o}"
        .stateColor="${i.state_color}"
        style="${null!=s?s:(0,e.entityStyles)((0,a.isObject)(o)?o.styles:null,n.states[i.entity],n)}"
    ></state-badge>`},e.renderValue=(t,i,n)=>{if(!0===t.toggle)return l.html`<ha-entity-toggle .stateObj="${n}" .hass="${i}"></ha-entity-toggle>`;if(!0===t.show_icon)return(0,e.renderIcon)(n,t,i);if(t.attribute&&[c.LAST_CHANGED,c.LAST_UPDATED].includes(t.attribute))return l.html`<ha-relative-time
            .hass=${i}
            .datetime=${t.attribute===c.LAST_CHANGED?n.last_changed:n.last_updated}
            capitalize
        ></ha-relative-time>`;if(t.format&&c.TIMESTAMP_FORMATS.includes(t.format)){const e=(0,a.getValue)(t),n=new Date(e);return n instanceof Date&&!isNaN(n.getTime())?l.html`<hui-timestamp-display
            .hass=${i}
            .ts=${n}
            .format=${t.format}
            capitalize
        ></hui-timestamp-display>`:e}return(0,e.entityStateDisplay)(i,t,n)},e.renderMainEntity=(t,i,n,r)=>{var o;if(void 0===t)return null;const a=n.states[t.entity];return l.html`<div
        class="main-state entity"
        style="${(0,e.entityStyles)(t.styles,a,n)}">
        ${0===(null===(o=i.entities)||void 0===o?void 0:o.length)||i.icon?(0,e.renderIcon)(r,i,n,"main-icon"):void 0!==t.show_state&&!1===t.show_state?"":(0,e.renderValue)(t,n)}
    </div>`},e.clickHandler=(t,e,i,n)=>{(0,s.handleAction)(t,e,i,n.detail.action)},e.renderTitle=(t,i,n,r,o)=>{if(!0===t.hide_title)return null;const a=void 0!==t.tap_action||void 0!==t.double_tap_action,c=(0,u.getTemplateOrAttribute)(t.title,i,o);return l.html`<div class="title${a?" clickable":null}" @action=${o=>{i&&o.detail.action&&(0,e.clickHandler)(n,i,null!=r?r:{tap_action:t.tap_action,double_tap_action:t.double_tap_action,hold_action:t.hold_action},o)}}
    .actionHandler=${(0,m.actionHandler)({hasHold:(0,s.hasAction)(null==r?void 0:r.hold_action),hasDoubleClick:(0,s.hasAction)(null==r?void 0:r.double_tap_action)})}>${(0,e.renderMainEntity)(r,t,i,o)} ${c}</div>`},e.renderInfoEntity=(t,i,n,r)=>void 0===t||!r||(0,d.hideIfEntity)(t,i)?null:l.html`<div class="state entity ${!0===t.show_icon?"icon-entity":""}" style="${(0,e.entityStyles)(t.styles,r,i)}" 
    @action=${r=>{i&&t&&r.detail.action&&(0,e.clickHandler)(n,i,t,r)}}
    .actionHandler=${(0,m.actionHandler)({hasHold:(0,s.hasAction)(t.hold_action),hasDoubleClick:(0,s.hasAction)(t.double_tap_action)})}>${(0,e.renderValue)(t,i)}</div>`,e.renderEntitiesRow=(t,i,n,r,o)=>void 0===i?null:(console.log("rendering entities"),l.html`<div class="${(0,a.renderClasses)(t,o)}">${i.map((t=>(0,e.renderEntity)(t,n,r)))}</div>`),e.renderEntity=(t,i,n,r)=>void 0===r||(0,d.hideIfEntity)(t,i)?null:l.html`<div class="entity" style="${(0,e.entityStyles)(t.styles,i.states[t.entity],i)}"
            @action=${r=>{i&&t&&r.detail.action&&(0,e.clickHandler)(n,i,t,r)}}
            .actionHandler=${(0,m.actionHandler)({hasHold:(0,s.hasAction)(t.hold_action),hasDoubleClick:(0,s.hasAction)(t.double_tap_action)})}>
            ${void 0===t.show_name||t.show_name?l.html`<span>${(0,e.entityName)(t,i)}</span>`:""}
            <div>${(0,e.renderIcon)(r,t,i)}</div>
            ${t.show_state?l.html`<span>${(0,e.entityStateDisplay)(i,t)}</span>`:""}
        </div>`,e.renderRows=(t,i,n)=>{const r=t.filter((t=>!(0,d.hideIfRow)(t,i)));return console.log("Rendering rows..."),l.html`${r.map((t=>(0,e.renderEntitiesRow)(t,t.entities,i,n)))}`},e.extractValue=(t,e,i,o)=>{if(t.format.startsWith("precision")){const n=parseInt(t.format.slice(-1),10);e=(0,r.formatNumber)(e,i.locale,{minimumFractionDigits:n,maximumFractionDigits:n})}else isNaN(parseFloat(e))||!isFinite(e)||("brightness"===t.format?(e=Math.round(e/255*100),o="%"):t.format.startsWith("duration")?(e=(0,n.secondsToDuration)("duration-m"===t.format?e/1e3:e),o=void 0):"kilo"===t.format?e=(0,r.formatNumber)(e/1e3,i.locale,{maximumFractionDigits:2}):"invert"===t.format?e=(0,r.formatNumber)(e-2*e,i.locale):"position"===t.format&&(e=(0,r.formatNumber)(100-e,i.locale)));return{value:e,unit:o}}},846:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.hideIfEntity=e.hideIfRow=e.hideIfCard=e.hideUnavailable=void 0;const n=i(882);e.hideUnavailable=(t,e)=>t.hide_unavailable&&(0,n.isUnavailable)(e),e.hideIfCard=(t,e)=>{var i,r;if(void 0===t.hide_if)return!1;if(t.hide_if){const o=null===(i=e.states[t.entity])||void 0===i?void 0:i.state,a=null===(r=t.hide_if.conditions)||void 0===r?void 0:r.filter((i=>{let r=o;if(i.entity){const t=e.states[i.entity];r=i.attribute?t.attributes[i.attribute]:t.state}return i.attribute&&!i.entity&&(r=e.states[t.entity].attributes[i.attribute]),(0,n.checkConditionalValue)(i,r)}));return(null==a?void 0:a.length)>0}},e.hideIfRow=(t,e)=>{var i;if(void 0===t.hide_if)return!1;if(t.hide_if){const r=null===(i=t.hide_if.conditions)||void 0===i?void 0:i.filter((t=>{if(t.entity){const i=e.states[t.entity];return(0,n.checkConditionalValue)(t,t.attribute?i.attributes[t.attribute]:i.state)}}));return(null==r?void 0:r.length)>0}},e.hideIfEntity=(t,i,r)=>{var o;if((0,e.hideUnavailable)(t,r))return!0;if(void 0===t.hide_if)return!1;if(t.hide_if){const e=r.state,a=null===(o=t.hide_if.conditions)||void 0===o?void 0:o.filter((t=>{let o=e;if(t.entity){const e=i.states[t.entity];o=t.attribute?e.attributes[t.attribute]:e.state}return t.attribute&&!t.entity&&(o=r.attributes[t.attribute]),(0,n.checkConditionalValue)(t,o)}));return(null==a?void 0:a.length)>0}}},607:function(t,e,i){var n=this&&this.__decorate||function(t,e,i,n){var r,o=arguments.length,a=o<3?e:null===n?n=Object.getOwnPropertyDescriptor(e,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,e,i,n);else for(var s=t.length-1;s>=0;s--)(r=t[s])&&(a=(o<3?r(a):o>3?r(e,i,a):r(e,i))||a);return o>3&&a&&Object.defineProperty(e,i,a),a},r=this&&this.__awaiter||function(t,e,i,n){return new(i||(i=Promise))((function(r,o){function a(t){try{l(n.next(t))}catch(t){o(t)}}function s(t){try{l(n.throw(t))}catch(t){o(t)}}function l(t){var e;t.done?r(t.value):(e=t.value,e instanceof i?e:new i((function(t){t(e)}))).then(a,s)}l((n=n.apply(t,e||[])).next())}))};Object.defineProperty(e,"__esModule",{value:!0});const o=i(62),a=i(595),s=i(461),l=i(882),c=i(846),u=i(299),d=i(147);console.info(`%c ROOM-CARD %c ${d.version}`,"color: cyan; background: black; font-weight: bold;","color: darkblue; background: white; font-weight: bold;"),window.customCards=window.customCards||[],window.customCards.push({type:"room-card",name:"Room card",preview:!1,description:"Show multiple entity states, attributes and icons in a single card in Home Assistant's Lovelace UI"});let m=class extends o.LitElement{constructor(){super(...arguments),this._entityCards={}}getChildCustomCardTypes(t,e){if(t)for(const i of t)0===i.type.indexOf("custom:")&&e.add(i.type.substring(7,i.type.length)),this.getChildCustomCardTypes(i.cards,e)}waitForDependentComponents(t){return r(this,void 0,void 0,(function*(){const e=new Set;this.getChildCustomCardTypes(t.cards,e),yield Promise.all(Array.from(e).map((t=>customElements.whenDefined(t))))}))}setConfig(t){return r(this,void 0,void 0,(function*(){(0,s.checkConfig)(t);const e=(0,l.getEntityIds)(t);this.config=Object.assign(Object.assign({},t),{entityIds:e}),yield this.waitForDependentComponents(t),this._helpers=yield window.loadCardHelpers(),this.createCardElements()}))}set hass(t){let e=!1;const i={};if(this.monitoredStates)for(const n of this.config.entityIds)n in t.states?n in this.monitoredStates&&(t.states[n].last_updated>this.monitoredStates[n].last_updated||t.states[n].last_changed>this.monitoredStates[n].last_changed)&&(e=t.states[n]!==i[n],i[n]=t.states[n]):(e=t.states[n]!==i[n],i[n]=t.states[n]);else for(const n of this.config.entityIds)void 0!==t.states[n]&&(e=t.states[n]!==i[n],i[n]=t.states[n]);if(e){for(const[t,e]of Object.entries(i))console.log(` + ${t}:`,e);this.monitoredStates=i}this._hass=t}shouldUpdate(t){const e=void 0!==this.monitoredStates&&void 0!==this.config&&t.size>0&&void 0!==this._helpers&&void 0!==this._helpers.createCardElement;return console.log(`should update? ${e}`,t),e}static get styles(){return u.style}render(){var t,e,i,n,r,a;const c=void 0!==this.config.entity?this.monitoredStates[this.config.entity]:void 0,u=void 0!==this.config.entity?Object.assign(Object.assign({},this.config),{stateObj:c}):void 0,d=null!==(e=null===(t=this.config.info_entities)||void 0===t?void 0:t.map((t=>(0,l.mapStateObject)(t,this._hass,this.config,c))))&&void 0!==e?e:[],m=null!==(n=null===(i=this.config.entities)||void 0===i?void 0:i.map((t=>(0,l.mapStateObject)(t,this._hass,this.config,c))))&&void 0!==n?n:[],h=null!==(a=null===(r=this.config.rows)||void 0===r?void 0:r.map((t=>{var e;return{entities:null===(e=t.entities)||void 0===e?void 0:e.map((t=>(0,l.mapStateObject)(t,this._hass,this.config,c))),hide_if:t.hide_if,content_alignment:t.content_alignment}})))&&void 0!==a?a:[];return this.createCardElements(),Object.entries(this._entityCards).flatMap((([,t])=>t)).forEach((t=>{console.log(t.config)})),o.html`<ha-card elevation="2" style="${(0,s.entityStyles)(this.config.card_styles,c,this._hass)}">
                <div class="card-header">
                    ${(0,s.renderTitle)(this.config,this._hass,this,u,c)}
                    <div class="entities-info-row">
                        ${d.map((t=>(0,s.renderInfoEntity)(t,this._hass,this,c)))}
                    </div>
                </div>
                ${h.length>0?(0,s.renderRows)(h,this._hass,this):(0,s.renderEntitiesRow)(this.config,m,this._hass,this)}
                ${Object.entries(this._entityCards).flatMap((([,t])=>t)).map((t=>t.card))}
            </ha-card>`}getCardSize(){const t=this.config.cards?this.config.cards.length:0,e=this.config.rows?this.config.rows.length:0,i=!this.config.info_entities&&this.config.hide_title?1:2;return t+e+(this.config.entities&&this.config.entities.length>0?1:0)+i}*findVal(t,e){for(const[i,n]of Object.entries(t))i===e&&(yield n),t[i]&&"object"==typeof t[i]&&(yield*this.findVal(t[i],e))}createCardElements(){if(this._entityCards={},!this.config.cards)return;let t=0;for(const e of this.config.cards){const i=this.createCardElement(e,this._hass);for(const n of this.config.entityIds)n in this._entityCards||(this._entityCards[n]=[]),this._entityCards[n].push({config:e,card:i,index:t});t++}}createCardElement(t,e){if((0,c.hideIfCard)(t,e)||t.show_states&&!t.show_states.includes(e.states[t.entity].state))return void console.log("skipping");const i=this._helpers.createCardElement(t);return i.hass=e,i.style.boxShadow="none",i.style.borderRadius="0",i}};n([(0,a.property)({hasChanged:()=>!1})],m.prototype,"_hass",void 0),n([(0,a.property)()],m.prototype,"monitoredStates",void 0),n([(0,a.property)()],m.prototype,"config",void 0),n([(0,a.property)()],m.prototype,"_helpers",void 0),m=n([(0,a.customElement)("room-card")],m),e.default=m},578:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.computeStateDisplay=e.computeStateDomain=void 0;const n=i(623),r=i(247),o=i(347),a=i(319),s=i(759);e.computeStateDomain=t=>t.entity_id.substr(0,t.entity_id.indexOf(".")),e.computeStateDisplay=(t,i,l,c)=>{const u=void 0!==c?c:i.state;if(u===n.UNKNOWN||u===n.UNAVAILABLE)return t(`state.default.${u}`);if((0,s.isNumericState)(i)){if("monetary"===i.attributes.device_class)try{return(0,s.formatNumber)(u,l,{style:"currency",currency:i.attributes.unit_of_measurement})}catch(t){}return`${(0,s.formatNumber)(u,l)}${i.attributes.unit_of_measurement?" "+i.attributes.unit_of_measurement:""}`}const d=(0,e.computeStateDomain)(i);if("input_datetime"===d){if(void 0===c){let t;return i.attributes.has_date&&i.attributes.has_time?(t=new Date(i.attributes.year,i.attributes.month-1,i.attributes.day,i.attributes.hour,i.attributes.minute),(0,o.formatDateTime)(t,l)):i.attributes.has_date?(t=new Date(i.attributes.year,i.attributes.month-1,i.attributes.day),(0,r.formatDate)(t,l)):i.attributes.has_time?(t=new Date,t.setHours(i.attributes.hour,i.attributes.minute),(0,a.formatTime)(t,l)):i.state}try{const t=c.split(" ");if(2===t.length)return(0,o.formatDateTime)(new Date(t.join("T")),l);if(1===t.length){if(c.includes("-"))return(0,r.formatDate)(new Date(`${c}T00:00`),l);if(c.includes(":")){const t=new Date;return(0,a.formatTime)(new Date(`${t.toISOString().split("T")[0]}T${c}`),l)}}return c}catch(t){return c}}return"humidifier"===d&&"on"===u&&i.attributes.humidity?`${i.attributes.humidity} %`:"counter"===d||"number"===d||"input_number"===d?(0,s.formatNumber)(u,l):"button"===d||"sensor"===d&&"timestamp"===i.attributes.device_class?(0,o.formatDateTime)(new Date(u),l):i.attributes.device_class&&t(`component.${d}.state.${i.attributes.device_class}.${u}`)||t(`component.${d}.state._.${u}`)||u}},623:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.TimeFormat=e.NumberFormat=e.SECONDARY_INFO_VALUES=e.TIMESTAMP_FORMATS=e.LAST_UPDATED=e.LAST_CHANGED=e.UNAVAILABLE_STATES=e.UNKNOWN=e.UNAVAILABLE=void 0,e.UNAVAILABLE="unavailable",e.UNKNOWN="unknown",e.UNAVAILABLE_STATES=[e.UNAVAILABLE,e.UNKNOWN],e.LAST_CHANGED="last-changed",e.LAST_UPDATED="last-updated",e.TIMESTAMP_FORMATS=["relative","total","date","time","datetime"],e.SECONDARY_INFO_VALUES=["entity-id","last-changed","last-updated","last-triggered","position","tilt-position","brightness"],e.NumberFormat={language:"language",system:"system",comma_decimal:"comma_decimal",decimal_comma:"decimal_comma",space_comma:"space_comma",none:"none"},e.TimeFormat={language:"language",system:"system",am_pm:"12",twenty_four:"24"}},247:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.formatDate=void 0,e.formatDate=(t,e)=>new Intl.DateTimeFormat(e.language,{year:"numeric",month:"long",day:"numeric"}).format(t)},347:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.formatDateTime=void 0;const n=i(269);e.formatDateTime=(t,e)=>new Intl.DateTimeFormat(e.language,{year:"numeric",month:"long",day:"numeric",hour:(0,n.useAmPm)(e)?"numeric":"2-digit",minute:"2-digit",hour12:(0,n.useAmPm)(e)}).format(t)},759:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.formatNumber=e.numberFormatToLocale=e.isNumericState=e.round=void 0;const n=i(623);e.round=(t,e=2)=>Math.round(t*Math.pow(10,e))/Math.pow(10,e),e.isNumericState=t=>!!t.attributes.unit_of_measurement||!!t.attributes.state_class,e.numberFormatToLocale=t=>{switch(t.number_format){case n.NumberFormat.comma_decimal:return["en-US","en"];case n.NumberFormat.decimal_comma:return["de","es","it"];case n.NumberFormat.space_comma:return["fr","sv","cs"];case n.NumberFormat.system:return;default:return t.language}},e.formatNumber=(t,i,o)=>{const a=i?(0,e.numberFormatToLocale)(i):void 0;if((null==i?void 0:i.number_format)!==n.NumberFormat.none&&!Number.isNaN(Number(t))&&Intl)try{return new Intl.NumberFormat(a,r(t,o)).format(Number(t))}catch(e){return console.error(e),new Intl.NumberFormat(void 0,r(t,o)).format(Number(t))}return"string"==typeof t?t:`${(0,e.round)(t,null==o?void 0:o.maximumFractionDigits).toString()}${"currency"===(null==o?void 0:o.style)?` ${o.currency}`:""}`};const r=(t,e)=>Object.assign({maximumFractionDigits:2},e)},319:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.formatTime=void 0;const n=i(269);e.formatTime=(t,e)=>new Intl.DateTimeFormat(e.language,{hour:"numeric",minute:"2-digit",hour12:(0,n.useAmPm)(e)}).format(t)},230:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.secondsToDuration=void 0;const i=t=>t<10?`0${t}`:t;e.secondsToDuration=function(t){const e=Math.floor(t/3600),n=Math.floor(t%3600/60),r=Math.floor(t%3600%60);return e>0?`${e}:${i(n)}:${i(r)}`:n>0?`${n}:${i(r)}`:r>0?""+r:null}},269:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.useAmPm=void 0;const n=i(623);e.useAmPm=t=>{if(t.time_format===n.TimeFormat.language||t.time_format===n.TimeFormat.system){const e=t.time_format===n.TimeFormat.language?t.language:void 0,i=(new Date).toLocaleString(e);return i.includes("AM")||i.includes("PM")}return t.time_format===n.TimeFormat.am_pm}},299:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.style=void 0;const n=i(62);e.style=n.css`
    ha-card {
        display: flex;
        flex-direction: column;
    }
    ha-card .card-header {
        padding-bottom: 0px;
    }
    .icon-small {
        display: inline-block;
    }
    .entity {
        text-align: center;
        cursor: pointer;
    }
    .entity span {
        font-size: 10px;
    }
    .entities-row {
        flex-direction: row;
        flex-wrap: wrap;
        display: inline-flex;
        align-items: center;
        padding: 0 20px 10px 20px;
    }
    .entities-row .entity {
        margin-right: 16px;
    }    
    .entities-row .entity:last-of-type,
    .entities-info-row .entity:last-of-type {
        margin-right: 0;
    }
    .entities-column {
        flex-direction: column;
        display: flex;
        align-items: flex-end;
        justify-content: space-evenly;
    }
    .entities-column .entity div {
        display: inline-block;
        vertical-align: middle;
    }

    .entities-info-row {
        flex-direction: row;
        flex-wrap: wrap;
        display: inline-flex;
        justify-content: center;
        align-items: center;
        padding: 0 20px 10px 20px;
        font-size: 12px;
        position: absolute;
        right: 20px;
        top: 15px;
    }
    .entities-info-row .entity {
        margin-right: 16px;
    }
    .entities-info-row .entity.icon-entity {
        margin-right: 0px;
    }
    .main-state {
        float: left;
        margin-right: 10px;
    }
    .main-state > ha-state-icon > ha-svg-icon {
        vertical-align: baseline;
    }
    .main-icon {
        vertical-align: baseline;
        font-size: 30px;
    }
    .title {
        min-height: 48px;
    }
    .clickable {
        cursor: pointer;
    }
    .content-left {
        justify-content: left;
    }
    .content-center {
        justify-content: center;
    }
    .content-right {
        justify-content: right;
    }
`},704:(t,e,i)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.getTemplateOrAttribute=e.mapTemplate=e.templateStyling=void 0;const n=i(882);e.templateStyling=(t,e,i)=>{var r;const o=e.icon;return void 0!==(null===(r=null==o?void 0:o.template)||void 0===r?void 0:r.styles)?(0,n.evalTemplate)(i,t,o.template.styles):null},e.mapTemplate=(t,e,i)=>{if(void 0!==t&&t.template){const n=e.templates.filter((e=>e.name===t.template));if(n.length>0){const e=n[0];return Object.assign(Object.assign({stateObj:i},t),e.template)}}return t},e.getTemplateOrAttribute=(t,e,i)=>t&&"object"==typeof t&&"template"in t?(0,n.evalTemplate)(e,i,t.template):t},882:function(t,e,i){Object.defineProperty(e,"__esModule",{value:!0}),e.renderClasses=e.evalTemplate=e.mapStateObject=e.checkConditionalValue=e.getCardEntities=e.getConditionEntitiesFromConfig=e.getConditionEntities=e.getEntity=e.getEntityIds=e.getValue=e.isUnavailable=e.isObject=void 0;const n=i(62),r=i(623),o=i(704);e.isObject=t=>"object"==typeof t&&!Array.isArray(t)&&!!t,e.isUnavailable=t=>!t||r.UNAVAILABLE_STATES.includes(t.state),e.getValue=(t,e)=>{if(t.attribute&&void 0===(null==e?void 0:e.attributes[t.attribute]))throw new Error(`Entity: '${t.entity}' has no attribute named '${t.attribute}'`);return t.attribute?e.attributes[t.attribute]:e.state},e.getEntityIds=t=>{var i,n,r,o;const a=new Set;return a.add(t.entity),null===(i=t.entities)||void 0===i||i.forEach((t=>a.add((0,e.getEntity)(t)))),null===(n=t.info_entities)||void 0===n||n.forEach((t=>a.add((0,e.getEntity)(t)))),null===(r=t.rows)||void 0===r||r.flatMap((t=>t.entities)).forEach((t=>a.add((0,e.getEntity)(t)))),null===(o=t.cards)||void 0===o||o.flatMap((t=>(0,e.getCardEntities)(t))).forEach((t=>a.add(t))),(0,e.getConditionEntitiesFromConfig)(t).forEach((t=>a.add(t))),Array.from(a)},e.getEntity=t=>void 0===t?null:"string"==typeof t?t:t.entity,e.getConditionEntities=t=>{let e=[];return null==t||t.forEach((t=>{var i,n,r,o;const a=null===(n=null===(i=null==t?void 0:t.icon)||void 0===i?void 0:i.conditions)||void 0===n?void 0:n.filter((t=>void 0!==t.entity));a&&(e=e.concat(a));const s=null===(o=null===(r=null==t?void 0:t.hide_if)||void 0===r?void 0:r.conditions)||void 0===o?void 0:o.filter((t=>void 0!==t.entity));s&&(e=e.concat(s))})),e},e.getConditionEntitiesFromConfig=t=>{var i;const n=[t.entities,t.info_entities,null===(i=t.rows)||void 0===i?void 0:i.flatMap((t=>t.entities))];return(0,e.getConditionEntities)(n.flatMap((t=>t))).filter((t=>t.entity)).map((t=>t.entity))},e.getCardEntities=t=>{var i,n;return[(0,e.getEntity)(t.entity)].concat(null===(i=t.cards)||void 0===i?void 0:i.flatMap((t=>(0,e.getCardEntities)(t)))).concat(null===(n=t.entities)||void 0===n?void 0:n.flatMap((t=>(0,e.getEntity)(t)))).filter((t=>t))},e.checkConditionalValue=(t,e)=>{const i="boolean"==typeof t.value?String(t.value):t.value;return"equals"==t.condition&&e==i||"not_equals"==t.condition&&e!=i||"above"==t.condition&&e>i||"below"==t.condition&&e<i||void 0},e.mapStateObject=(t,e,i,n)=>{const r="string"==typeof t?{entity:t}:t;return(0,o.mapTemplate)(r,i,n)},e.evalTemplate=(t,e,i)=>{try{return new Function("states","entity","user","hass","html",`'use strict'; ${i}`).call(this,null==t?void 0:t.states,e,null==t?void 0:t.user,t,n.html)}catch(t){const e=i.length<=100?i.trim():`${i.trim().substring(0,98)}...`;throw t.message=`${t.name}: ${t.message} in '${e}'`,t.name="RoomCardJSTemplateError",t}},e.renderClasses=(t,e)=>`entities-row ${t.content_alignment?`content-${t.content_alignment}`:"content-left"}${void 0!==e?` ${e}`:""}`},595:(t,e,i)=>{i.r(e),i.d(e,{customElement:()=>n,eventOptions:()=>c,property:()=>a,query:()=>u,queryAll:()=>d,queryAssignedElements:()=>f,queryAssignedNodes:()=>v,queryAsync:()=>m,state:()=>s});const n=t=>e=>"function"==typeof e?((t,e)=>(customElements.define(t,e),e))(t,e):((t,e)=>{const{kind:i,elements:n}=e;return{kind:i,elements:n,finisher(e){customElements.define(t,e)}}})(t,e),r=(t,e)=>"method"===e.kind&&e.descriptor&&!("value"in e.descriptor)?{...e,finisher(i){i.createProperty(e.key,t)}}:{kind:"field",key:Symbol(),placement:"own",descriptor:{},originalKey:e.key,initializer(){"function"==typeof e.initializer&&(this[e.key]=e.initializer.call(this))},finisher(i){i.createProperty(e.key,t)}},o=(t,e,i)=>{e.constructor.createProperty(i,t)};function a(t){return(e,i)=>void 0!==i?o(t,e,i):r(t,e)}function s(t){return a({...t,state:!0})}const l=({finisher:t,descriptor:e})=>(i,n)=>{var r;if(void 0===n){const n=null!==(r=i.originalKey)&&void 0!==r?r:i.key,o=null!=e?{kind:"method",placement:"prototype",key:n,descriptor:e(i.key)}:{...i,key:n};return null!=t&&(o.finisher=function(e){t(e,n)}),o}{const r=i.constructor;void 0!==e&&Object.defineProperty(i,n,e(n)),null==t||t(r,n)}};function c(t){return l({finisher:(e,i)=>{Object.assign(e.prototype[i],t)}})}function u(t,e){return l({descriptor:i=>{const n={get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t))&&void 0!==i?i:null},enumerable:!0,configurable:!0};if(e){const e="symbol"==typeof i?Symbol():"__"+i;n.get=function(){var i,n;return void 0===this[e]&&(this[e]=null!==(n=null===(i=this.renderRoot)||void 0===i?void 0:i.querySelector(t))&&void 0!==n?n:null),this[e]}}return n}})}function d(t){return l({descriptor:e=>({get(){var e,i;return null!==(i=null===(e=this.renderRoot)||void 0===e?void 0:e.querySelectorAll(t))&&void 0!==i?i:[]},enumerable:!0,configurable:!0})})}function m(t){return l({descriptor:e=>({async get(){var e;return await this.updateComplete,null===(e=this.renderRoot)||void 0===e?void 0:e.querySelector(t)},enumerable:!0,configurable:!0})})}var h;const p=null!=(null===(h=window.HTMLSlotElement)||void 0===h?void 0:h.prototype.assignedElements)?(t,e)=>t.assignedElements(e):(t,e)=>t.assignedNodes(e).filter((t=>t.nodeType===Node.ELEMENT_NODE));function f(t){const{slot:e,selector:i}=null!=t?t:{};return l({descriptor:n=>({get(){var n;const r="slot"+(e?`[name=${e}]`:":not([name])"),o=null===(n=this.renderRoot)||void 0===n?void 0:n.querySelector(r),a=null!=o?p(o,t):[];return i?a.filter((t=>t.matches(i))):a},enumerable:!0,configurable:!0})})}function v(t,e,i){let n,r=t;return"object"==typeof t?(r=t.slot,n=t):n={flatten:e},i?f({slot:r,flatten:e,selector:i}):l({descriptor:t=>({get(){var t,e;const i="slot"+(r?`[name=${r}]`:":not([name])"),o=null===(t=this.renderRoot)||void 0===t?void 0:t.querySelector(i);return null!==(e=null==o?void 0:o.assignedNodes(n))&&void 0!==e?e:[]},enumerable:!0,configurable:!0})})}},156:(t,e,i)=>{i.r(e),i.d(e,{Directive:()=>o,PartType:()=>n,directive:()=>r});const n={ATTRIBUTE:1,CHILD:2,PROPERTY:3,BOOLEAN_ATTRIBUTE:4,EVENT:5,ELEMENT:6},r=t=>(...e)=>({_$litDirective$:t,values:e});class o{constructor(t){}get _$AU(){return this._$AM._$AU}_$AT(t,e,i){this._$Ct=t,this._$AM=e,this._$Ci=i}_$AS(t,e){return this.update(t,e)}update(t,e){return this.render(...e)}}},62:(t,e,i)=>{i.r(e),i.d(e,{CSSResult:()=>s,LitElement:()=>pt,ReactiveElement:()=>w,UpdatingElement:()=>ht,_$LE:()=>vt,_$LH:()=>lt,adoptStyles:()=>u,css:()=>c,defaultConverter:()=>g,getCompatibleStyle:()=>d,html:()=>B,isServer:()=>gt,noChange:()=>W,notEqual:()=>y,nothing:()=>Y,render:()=>ut,supportsAdoptingStyleSheets:()=>r,svg:()=>q,unsafeCSS:()=>l});const n=window,r=n.ShadowRoot&&(void 0===n.ShadyCSS||n.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,o=Symbol(),a=new WeakMap;class s{constructor(t,e,i){if(this._$cssResult$=!0,i!==o)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(r&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=a.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&a.set(e,t))}return t}toString(){return this.cssText}}const l=t=>new s("string"==typeof t?t:t+"",void 0,o),c=(t,...e)=>{const i=1===t.length?t[0]:e.reduce(((e,i,n)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[n+1]),t[0]);return new s(i,t,o)},u=(t,e)=>{r?t.adoptedStyleSheets=e.map((t=>t instanceof CSSStyleSheet?t:t.styleSheet)):e.forEach((e=>{const i=document.createElement("style"),r=n.litNonce;void 0!==r&&i.setAttribute("nonce",r),i.textContent=e.cssText,t.appendChild(i)}))},d=r?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return l(e)})(t):t;var m;const h=window,p=h.trustedTypes,f=p?p.emptyScript:"",v=h.reactiveElementPolyfillSupport,g={toAttribute(t,e){switch(e){case Boolean:t=t?f:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},y=(t,e)=>e!==t&&(e==e||t==t),_={attribute:!0,type:String,converter:g,reflect:!1,hasChanged:y},b="finalized";class w extends HTMLElement{constructor(){super(),this._$Ei=new Map,this.isUpdatePending=!1,this.hasUpdated=!1,this._$El=null,this._$Eu()}static addInitializer(t){var e;this.finalize(),(null!==(e=this.h)&&void 0!==e?e:this.h=[]).push(t)}static get observedAttributes(){this.finalize();const t=[];return this.elementProperties.forEach(((e,i)=>{const n=this._$Ep(i,e);void 0!==n&&(this._$Ev.set(n,i),t.push(n))})),t}static createProperty(t,e=_){if(e.state&&(e.attribute=!1),this.finalize(),this.elementProperties.set(t,e),!e.noAccessor&&!this.prototype.hasOwnProperty(t)){const i="symbol"==typeof t?Symbol():"__"+t,n=this.getPropertyDescriptor(t,i,e);void 0!==n&&Object.defineProperty(this.prototype,t,n)}}static getPropertyDescriptor(t,e,i){return{get(){return this[e]},set(n){const r=this[t];this[e]=n,this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)||_}static finalize(){if(this.hasOwnProperty(b))return!1;this[b]=!0;const t=Object.getPrototypeOf(this);if(t.finalize(),void 0!==t.h&&(this.h=[...t.h]),this.elementProperties=new Map(t.elementProperties),this._$Ev=new Map,this.hasOwnProperty("properties")){const t=this.properties,e=[...Object.getOwnPropertyNames(t),...Object.getOwnPropertySymbols(t)];for(const i of e)this.createProperty(i,t[i])}return this.elementStyles=this.finalizeStyles(this.styles),!0}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(d(t))}else void 0!==t&&e.push(d(t));return e}static _$Ep(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}_$Eu(){var t;this._$E_=new Promise((t=>this.enableUpdating=t)),this._$AL=new Map,this._$Eg(),this.requestUpdate(),null===(t=this.constructor.h)||void 0===t||t.forEach((t=>t(this)))}addController(t){var e,i;(null!==(e=this._$ES)&&void 0!==e?e:this._$ES=[]).push(t),void 0!==this.renderRoot&&this.isConnected&&(null===(i=t.hostConnected)||void 0===i||i.call(t))}removeController(t){var e;null===(e=this._$ES)||void 0===e||e.splice(this._$ES.indexOf(t)>>>0,1)}_$Eg(){this.constructor.elementProperties.forEach(((t,e)=>{this.hasOwnProperty(e)&&(this._$Ei.set(e,this[e]),delete this[e])}))}createRenderRoot(){var t;const e=null!==(t=this.shadowRoot)&&void 0!==t?t:this.attachShadow(this.constructor.shadowRootOptions);return u(e,this.constructor.elementStyles),e}connectedCallback(){var t;void 0===this.renderRoot&&(this.renderRoot=this.createRenderRoot()),this.enableUpdating(!0),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostConnected)||void 0===e?void 0:e.call(t)}))}enableUpdating(t){}disconnectedCallback(){var t;null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostDisconnected)||void 0===e?void 0:e.call(t)}))}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$EO(t,e,i=_){var n;const r=this.constructor._$Ep(t,i);if(void 0!==r&&!0===i.reflect){const o=(void 0!==(null===(n=i.converter)||void 0===n?void 0:n.toAttribute)?i.converter:g).toAttribute(e,i.type);this._$El=t,null==o?this.removeAttribute(r):this.setAttribute(r,o),this._$El=null}}_$AK(t,e){var i;const n=this.constructor,r=n._$Ev.get(t);if(void 0!==r&&this._$El!==r){const t=n.getPropertyOptions(r),o="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==(null===(i=t.converter)||void 0===i?void 0:i.fromAttribute)?t.converter:g;this._$El=r,this[r]=o.fromAttribute(e,t.type),this._$El=null}}requestUpdate(t,e,i){let n=!0;void 0!==t&&(((i=i||this.constructor.getPropertyOptions(t)).hasChanged||y)(this[t],e)?(this._$AL.has(t)||this._$AL.set(t,e),!0===i.reflect&&this._$El!==t&&(void 0===this._$EC&&(this._$EC=new Map),this._$EC.set(t,i))):n=!1),!this.isUpdatePending&&n&&(this._$E_=this._$Ej())}async _$Ej(){this.isUpdatePending=!0;try{await this._$E_}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){var t;if(!this.isUpdatePending)return;this.hasUpdated,this._$Ei&&(this._$Ei.forEach(((t,e)=>this[e]=t)),this._$Ei=void 0);let e=!1;const i=this._$AL;try{e=this.shouldUpdate(i),e?(this.willUpdate(i),null===(t=this._$ES)||void 0===t||t.forEach((t=>{var e;return null===(e=t.hostUpdate)||void 0===e?void 0:e.call(t)})),this.update(i)):this._$Ek()}catch(t){throw e=!1,this._$Ek(),t}e&&this._$AE(i)}willUpdate(t){}_$AE(t){var e;null===(e=this._$ES)||void 0===e||e.forEach((t=>{var e;return null===(e=t.hostUpdated)||void 0===e?void 0:e.call(t)})),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$Ek(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$E_}shouldUpdate(t){return!0}update(t){void 0!==this._$EC&&(this._$EC.forEach(((t,e)=>this._$EO(e,this[e],t))),this._$EC=void 0),this._$Ek()}updated(t){}firstUpdated(t){}}var $;w[b]=!0,w.elementProperties=new Map,w.elementStyles=[],w.shadowRootOptions={mode:"open"},null==v||v({ReactiveElement:w}),(null!==(m=h.reactiveElementVersions)&&void 0!==m?m:h.reactiveElementVersions=[]).push("1.6.3");const A=window,E=A.trustedTypes,S=E?E.createPolicy("lit-html",{createHTML:t=>t}):void 0,T="$lit$",C=`lit$${(Math.random()+"").slice(9)}$`,k="?"+C,O=`<${k}>`,N=document,D=()=>N.createComment(""),x=t=>null===t||"object"!=typeof t&&"function"!=typeof t,I=Array.isArray,M=t=>I(t)||"function"==typeof(null==t?void 0:t[Symbol.iterator]),j="[ \t\n\f\r]",P=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,F=/-->/g,U=/>/g,R=RegExp(`>|${j}(?:([^\\s"'>=/]+)(${j}*=${j}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),H=/'/g,L=/"/g,V=/^(?:script|style|textarea|title)$/i,z=t=>(e,...i)=>({_$litType$:t,strings:e,values:i}),B=z(1),q=z(2),W=Symbol.for("lit-noChange"),Y=Symbol.for("lit-nothing"),K=new WeakMap,G=N.createTreeWalker(N,129,null,!1);function J(t,e){if(!Array.isArray(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==S?S.createHTML(e):e}const X=(t,e)=>{const i=t.length-1,n=[];let r,o=2===e?"<svg>":"",a=P;for(let e=0;e<i;e++){const i=t[e];let s,l,c=-1,u=0;for(;u<i.length&&(a.lastIndex=u,l=a.exec(i),null!==l);)u=a.lastIndex,a===P?"!--"===l[1]?a=F:void 0!==l[1]?a=U:void 0!==l[2]?(V.test(l[2])&&(r=RegExp("</"+l[2],"g")),a=R):void 0!==l[3]&&(a=R):a===R?">"===l[0]?(a=null!=r?r:P,c=-1):void 0===l[1]?c=-2:(c=a.lastIndex-l[2].length,s=l[1],a=void 0===l[3]?R:'"'===l[3]?L:H):a===L||a===H?a=R:a===F||a===U?a=P:(a=R,r=void 0);const d=a===R&&t[e+1].startsWith("/>")?" ":"";o+=a===P?i+O:c>=0?(n.push(s),i.slice(0,c)+T+i.slice(c)+C+d):i+C+(-2===c?(n.push(void 0),e):d)}return[J(t,o+(t[i]||"<?>")+(2===e?"</svg>":"")),n]};class Z{constructor({strings:t,_$litType$:e},i){let n;this.parts=[];let r=0,o=0;const a=t.length-1,s=this.parts,[l,c]=X(t,e);if(this.el=Z.createElement(l,i),G.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(n=G.nextNode())&&s.length<a;){if(1===n.nodeType){if(n.hasAttributes()){const t=[];for(const e of n.getAttributeNames())if(e.endsWith(T)||e.startsWith(C)){const i=c[o++];if(t.push(e),void 0!==i){const t=n.getAttribute(i.toLowerCase()+T).split(C),e=/([.?@])?(.*)/.exec(i);s.push({type:1,index:r,name:e[2],strings:t,ctor:"."===e[1]?nt:"?"===e[1]?ot:"@"===e[1]?at:it})}else s.push({type:6,index:r})}for(const e of t)n.removeAttribute(e)}if(V.test(n.tagName)){const t=n.textContent.split(C),e=t.length-1;if(e>0){n.textContent=E?E.emptyScript:"";for(let i=0;i<e;i++)n.append(t[i],D()),G.nextNode(),s.push({type:2,index:++r});n.append(t[e],D())}}}else if(8===n.nodeType)if(n.data===k)s.push({type:2,index:r});else{let t=-1;for(;-1!==(t=n.data.indexOf(C,t+1));)s.push({type:7,index:r}),t+=C.length-1}r++}}static createElement(t,e){const i=N.createElement("template");return i.innerHTML=t,i}}function Q(t,e,i=t,n){var r,o,a,s;if(e===W)return e;let l=void 0!==n?null===(r=i._$Co)||void 0===r?void 0:r[n]:i._$Cl;const c=x(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==c&&(null===(o=null==l?void 0:l._$AO)||void 0===o||o.call(l,!1),void 0===c?l=void 0:(l=new c(t),l._$AT(t,i,n)),void 0!==n?(null!==(a=(s=i)._$Co)&&void 0!==a?a:s._$Co=[])[n]=l:i._$Cl=l),void 0!==l&&(e=Q(t,l._$AS(t,e.values),l,n)),e}class tt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){var e;const{el:{content:i},parts:n}=this._$AD,r=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:N).importNode(i,!0);G.currentNode=r;let o=G.nextNode(),a=0,s=0,l=n[0];for(;void 0!==l;){if(a===l.index){let e;2===l.type?e=new et(o,o.nextSibling,this,t):1===l.type?e=new l.ctor(o,l.name,l.strings,this,t):6===l.type&&(e=new st(o,this,t)),this._$AV.push(e),l=n[++s]}a!==(null==l?void 0:l.index)&&(o=G.nextNode(),a++)}return G.currentNode=N,r}v(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class et{constructor(t,e,i,n){var r;this.type=2,this._$AH=Y,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=n,this._$Cp=null===(r=null==n?void 0:n.isConnected)||void 0===r||r}get _$AU(){var t,e;return null!==(e=null===(t=this._$AM)||void 0===t?void 0:t._$AU)&&void 0!==e?e:this._$Cp}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===(null==t?void 0:t.nodeType)&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Q(this,t,e),x(t)?t===Y||null==t||""===t?(this._$AH!==Y&&this._$AR(),this._$AH=Y):t!==this._$AH&&t!==W&&this._(t):void 0!==t._$litType$?this.g(t):void 0!==t.nodeType?this.$(t):M(t)?this.T(t):this._(t)}k(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}$(t){this._$AH!==t&&(this._$AR(),this._$AH=this.k(t))}_(t){this._$AH!==Y&&x(this._$AH)?this._$AA.nextSibling.data=t:this.$(N.createTextNode(t)),this._$AH=t}g(t){var e;const{values:i,_$litType$:n}=t,r="number"==typeof n?this._$AC(t):(void 0===n.el&&(n.el=Z.createElement(J(n.h,n.h[0]),this.options)),n);if((null===(e=this._$AH)||void 0===e?void 0:e._$AD)===r)this._$AH.v(i);else{const t=new tt(r,this),e=t.u(this.options);t.v(i),this.$(e),this._$AH=t}}_$AC(t){let e=K.get(t.strings);return void 0===e&&K.set(t.strings,e=new Z(t)),e}T(t){I(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,n=0;for(const r of t)n===e.length?e.push(i=new et(this.k(D()),this.k(D()),this,this.options)):i=e[n],i._$AI(r),n++;n<e.length&&(this._$AR(i&&i._$AB.nextSibling,n),e.length=n)}_$AR(t=this._$AA.nextSibling,e){var i;for(null===(i=this._$AP)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){var e;void 0===this._$AM&&(this._$Cp=t,null===(e=this._$AP)||void 0===e||e.call(this,t))}}class it{constructor(t,e,i,n,r){this.type=1,this._$AH=Y,this._$AN=void 0,this.element=t,this.name=e,this._$AM=n,this.options=r,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=Y}get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}_$AI(t,e=this,i,n){const r=this.strings;let o=!1;if(void 0===r)t=Q(this,t,e,0),o=!x(t)||t!==this._$AH&&t!==W,o&&(this._$AH=t);else{const n=t;let a,s;for(t=r[0],a=0;a<r.length-1;a++)s=Q(this,n[i+a],e,a),s===W&&(s=this._$AH[a]),o||(o=!x(s)||s!==this._$AH[a]),s===Y?t=Y:t!==Y&&(t+=(null!=s?s:"")+r[a+1]),this._$AH[a]=s}o&&!n&&this.j(t)}j(t){t===Y?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,null!=t?t:"")}}class nt extends it{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===Y?void 0:t}}const rt=E?E.emptyScript:"";class ot extends it{constructor(){super(...arguments),this.type=4}j(t){t&&t!==Y?this.element.setAttribute(this.name,rt):this.element.removeAttribute(this.name)}}class at extends it{constructor(t,e,i,n,r){super(t,e,i,n,r),this.type=5}_$AI(t,e=this){var i;if((t=null!==(i=Q(this,t,e,0))&&void 0!==i?i:Y)===W)return;const n=this._$AH,r=t===Y&&n!==Y||t.capture!==n.capture||t.once!==n.once||t.passive!==n.passive,o=t!==Y&&(n===Y||r);r&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){var e,i;"function"==typeof this._$AH?this._$AH.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$AH.handleEvent(t)}}class st{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){Q(this,t)}}const lt={O:T,P:C,A:k,C:1,M:X,L:tt,R:M,D:Q,I:et,V:it,H:ot,N:at,U:nt,F:st},ct=A.litHtmlPolyfillSupport;null==ct||ct(Z,et),(null!==($=A.litHtmlVersions)&&void 0!==$?$:A.litHtmlVersions=[]).push("2.8.0");const ut=(t,e,i)=>{var n,r;const o=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:e;let a=o._$litPart$;if(void 0===a){const t=null!==(r=null==i?void 0:i.renderBefore)&&void 0!==r?r:null;o._$litPart$=a=new et(e.insertBefore(D(),t),t,void 0,null!=i?i:{})}return a._$AI(t),a};var dt,mt;const ht=w;class pt extends w{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){var t,e;const i=super.createRenderRoot();return null!==(t=(e=this.renderOptions).renderBefore)&&void 0!==t||(e.renderBefore=i.firstChild),i}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=ut(e,this.renderRoot,this.renderOptions)}connectedCallback(){var t;super.connectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!0)}disconnectedCallback(){var t;super.disconnectedCallback(),null===(t=this._$Do)||void 0===t||t.setConnected(!1)}render(){return W}}pt.finalized=!0,pt._$litElement$=!0,null===(dt=globalThis.litElementHydrateSupport)||void 0===dt||dt.call(globalThis,{LitElement:pt});const ft=globalThis.litElementPolyfillSupport;null==ft||ft({LitElement:pt});const vt={_$AK:(t,e,i)=>{t._$AK(e,i)},_$AL:t=>t._$AL};(null!==(mt=globalThis.litElementVersions)&&void 0!==mt?mt:globalThis.litElementVersions=[]).push("3.3.3");const gt=!1},147:t=>{t.exports=JSON.parse('{"name":"room-card","version":"1.07.25","description":"Show entities in Home Assistant\'s Lovelace UI","keywords":["home-assistant","homeassistant","lovelace","custom-cards","multiple","entity","row"],"module":"room-card.js","license":"MIT","dependencies":{"babel-jest":"^29.6.4","custom-card-helpers":"^1.8.0","home-assistant-js-websocket":"^8.2.0","jest-environment-jsdom":"^29.5.0","jest-ts-auto-mock":"^2.1.0","lit":"^2.7.5","ts-auto-mock":"^3.6.2","ttypescript":"^1.5.13","yarn":"^1.22.18"},"devDependencies":{"@babel/core":"^7.22.1","@babel/plugin-transform-runtime":"^7.22.4","@babel/preset-env":"^7.22.5","@formatjs/intl-utils":"^3.8.4","@types/jest":"^29.5.3","@typescript-eslint/eslint-plugin":"^5.60.1","@typescript-eslint/parser":"^5.59.1","babel-loader":"^9.1.3","codecov":"^3.8.3","compression-webpack-plugin":"^10.0.0","eslint":"^8.44.0","eslint-config-prettier":"^8.8.0","eslint-plugin-prettier":"^4.0.0","jest":"^29.6.2","prettier":"^2.8.8","ts-jest":"^29.1.0","ts-loader":"^9.4.4","typescript":"^4.9.5","webpack":"^5.88.2","webpack-cli":"^5.0.2"},"peerDependencies":{"ts-node":">=10"},"scripts":{"lint":"eslint src/**/*.ts","dev":"webpack -c webpack.config.js","watch":"webpack --watch -c webpack.config.js","build":"yarn lint && webpack -c webpack.config.js","test":"jest","coverage":"jest --coverage","workflow":"jest --coverage --json --outputFile=/home/runner/work/room-card/room-card/jest.results.json","prebuild":"copy git-hooks\\\\pre-commit .git\\\\hooks\\\\ && echo \'hook copied\'"}}')}},e={};function i(n){var r=e[n];if(void 0!==r)return r.exports;var o=e[n]={exports:{}};return t[n].call(o.exports,o,o.exports,i),o.exports}i.d=(t,e)=>{for(var n in e)i.o(e,n)&&!i.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},i.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),i.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i(607)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QixFQUFFK3NCLEVBQVk3VixLQUFTdVYsRUFBb0J6c0IsRUFBRTRzQixFQUFTMVYsSUFDNUUzWSxPQUFPdWlCLGVBQWU4TCxFQUFTMVYsRUFBSyxDQUFFOEosWUFBWSxFQUFNelYsSUFBS3doQixFQUFXN1YsSUFFMUUsRUNORHVWLEVBQW9CenNCLEVBQUksQ0FBQ21mLEVBQUs2TixJQUFVenVCLE9BQU9RLFVBQVVDLGVBQWVDLEtBQUtrZ0IsRUFBSzZOLEdDQ2xGUCxFQUFvQnJ1QixFQUFLd3VCLElBQ0gsb0JBQVhsTSxRQUEwQkEsT0FBT3VNLGFBQzFDMXVCLE9BQU91aUIsZUFBZThMLEVBQVNsTSxPQUFPdU0sWUFBYSxDQUFFcnFCLE1BQU8sV0FFN0RyRSxPQUFPdWlCLGVBQWU4TCxFQUFTLGFBQWMsQ0FBRWhxQixPQUFPLEdBQU8sRUNGcEM2cEIsRUFBb0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGZvcm1hdGpzL2ludGwtdXRpbHMvbGliL3NyYy9kaWZmLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jdXN0b20tY2FyZC1oZWxwZXJzL2Rpc3QvaW5kZXgubS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvZGlyZWN0aXZlcy9hY3Rpb24taGFuZGxlci1kaXJlY3RpdmUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2VudGl0eS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaGlkZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9jb21wdXRlX3N0YXRlX2Rpc3BsYXkudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9jb25zdGFudHMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9mb3JtYXRfZGF0ZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGliL2Zvcm1hdF9kYXRlX3RpbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9mb3JtYXRfbnVtYmVyLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvZm9ybWF0X3RpbWUudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2xpYi9zZWNvbmRzX3RvX2R1cmF0aW9uLnRzIiwid2VicGFjazovLy8uL3NyYy9saWIvdXNlX2FtX3BtLnRzIiwid2VicGFjazovLy8uL3NyYy9zdHlsZXMudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uL3NyYy91dGlsLnRzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9jdXN0b20tZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3N0YXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9iYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9ldmVudC1vcHRpb25zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYWxsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvZGVjb3JhdG9ycy9xdWVyeS1hc3luYy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGxpdC9yZWFjdGl2ZS1lbGVtZW50L2RlY29yYXRvcnMvcXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9kZWNvcmF0b3JzL3F1ZXJ5LWFzc2lnbmVkLW5vZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9kaXJlY3RpdmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BsaXQvcmVhY3RpdmUtZWxlbWVudC9jc3MtdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AbGl0L3JlYWN0aXZlLWVsZW1lbnQvcmVhY3RpdmUtZWxlbWVudC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbGl0LWh0bWwvbGl0LWh0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xpdC1lbGVtZW50L2xpdC1lbGVtZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9saXQtaHRtbC9pcy1zZXJ2ZXIuanMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovLy93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vL3dlYnBhY2svc3RhcnR1cCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hc3NpZ24gPSAodGhpcyAmJiB0aGlzLl9fYXNzaWduKSB8fCBmdW5jdGlvbiAoKSB7XG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgZm9yICh2YXIgcywgaSA9IDEsIG4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKVxuICAgICAgICAgICAgICAgIHRbcF0gPSBzW3BdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0O1xuICAgIH07XG4gICAgcmV0dXJuIF9fYXNzaWduLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59O1xudmFyIE1TX1BFUl9TRUNPTkQgPSAxZTM7XG52YXIgU0VDU19QRVJfTUlOID0gNjA7XG52YXIgU0VDU19QRVJfSE9VUiA9IFNFQ1NfUEVSX01JTiAqIDYwO1xudmFyIFNFQ1NfUEVSX0RBWSA9IFNFQ1NfUEVSX0hPVVIgKiAyNDtcbnZhciBTRUNTX1BFUl9XRUVLID0gU0VDU19QRVJfREFZICogNztcbmV4cG9ydCBmdW5jdGlvbiBzZWxlY3RVbml0KGZyb20sIHRvLCB0aHJlc2hvbGRzKSB7XG4gICAgaWYgKHRvID09PSB2b2lkIDApIHsgdG8gPSBEYXRlLm5vdygpOyB9XG4gICAgaWYgKHRocmVzaG9sZHMgPT09IHZvaWQgMCkgeyB0aHJlc2hvbGRzID0ge307IH1cbiAgICB2YXIgcmVzb2x2ZWRUaHJlc2hvbGRzID0gX19hc3NpZ24oX19hc3NpZ24oe30sIERFRkFVTFRfVEhSRVNIT0xEUyksICh0aHJlc2hvbGRzIHx8IHt9KSk7XG4gICAgdmFyIHNlY3MgPSAoK2Zyb20gLSArdG8pIC8gTVNfUEVSX1NFQ09ORDtcbiAgICBpZiAoTWF0aC5hYnMoc2VjcykgPCByZXNvbHZlZFRocmVzaG9sZHMuc2Vjb25kKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZChzZWNzKSxcbiAgICAgICAgICAgIHVuaXQ6ICdzZWNvbmQnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgbWlucyA9IHNlY3MgLyBTRUNTX1BFUl9NSU47XG4gICAgaWYgKE1hdGguYWJzKG1pbnMpIDwgcmVzb2x2ZWRUaHJlc2hvbGRzLm1pbnV0ZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IE1hdGgucm91bmQobWlucyksXG4gICAgICAgICAgICB1bml0OiAnbWludXRlJyxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdmFyIGhvdXJzID0gc2VjcyAvIFNFQ1NfUEVSX0hPVVI7XG4gICAgaWYgKE1hdGguYWJzKGhvdXJzKSA8IHJlc29sdmVkVGhyZXNob2xkcy5ob3VyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZChob3VycyksXG4gICAgICAgICAgICB1bml0OiAnaG91cicsXG4gICAgICAgIH07XG4gICAgfVxuICAgIHZhciBkYXlzID0gc2VjcyAvIFNFQ1NfUEVSX0RBWTtcbiAgICBpZiAoTWF0aC5hYnMoZGF5cykgPCByZXNvbHZlZFRocmVzaG9sZHMuZGF5KSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZChkYXlzKSxcbiAgICAgICAgICAgIHVuaXQ6ICdkYXknLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZnJvbURhdGUgPSBuZXcgRGF0ZShmcm9tKTtcbiAgICB2YXIgdG9EYXRlID0gbmV3IERhdGUodG8pO1xuICAgIHZhciB5ZWFycyA9IGZyb21EYXRlLmdldEZ1bGxZZWFyKCkgLSB0b0RhdGUuZ2V0RnVsbFllYXIoKTtcbiAgICBpZiAoTWF0aC5yb3VuZChNYXRoLmFicyh5ZWFycykpID4gMCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsdWU6IE1hdGgucm91bmQoeWVhcnMpLFxuICAgICAgICAgICAgdW5pdDogJ3llYXInLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgbW9udGhzID0geWVhcnMgKiAxMiArIGZyb21EYXRlLmdldE1vbnRoKCkgLSB0b0RhdGUuZ2V0TW9udGgoKTtcbiAgICBpZiAoTWF0aC5yb3VuZChNYXRoLmFicyhtb250aHMpKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiBNYXRoLnJvdW5kKG1vbnRocyksXG4gICAgICAgICAgICB1bml0OiAnbW9udGgnLFxuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgd2Vla3MgPSBzZWNzIC8gU0VDU19QRVJfV0VFSztcbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogTWF0aC5yb3VuZCh3ZWVrcyksXG4gICAgICAgIHVuaXQ6ICd3ZWVrJyxcbiAgICB9O1xufVxuZXhwb3J0IHZhciBERUZBVUxUX1RIUkVTSE9MRFMgPSB7XG4gICAgc2Vjb25kOiA0NSxcbiAgICBtaW51dGU6IDQ1LFxuICAgIGhvdXI6IDIyLFxuICAgIGRheTogNSxcbn07XG4iLCJpbXBvcnR7c2VsZWN0VW5pdCBhcyBlfWZyb21cIkBmb3JtYXRqcy9pbnRsLXV0aWxzXCI7dmFyIHQscixuPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGkodCkuZm9ybWF0KGUpfSxpPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChlLmxhbmd1YWdlLHt3ZWVrZGF5OlwibG9uZ1wiLG1vbnRoOlwibG9uZ1wiLGRheTpcIm51bWVyaWNcIn0pfSxhPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG8odCkuZm9ybWF0KGUpfSxvPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChlLmxhbmd1YWdlLHt5ZWFyOlwibnVtZXJpY1wiLG1vbnRoOlwibG9uZ1wiLGRheTpcIm51bWVyaWNcIn0pfSx1PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIGModCkuZm9ybWF0KGUpfSxjPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChlLmxhbmd1YWdlLHt5ZWFyOlwibnVtZXJpY1wiLG1vbnRoOlwibnVtZXJpY1wiLGRheTpcIm51bWVyaWNcIn0pfSxtPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIHModCkuZm9ybWF0KGUpfSxzPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChlLmxhbmd1YWdlLHtkYXk6XCJudW1lcmljXCIsbW9udGg6XCJzaG9ydFwifSl9LGw9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gZCh0KS5mb3JtYXQoZSl9LGQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use21vbnRoOlwibG9uZ1wiLHllYXI6XCJudW1lcmljXCJ9KX0sZj1mdW5jdGlvbihlLHQpe3JldHVybiBnKHQpLmZvcm1hdChlKX0sZz1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoZS5sYW5ndWFnZSx7bW9udGg6XCJsb25nXCJ9KX0scD1mdW5jdGlvbihlLHQpe3JldHVybiBoKHQpLmZvcm1hdChlKX0saD1mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoZS5sYW5ndWFnZSx7eWVhcjpcIm51bWVyaWNcIn0pfTshZnVuY3Rpb24oZSl7ZS5sYW5ndWFnZT1cImxhbmd1YWdlXCIsZS5zeXN0ZW09XCJzeXN0ZW1cIixlLmNvbW1hX2RlY2ltYWw9XCJjb21tYV9kZWNpbWFsXCIsZS5kZWNpbWFsX2NvbW1hPVwiZGVjaW1hbF9jb21tYVwiLGUuc3BhY2VfY29tbWE9XCJzcGFjZV9jb21tYVwiLGUubm9uZT1cIm5vbmVcIn0odHx8KHQ9e30pKSxmdW5jdGlvbihlKXtlLmxhbmd1YWdlPVwibGFuZ3VhZ2VcIixlLnN5c3RlbT1cInN5c3RlbVwiLGUuYW1fcG09XCIxMlwiLGUudHdlbnR5X2ZvdXI9XCIyNFwifShyfHwocj17fSkpO3ZhciBiPWZ1bmN0aW9uKGUpe2lmKGUudGltZV9mb3JtYXQ9PT1yLmxhbmd1YWdlfHxlLnRpbWVfZm9ybWF0PT09ci5zeXN0ZW0pe3ZhciB0PWUudGltZV9mb3JtYXQ9PT1yLmxhbmd1YWdlP2UubGFuZ3VhZ2U6dm9pZCAwLG49KG5ldyBEYXRlKS50b0xvY2FsZVN0cmluZyh0KTtyZXR1cm4gbi5pbmNsdWRlcyhcIkFNXCIpfHxuLmluY2x1ZGVzKFwiUE1cIil9cmV0dXJuIGUudGltZV9mb3JtYXQ9PT1yLmFtX3BtfSx2PWZ1bmN0aW9uKGUsdCl7cmV0dXJuIF8odCkuZm9ybWF0KGUpfSxfPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChlLmxhbmd1YWdlLHt5ZWFyOlwibnVtZXJpY1wiLG1vbnRoOlwibG9uZ1wiLGRheTpcIm51bWVyaWNcIixob3VyOmIoZSk/XCJudW1lcmljXCI6XCIyLWRpZ2l0XCIsbWludXRlOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LHk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdyh0KS5mb3JtYXQoZSl9LHc9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use3llYXI6XCJudW1lcmljXCIsbW9udGg6XCJsb25nXCIsZGF5OlwibnVtZXJpY1wiLGhvdXI6YihlKT9cIm51bWVyaWNcIjpcIjItZGlnaXRcIixtaW51dGU6XCIyLWRpZ2l0XCIsc2Vjb25kOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LGs9ZnVuY3Rpb24oZSx0KXtyZXR1cm4geCh0KS5mb3JtYXQoZSl9LHg9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use3llYXI6XCJudW1lcmljXCIsbW9udGg6XCJudW1lcmljXCIsZGF5OlwibnVtZXJpY1wiLGhvdXI6XCJudW1lcmljXCIsbWludXRlOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LEQ9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gUyh0KS5mb3JtYXQoZSl9LFM9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use2hvdXI6XCJudW1lcmljXCIsbWludXRlOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LEY9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gVCh0KS5mb3JtYXQoZSl9LFQ9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use2hvdXI6YihlKT9cIm51bWVyaWNcIjpcIjItZGlnaXRcIixtaW51dGU6XCIyLWRpZ2l0XCIsc2Vjb25kOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LEk9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gTih0KS5mb3JtYXQoZSl9LE49ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use2hvdXI6YihlKT9cIm51bWVyaWNcIjpcIjItZGlnaXRcIixtaW51dGU6XCIyLWRpZ2l0XCIsc2Vjb25kOlwiMi1kaWdpdFwiLGhvdXIxMjpiKGUpfSl9LE09ZnVuY3Rpb24odCxyLG4saSl7dm9pZCAwPT09aSYmKGk9ITApO3ZhciBhPWUodCxuKTtyZXR1cm4gaT9mdW5jdGlvbihlKXtyZXR1cm4gbmV3IEludGwuUmVsYXRpdmVUaW1lRm9ybWF0KGUubGFuZ3VhZ2Use251bWVyaWM6XCJhdXRvXCJ9KX0ocikuZm9ybWF0KGEudmFsdWUsYS51bml0KTpJbnRsLk51bWJlckZvcm1hdChyLmxhbmd1YWdlLHtzdHlsZTpcInVuaXRcIix1bml0OmEudW5pdCx1bml0RGlzcGxheTpcImxvbmdcIn0pLmZvcm1hdChNYXRoLmFicyhhLnZhbHVlKSl9O2Z1bmN0aW9uIEMoZSl7dmFyIHQscj0zNjAwKih0PWUuYXR0cmlidXRlcy5yZW1haW5pbmcuc3BsaXQoXCI6XCIpLm1hcChOdW1iZXIpKVswXSs2MCp0WzFdK3RbMl07aWYoXCJhY3RpdmVcIj09PWUuc3RhdGUpe3ZhciBuPShuZXcgRGF0ZSkuZ2V0VGltZSgpLGk9bmV3IERhdGUoZS5sYXN0X2NoYW5nZWQpLmdldFRpbWUoKTtyPU1hdGgubWF4KHItKG4taSkvMWUzLDApfXJldHVybiByfWZ1bmN0aW9uIE8oKXtyZXR1cm4oTz1PYmplY3QuYXNzaWdufHxmdW5jdGlvbihlKXtmb3IodmFyIHQ9MTt0PGFyZ3VtZW50cy5sZW5ndGg7dCsrKXt2YXIgcj1hcmd1bWVudHNbdF07Zm9yKHZhciBuIGluIHIpT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHIsbikmJihlW25dPXJbbl0pfXJldHVybiBlfSkuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBxPWZ1bmN0aW9uKGUsdCxyLG4pe3ZvaWQgMD09PW4mJihuPSExKSxlLl90aGVtZXN8fChlLl90aGVtZXM9e30pO3ZhciBpPXQuZGVmYXVsdF90aGVtZTsoXCJkZWZhdWx0XCI9PT1yfHxyJiZ0LnRoZW1lc1tyXSkmJihpPXIpO3ZhciBhPU8oe30sZS5fdGhlbWVzKTtpZihcImRlZmF1bHRcIiE9PWkpe3ZhciBvPXQudGhlbWVzW2ldO09iamVjdC5rZXlzKG8pLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIHI9XCItLVwiK3Q7ZS5fdGhlbWVzW3JdPVwiXCIsYVtyXT1vW3RdfSl9aWYoZS51cGRhdGVTdHlsZXM/ZS51cGRhdGVTdHlsZXMoYSk6d2luZG93LlNoYWR5Q1NTJiZ3aW5kb3cuU2hhZHlDU1Muc3R5bGVTdWJ0cmVlKGUsYSksbil7dmFyIHU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIm1ldGFbbmFtZT10aGVtZS1jb2xvcl1cIik7aWYodSl7dS5oYXNBdHRyaWJ1dGUoXCJkZWZhdWx0LWNvbnRlbnRcIil8fHUuc2V0QXR0cmlidXRlKFwiZGVmYXVsdC1jb250ZW50XCIsdS5nZXRBdHRyaWJ1dGUoXCJjb250ZW50XCIpKTt2YXIgYz1hW1wiLS1wcmltYXJ5LWNvbG9yXCJdfHx1LmdldEF0dHJpYnV0ZShcImRlZmF1bHQtY29udGVudFwiKTt1LnNldEF0dHJpYnV0ZShcImNvbnRlbnRcIixjKX19fSxBPWZ1bmN0aW9uKGUpe3JldHVyblwiZnVuY3Rpb25cIj09dHlwZW9mIGUuZ2V0Q2FyZFNpemU/ZS5nZXRDYXJkU2l6ZSgpOjR9O2Z1bmN0aW9uIEUoZSl7cmV0dXJuIGUuc3Vic3RyKDAsZS5pbmRleE9mKFwiLlwiKSl9ZnVuY3Rpb24gaihlKXtyZXR1cm4gZS5zdWJzdHIoZS5pbmRleE9mKFwiLlwiKSsxKX1mdW5jdGlvbiBSKGUpe3ZhciB0LHI9KG51bGw9PWV8fG51bGw9PSh0PWUubG9jYWxlKT92b2lkIDA6dC5sYW5ndWFnZSl8fFwiZW5cIjtyZXR1cm4gZS50cmFuc2xhdGlvbk1ldGFkYXRhLnRyYW5zbGF0aW9uc1tyXSYmZS50cmFuc2xhdGlvbk1ldGFkYXRhLnRyYW5zbGF0aW9uc1tyXS5pc1JUTHx8ITF9ZnVuY3Rpb24geihlKXtyZXR1cm4gUihlKT9cInJ0bFwiOlwibHRyXCJ9ZnVuY3Rpb24gTChlKXtyZXR1cm4gRShlLmVudGl0eV9pZCl9dmFyIFA9ZnVuY3Rpb24oZSl7cmV0dXJuISFlLmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudHx8ISFlLmF0dHJpYnV0ZXMuc3RhdGVfY2xhc3N9LFU9ZnVuY3Rpb24oZSl7c3dpdGNoKGUubnVtYmVyX2Zvcm1hdCl7Y2FzZSB0LmNvbW1hX2RlY2ltYWw6cmV0dXJuW1wiZW4tVVNcIixcImVuXCJdO2Nhc2UgdC5kZWNpbWFsX2NvbW1hOnJldHVybltcImRlXCIsXCJlc1wiLFwiaXRcIl07Y2FzZSB0LnNwYWNlX2NvbW1hOnJldHVybltcImZyXCIsXCJzdlwiLFwiY3NcIl07Y2FzZSB0LnN5c3RlbTpyZXR1cm47ZGVmYXVsdDpyZXR1cm4gZS5sYW5ndWFnZX19LEI9ZnVuY3Rpb24oZSx0KXtyZXR1cm4gdm9pZCAwPT09dCYmKHQ9MiksTWF0aC5yb3VuZChlKk1hdGgucG93KDEwLHQpKS9NYXRoLnBvdygxMCx0KX0sSD1mdW5jdGlvbihlLHIsbil7dmFyIGk9cj9VKHIpOnZvaWQgMDtpZihOdW1iZXIuaXNOYU49TnVtYmVyLmlzTmFOfHxmdW5jdGlvbiBlKHQpe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZiB0JiZlKHQpfSwobnVsbD09cj92b2lkIDA6ci5udW1iZXJfZm9ybWF0KSE9PXQubm9uZSYmIU51bWJlci5pc05hTihOdW1iZXIoZSkpJiZJbnRsKXRyeXtyZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KGksVihlLG4pKS5mb3JtYXQoTnVtYmVyKGUpKX1jYXRjaCh0KXtyZXR1cm4gY29uc29sZS5lcnJvcih0KSxuZXcgSW50bC5OdW1iZXJGb3JtYXQodm9pZCAwLFYoZSxuKSkuZm9ybWF0KE51bWJlcihlKSl9cmV0dXJuXCJzdHJpbmdcIj09dHlwZW9mIGU/ZTpCKGUsbnVsbD09bj92b2lkIDA6bi5tYXhpbXVtRnJhY3Rpb25EaWdpdHMpLnRvU3RyaW5nKCkrKFwiY3VycmVuY3lcIj09PShudWxsPT1uP3ZvaWQgMDpuLnN0eWxlKT9cIiBcIituLmN1cnJlbmN5OlwiXCIpfSxWPWZ1bmN0aW9uKGUsdCl7dmFyIHI9Tyh7bWF4aW11bUZyYWN0aW9uRGlnaXRzOjJ9LHQpO2lmKFwic3RyaW5nXCIhPXR5cGVvZiBlKXJldHVybiByO2lmKCF0fHwhdC5taW5pbXVtRnJhY3Rpb25EaWdpdHMmJiF0Lm1heGltdW1GcmFjdGlvbkRpZ2l0cyl7dmFyIG49ZS5pbmRleE9mKFwiLlwiKT4tMT9lLnNwbGl0KFwiLlwiKVsxXS5sZW5ndGg6MDtyLm1pbmltdW1GcmFjdGlvbkRpZ2l0cz1uLHIubWF4aW11bUZyYWN0aW9uRGlnaXRzPW59cmV0dXJuIHJ9LFc9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk9dm9pZCAwIT09bj9uOnQuc3RhdGU7aWYoXCJ1bmtub3duXCI9PT1pfHxcInVuYXZhaWxhYmxlXCI9PT1pKXJldHVybiBlKFwic3RhdGUuZGVmYXVsdC5cIitpKTtpZihQKHQpKXtpZihcIm1vbmV0YXJ5XCI9PT10LmF0dHJpYnV0ZXMuZGV2aWNlX2NsYXNzKXRyeXtyZXR1cm4gSChpLHIse3N0eWxlOlwiY3VycmVuY3lcIixjdXJyZW5jeTp0LmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudH0pfWNhdGNoKGUpe31yZXR1cm4gSChpLHIpKyh0LmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudD9cIiBcIit0LmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudDpcIlwiKX12YXIgbz1MKHQpO2lmKFwiaW5wdXRfZGF0ZXRpbWVcIj09PW8pe3ZhciB1O2lmKHZvaWQgMD09PW4pcmV0dXJuIHQuYXR0cmlidXRlcy5oYXNfZGF0ZSYmdC5hdHRyaWJ1dGVzLmhhc190aW1lPyh1PW5ldyBEYXRlKHQuYXR0cmlidXRlcy55ZWFyLHQuYXR0cmlidXRlcy5tb250aC0xLHQuYXR0cmlidXRlcy5kYXksdC5hdHRyaWJ1dGVzLmhvdXIsdC5hdHRyaWJ1dGVzLm1pbnV0ZSksdih1LHIpKTp0LmF0dHJpYnV0ZXMuaGFzX2RhdGU/KHU9bmV3IERhdGUodC5hdHRyaWJ1dGVzLnllYXIsdC5hdHRyaWJ1dGVzLm1vbnRoLTEsdC5hdHRyaWJ1dGVzLmRheSksYSh1LHIpKTp0LmF0dHJpYnV0ZXMuaGFzX3RpbWU/KCh1PW5ldyBEYXRlKS5zZXRIb3Vycyh0LmF0dHJpYnV0ZXMuaG91cix0LmF0dHJpYnV0ZXMubWludXRlKSxEKHUscikpOnQuc3RhdGU7dHJ5e3ZhciBjPW4uc3BsaXQoXCIgXCIpO2lmKDI9PT1jLmxlbmd0aClyZXR1cm4gdihuZXcgRGF0ZShjLmpvaW4oXCJUXCIpKSxyKTtpZigxPT09Yy5sZW5ndGgpe2lmKG4uaW5jbHVkZXMoXCItXCIpKXJldHVybiBhKG5ldyBEYXRlKG4rXCJUMDA6MDBcIikscik7aWYobi5pbmNsdWRlcyhcIjpcIikpe3ZhciBtPW5ldyBEYXRlO3JldHVybiBEKG5ldyBEYXRlKG0udG9JU09TdHJpbmcoKS5zcGxpdChcIlRcIilbMF0rXCJUXCIrbikscil9fXJldHVybiBufWNhdGNoKGUpe3JldHVybiBufX1yZXR1cm5cImh1bWlkaWZpZXJcIj09PW8mJlwib25cIj09PWkmJnQuYXR0cmlidXRlcy5odW1pZGl0eT90LmF0dHJpYnV0ZXMuaHVtaWRpdHkrXCIgJVwiOlwiY291bnRlclwiPT09b3x8XCJudW1iZXJcIj09PW98fFwiaW5wdXRfbnVtYmVyXCI9PT1vP0goaSxyKTp0LmF0dHJpYnV0ZXMuZGV2aWNlX2NsYXNzJiZlKFwiY29tcG9uZW50LlwiK28rXCIuc3RhdGUuXCIrdC5hdHRyaWJ1dGVzLmRldmljZV9jbGFzcytcIi5cIitpKXx8ZShcImNvbXBvbmVudC5cIitvK1wiLnN0YXRlLl8uXCIraSl8fGl9LEc9XCJtZGk6Ym9va21hcmtcIixKPVwibG92ZWxhY2VcIixLPVtcImNsaW1hdGVcIixcImNvdmVyXCIsXCJjb25maWd1cmF0b3JcIixcImlucHV0X3NlbGVjdFwiLFwiaW5wdXRfbnVtYmVyXCIsXCJpbnB1dF90ZXh0XCIsXCJsb2NrXCIsXCJtZWRpYV9wbGF5ZXJcIixcInNjZW5lXCIsXCJzY3JpcHRcIixcInRpbWVyXCIsXCJ2YWN1dW1cIixcIndhdGVyX2hlYXRlclwiLFwid2VibGlua1wiXSxRPVtcImFsYXJtX2NvbnRyb2xfcGFuZWxcIixcImF1dG9tYXRpb25cIixcImNhbWVyYVwiLFwiY2xpbWF0ZVwiLFwiY29uZmlndXJhdG9yXCIsXCJjb3ZlclwiLFwiZmFuXCIsXCJncm91cFwiLFwiaGlzdG9yeV9ncmFwaFwiLFwiaW5wdXRfZGF0ZXRpbWVcIixcImxpZ2h0XCIsXCJsb2NrXCIsXCJtZWRpYV9wbGF5ZXJcIixcInNjcmlwdFwiLFwic3VuXCIsXCJ1cGRhdGVyXCIsXCJ2YWN1dW1cIixcIndhdGVyX2hlYXRlclwiLFwid2VhdGhlclwiXSxYPVtcImlucHV0X251bWJlclwiLFwiaW5wdXRfc2VsZWN0XCIsXCJpbnB1dF90ZXh0XCIsXCJzY2VuZVwiLFwid2VibGlua1wiXSxZPVtcImNhbWVyYVwiLFwiY29uZmlndXJhdG9yXCIsXCJoaXN0b3J5X2dyYXBoXCIsXCJzY2VuZVwiXSxaPVtcImNsb3NlZFwiLFwibG9ja2VkXCIsXCJvZmZcIl0sJD1uZXcgU2V0KFtcImZhblwiLFwiaW5wdXRfYm9vbGVhblwiLFwibGlnaHRcIixcInN3aXRjaFwiLFwiZ3JvdXBcIixcImF1dG9tYXRpb25cIl0pLGVlPVwiwrBDXCIsdGU9XCLCsEZcIixyZT1cImdyb3VwLmRlZmF1bHRfdmlld1wiLG5lPWZ1bmN0aW9uKGUsdCxyLG4pe249bnx8e30scj1udWxsPT1yP3t9OnI7dmFyIGk9bmV3IEV2ZW50KHQse2J1YmJsZXM6dm9pZCAwPT09bi5idWJibGVzfHxuLmJ1YmJsZXMsY2FuY2VsYWJsZTpCb29sZWFuKG4uY2FuY2VsYWJsZSksY29tcG9zZWQ6dm9pZCAwPT09bi5jb21wb3NlZHx8bi5jb21wb3NlZH0pO3JldHVybiBpLmRldGFpbD1yLGUuZGlzcGF0Y2hFdmVudChpKSxpfSxpZT1uZXcgU2V0KFtcImNhbGwtc2VydmljZVwiLFwiZGl2aWRlclwiLFwic2VjdGlvblwiLFwid2VibGlua1wiLFwiY2FzdFwiLFwic2VsZWN0XCJdKSxhZT17YWxlcnQ6XCJ0b2dnbGVcIixhdXRvbWF0aW9uOlwidG9nZ2xlXCIsY2xpbWF0ZTpcImNsaW1hdGVcIixjb3ZlcjpcImNvdmVyXCIsZmFuOlwidG9nZ2xlXCIsZ3JvdXA6XCJncm91cFwiLGlucHV0X2Jvb2xlYW46XCJ0b2dnbGVcIixpbnB1dF9udW1iZXI6XCJpbnB1dC1udW1iZXJcIixpbnB1dF9zZWxlY3Q6XCJpbnB1dC1zZWxlY3RcIixpbnB1dF90ZXh0OlwiaW5wdXQtdGV4dFwiLGxpZ2h0OlwidG9nZ2xlXCIsbG9jazpcImxvY2tcIixtZWRpYV9wbGF5ZXI6XCJtZWRpYS1wbGF5ZXJcIixyZW1vdGU6XCJ0b2dnbGVcIixzY2VuZTpcInNjZW5lXCIsc2NyaXB0Olwic2NyaXB0XCIsc2Vuc29yOlwic2Vuc29yXCIsdGltZXI6XCJ0aW1lclwiLHN3aXRjaDpcInRvZ2dsZVwiLHZhY3V1bTpcInRvZ2dsZVwiLHdhdGVyX2hlYXRlcjpcImNsaW1hdGVcIixpbnB1dF9kYXRldGltZTpcImlucHV0LWRhdGV0aW1lXCJ9LG9lPWZ1bmN0aW9uKGUsdCl7dm9pZCAwPT09dCYmKHQ9ITEpO3ZhciByPWZ1bmN0aW9uKGUsdCl7cmV0dXJuIG4oXCJodWktZXJyb3ItY2FyZFwiLHt0eXBlOlwiZXJyb3JcIixlcnJvcjplLGNvbmZpZzp0fSl9LG49ZnVuY3Rpb24oZSx0KXt2YXIgbj13aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudChlKTt0cnl7aWYoIW4uc2V0Q29uZmlnKXJldHVybjtuLnNldENvbmZpZyh0KX1jYXRjaChuKXtyZXR1cm4gY29uc29sZS5lcnJvcihlLG4pLHIobi5tZXNzYWdlLHQpfXJldHVybiBufTtpZighZXx8XCJvYmplY3RcIiE9dHlwZW9mIGV8fCF0JiYhZS50eXBlKXJldHVybiByKFwiTm8gdHlwZSBkZWZpbmVkXCIsZSk7dmFyIGk9ZS50eXBlO2lmKGkmJmkuc3RhcnRzV2l0aChcImN1c3RvbTpcIikpaT1pLnN1YnN0cihcImN1c3RvbTpcIi5sZW5ndGgpO2Vsc2UgaWYodClpZihpZS5oYXMoaSkpaT1cImh1aS1cIitpK1wiLXJvd1wiO2Vsc2V7aWYoIWUuZW50aXR5KXJldHVybiByKFwiSW52YWxpZCBjb25maWcgZ2l2ZW4uXCIsZSk7dmFyIGE9ZS5lbnRpdHkuc3BsaXQoXCIuXCIsMSlbMF07aT1cImh1aS1cIisoYWVbYV18fFwidGV4dFwiKStcIi1lbnRpdHktcm93XCJ9ZWxzZSBpPVwiaHVpLVwiK2krXCItY2FyZFwiO2lmKGN1c3RvbUVsZW1lbnRzLmdldChpKSlyZXR1cm4gbihpLGUpO3ZhciBvPXIoXCJDdXN0b20gZWxlbWVudCBkb2Vzbid0IGV4aXN0OiBcIitlLnR5cGUrXCIuXCIsZSk7by5zdHlsZS5kaXNwbGF5PVwiTm9uZVwiO3ZhciB1PXNldFRpbWVvdXQoZnVuY3Rpb24oKXtvLnN0eWxlLmRpc3BsYXk9XCJcIn0sMmUzKTtyZXR1cm4gY3VzdG9tRWxlbWVudHMud2hlbkRlZmluZWQoZS50eXBlKS50aGVuKGZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHUpLG5lKG8sXCJsbC1yZWJ1aWxkXCIse30sbyl9KSxvfSx1ZT1mdW5jdGlvbihlLHQscil7dmFyIG47cmV0dXJuIHZvaWQgMD09PXImJihyPSExKSxmdW5jdGlvbigpe3ZhciBpPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzKSxhPXRoaXMsbz1mdW5jdGlvbigpe249bnVsbCxyfHxlLmFwcGx5KGEsaSl9LHU9ciYmIW47Y2xlYXJUaW1lb3V0KG4pLG49c2V0VGltZW91dChvLHQpLHUmJmUuYXBwbHkoYSxpKX19LGNlPXthbGVydDpcIm1kaTphbGVydFwiLGF1dG9tYXRpb246XCJtZGk6cGxheWxpc3QtcGxheVwiLGNhbGVuZGFyOlwibWRpOmNhbGVuZGFyXCIsY2FtZXJhOlwibWRpOnZpZGVvXCIsY2xpbWF0ZTpcIm1kaTp0aGVybW9zdGF0XCIsY29uZmlndXJhdG9yOlwibWRpOnNldHRpbmdzXCIsY29udmVyc2F0aW9uOlwibWRpOnRleHQtdG8tc3BlZWNoXCIsZGV2aWNlX3RyYWNrZXI6XCJtZGk6YWNjb3VudFwiLGZhbjpcIm1kaTpmYW5cIixncm91cDpcIm1kaTpnb29nbGUtY2lyY2xlcy1jb21tdW5pdGllc1wiLGhpc3RvcnlfZ3JhcGg6XCJtZGk6Y2hhcnQtbGluZVwiLGhvbWVhc3Npc3RhbnQ6XCJtZGk6aG9tZS1hc3Npc3RhbnRcIixob21la2l0OlwibWRpOmhvbWUtYXV0b21hdGlvblwiLGltYWdlX3Byb2Nlc3Npbmc6XCJtZGk6aW1hZ2UtZmlsdGVyLWZyYW1lc1wiLGlucHV0X2Jvb2xlYW46XCJtZGk6ZHJhd2luZ1wiLGlucHV0X2RhdGV0aW1lOlwibWRpOmNhbGVuZGFyLWNsb2NrXCIsaW5wdXRfbnVtYmVyOlwibWRpOnJheS12ZXJ0ZXhcIixpbnB1dF9zZWxlY3Q6XCJtZGk6Zm9ybWF0LWxpc3QtYnVsbGV0ZWRcIixpbnB1dF90ZXh0OlwibWRpOnRleHRib3hcIixsaWdodDpcIm1kaTpsaWdodGJ1bGJcIixtYWlsYm94OlwibWRpOm1haWxib3hcIixub3RpZnk6XCJtZGk6Y29tbWVudC1hbGVydFwiLHBlcnNvbjpcIm1kaTphY2NvdW50XCIscGxhbnQ6XCJtZGk6Zmxvd2VyXCIscHJveGltaXR5OlwibWRpOmFwcGxlLXNhZmFyaVwiLHJlbW90ZTpcIm1kaTpyZW1vdGVcIixzY2VuZTpcIm1kaTpnb29nbGUtcGFnZXNcIixzY3JpcHQ6XCJtZGk6ZmlsZS1kb2N1bWVudFwiLHNlbnNvcjpcIm1kaTpleWVcIixzaW1wbGVfYWxhcm06XCJtZGk6YmVsbFwiLHN1bjpcIm1kaTp3aGl0ZS1iYWxhbmNlLXN1bm55XCIsc3dpdGNoOlwibWRpOmZsYXNoXCIsdGltZXI6XCJtZGk6dGltZXJcIix1cGRhdGVyOlwibWRpOmNsb3VkLXVwbG9hZFwiLHZhY3V1bTpcIm1kaTpyb2JvdC12YWN1dW1cIix3YXRlcl9oZWF0ZXI6XCJtZGk6dGhlcm1vbWV0ZXJcIix3ZWJsaW5rOlwibWRpOm9wZW4taW4tbmV3XCJ9O2Z1bmN0aW9uIG1lKGUsdCl7aWYoZSBpbiBjZSlyZXR1cm4gY2VbZV07c3dpdGNoKGUpe2Nhc2VcImFsYXJtX2NvbnRyb2xfcGFuZWxcIjpzd2l0Y2godCl7Y2FzZVwiYXJtZWRfaG9tZVwiOnJldHVyblwibWRpOmJlbGwtcGx1c1wiO2Nhc2VcImFybWVkX25pZ2h0XCI6cmV0dXJuXCJtZGk6YmVsbC1zbGVlcFwiO2Nhc2VcImRpc2FybWVkXCI6cmV0dXJuXCJtZGk6YmVsbC1vdXRsaW5lXCI7Y2FzZVwidHJpZ2dlcmVkXCI6cmV0dXJuXCJtZGk6YmVsbC1yaW5nXCI7ZGVmYXVsdDpyZXR1cm5cIm1kaTpiZWxsXCJ9Y2FzZVwiYmluYXJ5X3NlbnNvclwiOnJldHVybiB0JiZcIm9mZlwiPT09dD9cIm1kaTpyYWRpb2JveC1ibGFua1wiOlwibWRpOmNoZWNrYm94LW1hcmtlZC1jaXJjbGVcIjtjYXNlXCJjb3ZlclwiOnJldHVyblwiY2xvc2VkXCI9PT10P1wibWRpOndpbmRvdy1jbG9zZWRcIjpcIm1kaTp3aW5kb3ctb3BlblwiO2Nhc2VcImxvY2tcIjpyZXR1cm4gdCYmXCJ1bmxvY2tlZFwiPT09dD9cIm1kaTpsb2NrLW9wZW5cIjpcIm1kaTpsb2NrXCI7Y2FzZVwibWVkaWFfcGxheWVyXCI6cmV0dXJuIHQmJlwib2ZmXCIhPT10JiZcImlkbGVcIiE9PXQ/XCJtZGk6Y2FzdC1jb25uZWN0ZWRcIjpcIm1kaTpjYXN0XCI7Y2FzZVwiendhdmVcIjpzd2l0Y2godCl7Y2FzZVwiZGVhZFwiOnJldHVyblwibWRpOmVtb3RpY29uLWRlYWRcIjtjYXNlXCJzbGVlcGluZ1wiOnJldHVyblwibWRpOnNsZWVwXCI7Y2FzZVwiaW5pdGlhbGl6aW5nXCI6cmV0dXJuXCJtZGk6dGltZXItc2FuZFwiO2RlZmF1bHQ6cmV0dXJuXCJtZGk6ei13YXZlXCJ9ZGVmYXVsdDpyZXR1cm4gY29uc29sZS53YXJuKFwiVW5hYmxlIHRvIGZpbmQgaWNvbiBmb3IgZG9tYWluIFwiK2UrXCIgKFwiK3QrXCIpXCIpLFwibWRpOmJvb2ttYXJrXCJ9fXZhciBzZT1mdW5jdGlvbihlLHQpe3ZhciByPXQudmFsdWV8fHQsbj10LmF0dHJpYnV0ZT9lLmF0dHJpYnV0ZXNbdC5hdHRyaWJ1dGVdOmUuc3RhdGU7c3dpdGNoKHQub3BlcmF0b3J8fFwiPT1cIil7Y2FzZVwiPT1cIjpyZXR1cm4gbj09PXI7Y2FzZVwiPD1cIjpyZXR1cm4gbjw9cjtjYXNlXCI8XCI6cmV0dXJuIG48cjtjYXNlXCI+PVwiOnJldHVybiBuPj1yO2Nhc2VcIj5cIjpyZXR1cm4gbj5yO2Nhc2VcIiE9XCI6cmV0dXJuIG4hPT1yO2Nhc2VcInJlZ2V4XCI6cmV0dXJuIG4ubWF0Y2gocik7ZGVmYXVsdDpyZXR1cm4hMX19LGxlPWZ1bmN0aW9uKGUpe25lKHdpbmRvdyxcImhhcHRpY1wiLGUpfSxkZT1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9ITEpLHI/aGlzdG9yeS5yZXBsYWNlU3RhdGUobnVsbCxcIlwiLHQpOmhpc3RvcnkucHVzaFN0YXRlKG51bGwsXCJcIix0KSxuZSh3aW5kb3csXCJsb2NhdGlvbi1jaGFuZ2VkXCIse3JlcGxhY2U6cn0pfSxmZT1mdW5jdGlvbihlLHQscil7dm9pZCAwPT09ciYmKHI9ITApO3ZhciBuLGk9RSh0KSxhPVwiZ3JvdXBcIj09PWk/XCJob21lYXNzaXN0YW50XCI6aTtzd2l0Y2goaSl7Y2FzZVwibG9ja1wiOm49cj9cInVubG9ja1wiOlwibG9ja1wiO2JyZWFrO2Nhc2VcImNvdmVyXCI6bj1yP1wib3Blbl9jb3ZlclwiOlwiY2xvc2VfY292ZXJcIjticmVhaztkZWZhdWx0Om49cj9cInR1cm5fb25cIjpcInR1cm5fb2ZmXCJ9cmV0dXJuIGUuY2FsbFNlcnZpY2UoYSxuLHtlbnRpdHlfaWQ6dH0pfSxnZT1mdW5jdGlvbihlLHQpe3ZhciByPVouaW5jbHVkZXMoZS5zdGF0ZXNbdF0uc3RhdGUpO3JldHVybiBmZShlLHQscil9LHBlPWZ1bmN0aW9uKGUsdCxyLG4pe2lmKG58fChuPXthY3Rpb246XCJtb3JlLWluZm9cIn0pLCFuLmNvbmZpcm1hdGlvbnx8bi5jb25maXJtYXRpb24uZXhlbXB0aW9ucyYmbi5jb25maXJtYXRpb24uZXhlbXB0aW9ucy5zb21lKGZ1bmN0aW9uKGUpe3JldHVybiBlLnVzZXI9PT10LnVzZXIuaWR9KXx8KGxlKFwid2FybmluZ1wiKSxjb25maXJtKG4uY29uZmlybWF0aW9uLnRleHR8fFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIFwiK24uYWN0aW9uK1wiP1wiKSkpc3dpdGNoKG4uYWN0aW9uKXtjYXNlXCJtb3JlLWluZm9cIjooci5lbnRpdHl8fHIuY2FtZXJhX2ltYWdlKSYmbmUoZSxcImhhc3MtbW9yZS1pbmZvXCIse2VudGl0eUlkOnIuZW50aXR5P3IuZW50aXR5OnIuY2FtZXJhX2ltYWdlfSk7YnJlYWs7Y2FzZVwibmF2aWdhdGVcIjpuLm5hdmlnYXRpb25fcGF0aCYmZGUoMCxuLm5hdmlnYXRpb25fcGF0aCk7YnJlYWs7Y2FzZVwidXJsXCI6bi51cmxfcGF0aCYmd2luZG93Lm9wZW4obi51cmxfcGF0aCk7YnJlYWs7Y2FzZVwidG9nZ2xlXCI6ci5lbnRpdHkmJihnZSh0LHIuZW50aXR5KSxsZShcInN1Y2Nlc3NcIikpO2JyZWFrO2Nhc2VcImNhbGwtc2VydmljZVwiOmlmKCFuLnNlcnZpY2UpcmV0dXJuIHZvaWQgbGUoXCJmYWlsdXJlXCIpO3ZhciBpPW4uc2VydmljZS5zcGxpdChcIi5cIiwyKTt0LmNhbGxTZXJ2aWNlKGlbMF0saVsxXSxuLnNlcnZpY2VfZGF0YSxuLnRhcmdldCksbGUoXCJzdWNjZXNzXCIpO2JyZWFrO2Nhc2VcImZpcmUtZG9tLWV2ZW50XCI6bmUoZSxcImxsLWN1c3RvbVwiLG4pfX0saGU9ZnVuY3Rpb24oZSx0LHIsbil7dmFyIGk7XCJkb3VibGVfdGFwXCI9PT1uJiZyLmRvdWJsZV90YXBfYWN0aW9uP2k9ci5kb3VibGVfdGFwX2FjdGlvbjpcImhvbGRcIj09PW4mJnIuaG9sZF9hY3Rpb24/aT1yLmhvbGRfYWN0aW9uOlwidGFwXCI9PT1uJiZyLnRhcF9hY3Rpb24mJihpPXIudGFwX2FjdGlvbikscGUoZSx0LHIsaSl9LGJlPWZ1bmN0aW9uKGUsdCxyLG4saSl7dmFyIGE7aWYoaSYmci5kb3VibGVfdGFwX2FjdGlvbj9hPXIuZG91YmxlX3RhcF9hY3Rpb246biYmci5ob2xkX2FjdGlvbj9hPXIuaG9sZF9hY3Rpb246IW4mJnIudGFwX2FjdGlvbiYmKGE9ci50YXBfYWN0aW9uKSxhfHwoYT17YWN0aW9uOlwibW9yZS1pbmZvXCJ9KSwhYS5jb25maXJtYXRpb258fGEuY29uZmlybWF0aW9uLmV4ZW1wdGlvbnMmJmEuY29uZmlybWF0aW9uLmV4ZW1wdGlvbnMuc29tZShmdW5jdGlvbihlKXtyZXR1cm4gZS51c2VyPT09dC51c2VyLmlkfSl8fGNvbmZpcm0oYS5jb25maXJtYXRpb24udGV4dHx8XCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gXCIrYS5hY3Rpb24rXCI/XCIpKXN3aXRjaChhLmFjdGlvbil7Y2FzZVwibW9yZS1pbmZvXCI6KGEuZW50aXR5fHxyLmVudGl0eXx8ci5jYW1lcmFfaW1hZ2UpJiYobmUoZSxcImhhc3MtbW9yZS1pbmZvXCIse2VudGl0eUlkOmEuZW50aXR5P2EuZW50aXR5OnIuZW50aXR5P3IuZW50aXR5OnIuY2FtZXJhX2ltYWdlfSksYS5oYXB0aWMmJmxlKGEuaGFwdGljKSk7YnJlYWs7Y2FzZVwibmF2aWdhdGVcIjphLm5hdmlnYXRpb25fcGF0aCYmKGRlKDAsYS5uYXZpZ2F0aW9uX3BhdGgpLGEuaGFwdGljJiZsZShhLmhhcHRpYykpO2JyZWFrO2Nhc2VcInVybFwiOmEudXJsX3BhdGgmJndpbmRvdy5vcGVuKGEudXJsX3BhdGgpLGEuaGFwdGljJiZsZShhLmhhcHRpYyk7YnJlYWs7Y2FzZVwidG9nZ2xlXCI6ci5lbnRpdHkmJihnZSh0LHIuZW50aXR5KSxhLmhhcHRpYyYmbGUoYS5oYXB0aWMpKTticmVhaztjYXNlXCJjYWxsLXNlcnZpY2VcIjppZighYS5zZXJ2aWNlKXJldHVybjt2YXIgbz1hLnNlcnZpY2Uuc3BsaXQoXCIuXCIsMiksdT1vWzBdLGM9b1sxXSxtPU8oe30sYS5zZXJ2aWNlX2RhdGEpO1wiZW50aXR5XCI9PT1tLmVudGl0eV9pZCYmKG0uZW50aXR5X2lkPXIuZW50aXR5KSx0LmNhbGxTZXJ2aWNlKHUsYyxtLGEudGFyZ2V0KSxhLmhhcHRpYyYmbGUoYS5oYXB0aWMpO2JyZWFrO2Nhc2VcImZpcmUtZG9tLWV2ZW50XCI6bmUoZSxcImxsLWN1c3RvbVwiLGEpLGEuaGFwdGljJiZsZShhLmhhcHRpYyl9fTtmdW5jdGlvbiB2ZShlKXtyZXR1cm4gdm9pZCAwIT09ZSYmXCJub25lXCIhPT1lLmFjdGlvbn1mdW5jdGlvbiBfZShlLHQscil7aWYodC5oYXMoXCJjb25maWdcIil8fHIpcmV0dXJuITA7aWYoZS5jb25maWcuZW50aXR5KXt2YXIgbj10LmdldChcImhhc3NcIik7cmV0dXJuIW58fG4uc3RhdGVzW2UuY29uZmlnLmVudGl0eV0hPT1lLmhhc3Muc3RhdGVzW2UuY29uZmlnLmVudGl0eV19cmV0dXJuITF9ZnVuY3Rpb24geWUoZSl7cmV0dXJuIHZvaWQgMCE9PWUmJlwibm9uZVwiIT09ZS5hY3Rpb259dmFyIHdlPWZ1bmN0aW9uKGUsdCxyKXt2b2lkIDA9PT1yJiYocj0hMCk7dmFyIG49e307dC5mb3JFYWNoKGZ1bmN0aW9uKHQpe2lmKFouaW5jbHVkZXMoZS5zdGF0ZXNbdF0uc3RhdGUpPT09cil7dmFyIGk9RSh0KSxhPVtcImNvdmVyXCIsXCJsb2NrXCJdLmluY2x1ZGVzKGkpP2k6XCJob21lYXNzaXN0YW50XCI7YSBpbiBufHwoblthXT1bXSksblthXS5wdXNoKHQpfX0pLE9iamVjdC5rZXlzKG4pLmZvckVhY2goZnVuY3Rpb24odCl7dmFyIGk7c3dpdGNoKHQpe2Nhc2VcImxvY2tcIjppPXI/XCJ1bmxvY2tcIjpcImxvY2tcIjticmVhaztjYXNlXCJjb3ZlclwiOmk9cj9cIm9wZW5fY292ZXJcIjpcImNsb3NlX2NvdmVyXCI7YnJlYWs7ZGVmYXVsdDppPXI/XCJ0dXJuX29uXCI6XCJ0dXJuX29mZlwifWUuY2FsbFNlcnZpY2UodCxpLHtlbnRpdHlfaWQ6blt0XX0pfSl9LGtlPWZ1bmN0aW9uKCl7dmFyIGU9ZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImhvbWUtYXNzaXN0YW50XCIpO2lmKGU9KGU9KGU9KGU9KGU9KGU9KGU9KGU9ZSYmZS5zaGFkb3dSb290KSYmZS5xdWVyeVNlbGVjdG9yKFwiaG9tZS1hc3Npc3RhbnQtbWFpblwiKSkmJmUuc2hhZG93Um9vdCkmJmUucXVlcnlTZWxlY3RvcihcImFwcC1kcmF3ZXItbGF5b3V0IHBhcnRpYWwtcGFuZWwtcmVzb2x2ZXJcIikpJiZlLnNoYWRvd1Jvb3R8fGUpJiZlLnF1ZXJ5U2VsZWN0b3IoXCJoYS1wYW5lbC1sb3ZlbGFjZVwiKSkmJmUuc2hhZG93Um9vdCkmJmUucXVlcnlTZWxlY3RvcihcImh1aS1yb290XCIpKXt2YXIgdD1lLmxvdmVsYWNlO3JldHVybiB0LmN1cnJlbnRfdmlldz1lLl9fX2N1clZpZXcsdH1yZXR1cm4gbnVsbH0seGU9e2h1bWlkaXR5OlwibWRpOndhdGVyLXBlcmNlbnRcIixpbGx1bWluYW5jZTpcIm1kaTpicmlnaHRuZXNzLTVcIix0ZW1wZXJhdHVyZTpcIm1kaTp0aGVybW9tZXRlclwiLHByZXNzdXJlOlwibWRpOmdhdWdlXCIscG93ZXI6XCJtZGk6Zmxhc2hcIixzaWduYWxfc3RyZW5ndGg6XCJtZGk6d2lmaVwifSxEZT17YmluYXJ5X3NlbnNvcjpmdW5jdGlvbihlLHQpe3ZhciByPVwib2ZmXCI9PT1lO3N3aXRjaChudWxsPT10P3ZvaWQgMDp0LmF0dHJpYnV0ZXMuZGV2aWNlX2NsYXNzKXtjYXNlXCJiYXR0ZXJ5XCI6cmV0dXJuIHI/XCJtZGk6YmF0dGVyeVwiOlwibWRpOmJhdHRlcnktb3V0bGluZVwiO2Nhc2VcImJhdHRlcnlfY2hhcmdpbmdcIjpyZXR1cm4gcj9cIm1kaTpiYXR0ZXJ5XCI6XCJtZGk6YmF0dGVyeS1jaGFyZ2luZ1wiO2Nhc2VcImNvbGRcIjpyZXR1cm4gcj9cIm1kaTp0aGVybW9tZXRlclwiOlwibWRpOnNub3dmbGFrZVwiO2Nhc2VcImNvbm5lY3Rpdml0eVwiOnJldHVybiByP1wibWRpOnNlcnZlci1uZXR3b3JrLW9mZlwiOlwibWRpOnNlcnZlci1uZXR3b3JrXCI7Y2FzZVwiZG9vclwiOnJldHVybiByP1wibWRpOmRvb3ItY2xvc2VkXCI6XCJtZGk6ZG9vci1vcGVuXCI7Y2FzZVwiZ2FyYWdlX2Rvb3JcIjpyZXR1cm4gcj9cIm1kaTpnYXJhZ2VcIjpcIm1kaTpnYXJhZ2Utb3BlblwiO2Nhc2VcInBvd2VyXCI6cmV0dXJuIHI/XCJtZGk6cG93ZXItcGx1Zy1vZmZcIjpcIm1kaTpwb3dlci1wbHVnXCI7Y2FzZVwiZ2FzXCI6Y2FzZVwicHJvYmxlbVwiOmNhc2VcInNhZmV0eVwiOmNhc2VcInRhbXBlclwiOnJldHVybiByP1wibWRpOmNoZWNrLWNpcmNsZVwiOlwibWRpOmFsZXJ0LWNpcmNsZVwiO2Nhc2VcInNtb2tlXCI6cmV0dXJuIHI/XCJtZGk6Y2hlY2stY2lyY2xlXCI6XCJtZGk6c21va2VcIjtjYXNlXCJoZWF0XCI6cmV0dXJuIHI/XCJtZGk6dGhlcm1vbWV0ZXJcIjpcIm1kaTpmaXJlXCI7Y2FzZVwibGlnaHRcIjpyZXR1cm4gcj9cIm1kaTpicmlnaHRuZXNzLTVcIjpcIm1kaTpicmlnaHRuZXNzLTdcIjtjYXNlXCJsb2NrXCI6cmV0dXJuIHI/XCJtZGk6bG9ja1wiOlwibWRpOmxvY2stb3BlblwiO2Nhc2VcIm1vaXN0dXJlXCI6cmV0dXJuIHI/XCJtZGk6d2F0ZXItb2ZmXCI6XCJtZGk6d2F0ZXJcIjtjYXNlXCJtb3Rpb25cIjpyZXR1cm4gcj9cIm1kaTp3YWxrXCI6XCJtZGk6cnVuXCI7Y2FzZVwib2NjdXBhbmN5XCI6cmV0dXJuIHI/XCJtZGk6aG9tZS1vdXRsaW5lXCI6XCJtZGk6aG9tZVwiO2Nhc2VcIm9wZW5pbmdcIjpyZXR1cm4gcj9cIm1kaTpzcXVhcmVcIjpcIm1kaTpzcXVhcmUtb3V0bGluZVwiO2Nhc2VcInBsdWdcIjpyZXR1cm4gcj9cIm1kaTpwb3dlci1wbHVnLW9mZlwiOlwibWRpOnBvd2VyLXBsdWdcIjtjYXNlXCJwcmVzZW5jZVwiOnJldHVybiByP1wibWRpOmhvbWUtb3V0bGluZVwiOlwibWRpOmhvbWVcIjtjYXNlXCJydW5uaW5nXCI6cmV0dXJuIHI/XCJtZGk6c3RvcFwiOlwibWRpOnBsYXlcIjtjYXNlXCJzb3VuZFwiOnJldHVybiByP1wibWRpOm11c2ljLW5vdGUtb2ZmXCI6XCJtZGk6bXVzaWMtbm90ZVwiO2Nhc2VcInVwZGF0ZVwiOnJldHVybiByP1wibWRpOnBhY2thZ2VcIjpcIm1kaTpwYWNrYWdlLXVwXCI7Y2FzZVwidmlicmF0aW9uXCI6cmV0dXJuIHI/XCJtZGk6Y3JvcC1wb3J0cmFpdFwiOlwibWRpOnZpYnJhdGVcIjtjYXNlXCJ3aW5kb3dcIjpyZXR1cm4gcj9cIm1kaTp3aW5kb3ctY2xvc2VkXCI6XCJtZGk6d2luZG93LW9wZW5cIjtkZWZhdWx0OnJldHVybiByP1wibWRpOnJhZGlvYm94LWJsYW5rXCI6XCJtZGk6Y2hlY2tib3gtbWFya2VkLWNpcmNsZVwifX0sY292ZXI6ZnVuY3Rpb24oZSl7dmFyIHQ9XCJjbG9zZWRcIiE9PWUuc3RhdGU7c3dpdGNoKGUuYXR0cmlidXRlcy5kZXZpY2VfY2xhc3Mpe2Nhc2VcImdhcmFnZVwiOnJldHVybiB0P1wibWRpOmdhcmFnZS1vcGVuXCI6XCJtZGk6Z2FyYWdlXCI7Y2FzZVwiZG9vclwiOnJldHVybiB0P1wibWRpOmRvb3Itb3BlblwiOlwibWRpOmRvb3ItY2xvc2VkXCI7Y2FzZVwic2h1dHRlclwiOnJldHVybiB0P1wibWRpOndpbmRvdy1zaHV0dGVyLW9wZW5cIjpcIm1kaTp3aW5kb3ctc2h1dHRlclwiO2Nhc2VcImJsaW5kXCI6cmV0dXJuIHQ/XCJtZGk6YmxpbmRzLW9wZW5cIjpcIm1kaTpibGluZHNcIjtjYXNlXCJ3aW5kb3dcIjpyZXR1cm4gdD9cIm1kaTp3aW5kb3ctb3BlblwiOlwibWRpOndpbmRvdy1jbG9zZWRcIjtkZWZhdWx0OnJldHVybiBtZShcImNvdmVyXCIsZS5zdGF0ZSl9fSxzZW5zb3I6ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5hdHRyaWJ1dGVzLmRldmljZV9jbGFzcztpZih0JiZ0IGluIHhlKXJldHVybiB4ZVt0XTtpZihcImJhdHRlcnlcIj09PXQpe3ZhciByPU51bWJlcihlLnN0YXRlKTtpZihpc05hTihyKSlyZXR1cm5cIm1kaTpiYXR0ZXJ5LXVua25vd25cIjt2YXIgbj0xMCpNYXRoLnJvdW5kKHIvMTApO3JldHVybiBuPj0xMDA/XCJtZGk6YmF0dGVyeVwiOm48PTA/XCJtZGk6YmF0dGVyeS1hbGVydFwiOlwiaGFzczpiYXR0ZXJ5LVwiK259dmFyIGk9ZS5hdHRyaWJ1dGVzLnVuaXRfb2ZfbWVhc3VyZW1lbnQ7cmV0dXJuXCLCsENcIj09PWl8fFwiwrBGXCI9PT1pP1wibWRpOnRoZXJtb21ldGVyXCI6bWUoXCJzZW5zb3JcIil9LGlucHV0X2RhdGV0aW1lOmZ1bmN0aW9uKGUpe3JldHVybiBlLmF0dHJpYnV0ZXMuaGFzX2RhdGU/ZS5hdHRyaWJ1dGVzLmhhc190aW1lP21lKFwiaW5wdXRfZGF0ZXRpbWVcIik6XCJtZGk6Y2FsZW5kYXJcIjpcIm1kaTpjbG9ja1wifX0sU2U9ZnVuY3Rpb24oZSl7aWYoIWUpcmV0dXJuXCJtZGk6Ym9va21hcmtcIjtpZihlLmF0dHJpYnV0ZXMuaWNvbilyZXR1cm4gZS5hdHRyaWJ1dGVzLmljb247dmFyIHQ9RShlLmVudGl0eV9pZCk7cmV0dXJuIHQgaW4gRGU/RGVbdF0oZSk6bWUodCxlLnN0YXRlKX07ZXhwb3J0e0cgYXMgREVGQVVMVF9ET01BSU5fSUNPTixKIGFzIERFRkFVTFRfUEFORUwscmUgYXMgREVGQVVMVF9WSUVXX0VOVElUWV9JRCxYIGFzIERPTUFJTlNfSElERV9NT1JFX0lORk8sWSBhcyBET01BSU5TX01PUkVfSU5GT19OT19ISVNUT1JZLCQgYXMgRE9NQUlOU19UT0dHTEUsSyBhcyBET01BSU5TX1dJVEhfQ0FSRCxRIGFzIERPTUFJTlNfV0lUSF9NT1JFX0lORk8sdCBhcyBOdW1iZXJGb3JtYXQsWiBhcyBTVEFURVNfT0ZGLHIgYXMgVGltZUZvcm1hdCxlZSBhcyBVTklUX0MsdGUgYXMgVU5JVF9GLHEgYXMgYXBwbHlUaGVtZXNPbkVsZW1lbnQsQSBhcyBjb21wdXRlQ2FyZFNpemUsRSBhcyBjb21wdXRlRG9tYWluLGogYXMgY29tcHV0ZUVudGl0eSxSIGFzIGNvbXB1dGVSVEwseiBhcyBjb21wdXRlUlRMRGlyZWN0aW9uLFcgYXMgY29tcHV0ZVN0YXRlRGlzcGxheSxMIGFzIGNvbXB1dGVTdGF0ZURvbWFpbixvZSBhcyBjcmVhdGVUaGluZyx1ZSBhcyBkZWJvdW5jZSxtZSBhcyBkb21haW5JY29uLHNlIGFzIGV2YWx1YXRlRmlsdGVyLG5lIGFzIGZpcmVFdmVudCxjZSBhcyBmaXhlZEljb25zLGEgYXMgZm9ybWF0RGF0ZSxmIGFzIGZvcm1hdERhdGVNb250aCxsIGFzIGZvcm1hdERhdGVNb250aFllYXIsdSBhcyBmb3JtYXREYXRlTnVtZXJpYyxtIGFzIGZvcm1hdERhdGVTaG9ydCx2IGFzIGZvcm1hdERhdGVUaW1lLGsgYXMgZm9ybWF0RGF0ZVRpbWVOdW1lcmljLHkgYXMgZm9ybWF0RGF0ZVRpbWVXaXRoU2Vjb25kcyxuIGFzIGZvcm1hdERhdGVXZWVrZGF5LHAgYXMgZm9ybWF0RGF0ZVllYXIsSCBhcyBmb3JtYXROdW1iZXIsRCBhcyBmb3JtYXRUaW1lLEkgYXMgZm9ybWF0VGltZVdlZWtkYXksRiBhcyBmb3JtYXRUaW1lV2l0aFNlY29uZHMsbGUgYXMgZm9yd2FyZEhhcHRpYyxrZSBhcyBnZXRMb3ZlbGFjZSxoZSBhcyBoYW5kbGVBY3Rpb24scGUgYXMgaGFuZGxlQWN0aW9uQ29uZmlnLGJlIGFzIGhhbmRsZUNsaWNrLHZlIGFzIGhhc0FjdGlvbixfZSBhcyBoYXNDb25maWdPckVudGl0eUNoYW5nZWQseWUgYXMgaGFzRG91YmxlQ2xpY2ssUCBhcyBpc051bWVyaWNTdGF0ZSxkZSBhcyBuYXZpZ2F0ZSxVIGFzIG51bWJlckZvcm1hdFRvTG9jYWxlLE0gYXMgcmVsYXRpdmVUaW1lLEIgYXMgcm91bmQsU2UgYXMgc3RhdGVJY29uLEMgYXMgdGltZXJUaW1lUmVtYWluaW5nLGdlIGFzIHRvZ2dsZUVudGl0eSx3ZSBhcyB0dXJuT25PZmZFbnRpdGllcyxmZSBhcyB0dXJuT25PZmZFbnRpdHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXgubS5qcy5tYXBcbiIsIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlICovXG5pbXBvcnQgeyBub0NoYW5nZSB9IGZyb20gJ2xpdCc7XG5pbXBvcnQgeyBBdHRyaWJ1dGVQYXJ0LCBkaXJlY3RpdmUsIERpcmVjdGl2ZSwgRGlyZWN0aXZlUGFyYW1ldGVycyB9IGZyb20gJ2xpdC9kaXJlY3RpdmUuanMnO1xuaW1wb3J0IHsgQWN0aW9uSGFuZGxlckRldGFpbCwgQWN0aW9uSGFuZGxlck9wdGlvbnMgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzL2Rpc3QvdHlwZXMnO1xuaW1wb3J0IHsgZmlyZUV2ZW50IH0gZnJvbSAnY3VzdG9tLWNhcmQtaGVscGVycyc7XG5pbXBvcnQgeyBBY3Rpb25IYW5kbGVyRWxlbWVudCB9IGZyb20gJy4uL3R5cGVzL3Jvb20tY2FyZC10eXBlcyc7XG5cbmNvbnN0IGlzVG91Y2ggPSAnb250b3VjaHN0YXJ0JyBpbiB3aW5kb3cgfHwgbmF2aWdhdG9yLm1heFRvdWNoUG9pbnRzID4gMCB8fCBuYXZpZ2F0b3IubWF4VG91Y2hQb2ludHMgPiAwO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIGludGVyZmFjZSBIQVNTRG9tRXZlbnRzIHtcbiAgICBhY3Rpb246IEFjdGlvbkhhbmRsZXJEZXRhaWw7XG4gIH1cbn1cblxuY2xhc3MgQWN0aW9uSGFuZGxlciBleHRlbmRzIEhUTUxFbGVtZW50IGltcGxlbWVudHMgQWN0aW9uSGFuZGxlciB7XG4gIHB1YmxpYyBob2xkVGltZSA9IDUwMDtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBwdWJsaWMgcmlwcGxlOiBhbnk7XG5cbiAgcHJvdGVjdGVkIHRpbWVyPzogbnVtYmVyO1xuXG4gIHByb3RlY3RlZCBoZWxkID0gZmFsc2U7XG5cbiAgcHJpdmF0ZSBkYmxDbGlja1RpbWVvdXQ/OiBudW1iZXI7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnJpcHBsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ213Yy1yaXBwbGUnKTtcbiAgfVxuXG4gIHB1YmxpYyBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuc3R5bGUsIHtcbiAgICAgIHBvc2l0aW9uOiAnYWJzb2x1dGUnLFxuICAgICAgd2lkdGg6IGlzVG91Y2ggPyAnMTAwcHgnIDogJzUwcHgnLFxuICAgICAgaGVpZ2h0OiBpc1RvdWNoID8gJzEwMHB4JyA6ICc1MHB4JyxcbiAgICAgIHRyYW5zZm9ybTogJ3RyYW5zbGF0ZSgtNTAlLCAtNTAlKScsXG4gICAgICBwb2ludGVyRXZlbnRzOiAnbm9uZScsXG4gICAgICB6SW5kZXg6ICc5OTknLFxuICAgIH0pO1xuXG4gICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLnJpcHBsZSk7XG4gICAgdGhpcy5yaXBwbGUucHJpbWFyeSA9IHRydWU7XG5cbiAgICBbJ3RvdWNoY2FuY2VsJywgJ21vdXNlb3V0JywgJ21vdXNldXAnLCAndG91Y2htb3ZlJywgJ21vdXNld2hlZWwnLCAnd2hlZWwnLCAnc2Nyb2xsJ10uZm9yRWFjaCgoZXYpID0+IHtcbiAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgIGV2LFxuICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZXIpO1xuICAgICAgICAgIHRoaXMuc3RvcEFuaW1hdGlvbigpO1xuICAgICAgICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIHsgcGFzc2l2ZTogdHJ1ZSB9LFxuICAgICAgKTtcbiAgICB9KTtcbiAgfVxuXG4gIHB1YmxpYyBiaW5kKGVsZW1lbnQ6IEFjdGlvbkhhbmRsZXJFbGVtZW50LCBvcHRpb25zOiBBY3Rpb25IYW5kbGVyT3B0aW9ucyk6IHZvaWQge1xuICAgIGlmIChlbGVtZW50LmFjdGlvbkhhbmRsZXIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZWxlbWVudC5hY3Rpb25IYW5kbGVyID0gdHJ1ZTtcblxuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZXY6IEV2ZW50KSA9PiB7XG4gICAgICBjb25zdCBlID0gZXYgfHwgd2luZG93LmV2ZW50O1xuICAgICAgaWYgKGUucHJldmVudERlZmF1bHQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuICAgICAgaWYgKGUuc3RvcFByb3BhZ2F0aW9uKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG4gICAgICBlLmNhbmNlbEJ1YmJsZSA9IHRydWU7XG4gICAgICBlLnJldHVyblZhbHVlID0gZmFsc2U7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICBjb25zdCBzdGFydCA9IChldjogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgIHRoaXMuaGVsZCA9IGZhbHNlO1xuICAgICAgbGV0IHg6IG51bWJlcjtcbiAgICAgIGxldCB5OiBudW1iZXI7XG4gICAgICBpZiAoKGV2IGFzIFRvdWNoRXZlbnQpLnRvdWNoZXMpIHtcbiAgICAgICAgeCA9IChldiBhcyBUb3VjaEV2ZW50KS50b3VjaGVzWzBdLnBhZ2VYO1xuICAgICAgICB5ID0gKGV2IGFzIFRvdWNoRXZlbnQpLnRvdWNoZXNbMF0ucGFnZVk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB4ID0gKGV2IGFzIE1vdXNlRXZlbnQpLnBhZ2VYO1xuICAgICAgICB5ID0gKGV2IGFzIE1vdXNlRXZlbnQpLnBhZ2VZO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnRpbWVyID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLnN0YXJ0QW5pbWF0aW9uKHgsIHkpO1xuICAgICAgICB0aGlzLmhlbGQgPSB0cnVlO1xuICAgICAgfSwgdGhpcy5ob2xkVGltZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGVuZCA9IChldjogRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgIC8vIFByZXZlbnQgbW91c2UgZXZlbnQgaWYgdG91Y2ggZXZlbnRcbiAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBpZiAoWyd0b3VjaGVuZCcsICd0b3VjaGNhbmNlbCddLmluY2x1ZGVzKGV2LnR5cGUpICYmIHRoaXMudGltZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XG4gICAgICB0aGlzLnN0b3BBbmltYXRpb24oKTtcbiAgICAgIHRoaXMudGltZXIgPSB1bmRlZmluZWQ7XG4gICAgICBpZiAodGhpcy5oZWxkKSB7XG4gICAgICAgIGZpcmVFdmVudChlbGVtZW50LCAnYWN0aW9uJywgeyBhY3Rpb246ICdob2xkJyB9KTtcbiAgICAgIH0gZWxzZSBpZiAob3B0aW9ucy5oYXNEb3VibGVDbGljaykge1xuICAgICAgICBpZiAoKGV2LnR5cGUgPT09ICdjbGljaycgJiYgKGV2IGFzIE1vdXNlRXZlbnQpLmRldGFpbCA8IDIpIHx8ICF0aGlzLmRibENsaWNrVGltZW91dCkge1xuICAgICAgICAgIHRoaXMuZGJsQ2xpY2tUaW1lb3V0ID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kYmxDbGlja1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBmaXJlRXZlbnQoZWxlbWVudCwgJ2FjdGlvbicsIHsgYWN0aW9uOiAndGFwJyB9KTtcbiAgICAgICAgICB9LCAyNTApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmRibENsaWNrVGltZW91dCk7XG4gICAgICAgICAgdGhpcy5kYmxDbGlja1RpbWVvdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgZmlyZUV2ZW50KGVsZW1lbnQsICdhY3Rpb24nLCB7IGFjdGlvbjogJ2RvdWJsZV90YXAnIH0pO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmaXJlRXZlbnQoZWxlbWVudCwgJ2FjdGlvbicsIHsgYWN0aW9uOiAndGFwJyB9KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgaGFuZGxlRW50ZXIgPSAoZXY6IEtleWJvYXJkRXZlbnQpOiB2b2lkID0+IHtcbiAgICAgIGlmIChldi5rZXlDb2RlICE9PSAxMykge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBlbmQoZXYpO1xuICAgIH07XG5cbiAgICBlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoc3RhcnQnLCBzdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBlbmQpO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBlbmQpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBzdGFydCwgeyBwYXNzaXZlOiB0cnVlIH0pO1xuICAgIGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBlbmQpO1xuXG4gICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGhhbmRsZUVudGVyKTtcbiAgfVxuXG4gIHByaXZhdGUgc3RhcnRBbmltYXRpb24oeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuc3R5bGUsIHtcbiAgICAgIGxlZnQ6IGAke3h9cHhgLFxuICAgICAgdG9wOiBgJHt5fXB4YCxcbiAgICAgIGRpc3BsYXk6IG51bGwsXG4gICAgfSk7XG4gICAgdGhpcy5yaXBwbGUuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJpcHBsZS5hY3RpdmUgPSB0cnVlO1xuICAgIHRoaXMucmlwcGxlLnVuYm91bmRlZCA9IHRydWU7XG4gIH1cblxuICBwcml2YXRlIHN0b3BBbmltYXRpb24oKTogdm9pZCB7XG4gICAgdGhpcy5yaXBwbGUuYWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5yaXBwbGUuZGlzYWJsZWQgPSB0cnVlO1xuICAgIHRoaXMuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgfVxufVxuXG4vLyBUT0RPIFlvdSBuZWVkIHRvIHJlcGxhY2UgYWxsIGluc3RhbmNlcyBvZiBcImFjdGlvbi1oYW5kbGVyLWJvaWxlcnBsYXRlXCIgd2l0aCBcImFjdGlvbi1oYW5kbGVyLTx5b3VyIGNhcmQgbmFtZT5cIlxuY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdhY3Rpb24taGFuZGxlci1yb29tY2FyZCcsIEFjdGlvbkhhbmRsZXIpO1xuXG5jb25zdCBnZXRBY3Rpb25IYW5kbGVyID0gKCk6IEFjdGlvbkhhbmRsZXIgPT4ge1xuICBjb25zdCBib2R5ID0gZG9jdW1lbnQuYm9keTtcbiAgaWYgKGJvZHkucXVlcnlTZWxlY3RvcignYWN0aW9uLWhhbmRsZXItcm9vbWNhcmQnKSkge1xuICAgIHJldHVybiBib2R5LnF1ZXJ5U2VsZWN0b3IoJ2FjdGlvbi1oYW5kbGVyLXJvb21jYXJkJykgYXMgQWN0aW9uSGFuZGxlcjtcbiAgfVxuXG4gIGNvbnN0IGFjdGlvbmhhbmRsZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhY3Rpb24taGFuZGxlci1yb29tY2FyZCcpO1xuICBib2R5LmFwcGVuZENoaWxkKGFjdGlvbmhhbmRsZXIpO1xuXG4gIHJldHVybiBhY3Rpb25oYW5kbGVyIGFzIEFjdGlvbkhhbmRsZXI7XG59O1xuXG5leHBvcnQgY29uc3QgYWN0aW9uSGFuZGxlckJpbmQgPSAoZWxlbWVudDogQWN0aW9uSGFuZGxlckVsZW1lbnQsIG9wdGlvbnM/OiBBY3Rpb25IYW5kbGVyT3B0aW9ucyk6IHZvaWQgPT4ge1xuICBjb25zdCBhY3Rpb25oYW5kbGVyOiBBY3Rpb25IYW5kbGVyID0gZ2V0QWN0aW9uSGFuZGxlcigpO1xuICBpZiAoIWFjdGlvbmhhbmRsZXIpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgYWN0aW9uaGFuZGxlci5iaW5kKGVsZW1lbnQsIG9wdGlvbnMpO1xufTtcblxuZXhwb3J0IGNvbnN0IGFjdGlvbkhhbmRsZXIgPSBkaXJlY3RpdmUoXG4gIGNsYXNzIGV4dGVuZHMgRGlyZWN0aXZlIHtcbiAgICB1cGRhdGUocGFydDogQXR0cmlidXRlUGFydCwgW29wdGlvbnNdOiBEaXJlY3RpdmVQYXJhbWV0ZXJzPHRoaXM+KSB7XG4gICAgICBhY3Rpb25IYW5kbGVyQmluZChwYXJ0LmVsZW1lbnQgYXMgQWN0aW9uSGFuZGxlckVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIG5vQ2hhbmdlO1xuICAgIH1cblxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZW1wdHktZnVuY3Rpb24sIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIHJlbmRlcihfb3B0aW9ucz86IEFjdGlvbkhhbmRsZXJPcHRpb25zKSB7fVxuICB9LFxuKTsiLCJpbXBvcnQgeyBzZWNvbmRzVG9EdXJhdGlvbiB9IGZyb20gJy4vbGliL3NlY29uZHNfdG9fZHVyYXRpb24nO1xuaW1wb3J0IHsgZm9ybWF0TnVtYmVyIH0gZnJvbSAnLi9saWIvZm9ybWF0X251bWJlcic7XG5pbXBvcnQgeyBjb21wdXRlU3RhdGVEaXNwbGF5LCBjb21wdXRlU3RhdGVEb21haW4gfSBmcm9tICcuL2xpYi9jb21wdXRlX3N0YXRlX2Rpc3BsYXknO1xuaW1wb3J0IHsgY2hlY2tDb25kaXRpb25hbFZhbHVlLCBldmFsVGVtcGxhdGUsIGdldFZhbHVlLCBpc09iamVjdCwgaXNVbmF2YWlsYWJsZSwgcmVuZGVyQ2xhc3NlcyB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBBY3Rpb25IYW5kbGVyRXZlbnQsIGhhbmRsZUFjdGlvbiwgaGFzQWN0aW9uLCBIb21lQXNzaXN0YW50IH0gZnJvbSAnY3VzdG9tLWNhcmQtaGVscGVycyc7XG5pbXBvcnQgeyBIb21lQXNzaXN0YW50RW50aXR5LCBFbnRpdHlDb25kaXRpb24sIFJvb21DYXJkRW50aXR5LCBSb29tQ2FyZEljb24sIFJvb21DYXJkQ29uZmlnLCBFbnRpdHlTdHlsZXMsIFJvb21DYXJkUm93LCBSb29tQ2FyZEF0dHJpYnV0ZVRlbXBsYXRlIH0gZnJvbSAnLi90eXBlcy9yb29tLWNhcmQtdHlwZXMnO1xuaW1wb3J0IHsgaHRtbCwgSFRNTFRlbXBsYXRlUmVzdWx0LCBMaXRFbGVtZW50IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IExBU1RfQ0hBTkdFRCwgTEFTVF9VUERBVEVELCBUSU1FU1RBTVBfRk9STUFUUyB9IGZyb20gJy4vbGliL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBnZXRUZW1wbGF0ZU9yQXR0cmlidXRlLCB0ZW1wbGF0ZVN0eWxpbmcgfSBmcm9tICcuL3RlbXBsYXRlJztcbmltcG9ydCB7IGhpZGVJZkVudGl0eSwgaGlkZUlmUm93IH0gZnJvbSAnLi9oaWRlJztcbmltcG9ydCB7IGFjdGlvbkhhbmRsZXIgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYWN0aW9uLWhhbmRsZXItZGlyZWN0aXZlJztcblxuZXhwb3J0IGNvbnN0IGNoZWNrQ29uZmlnID0gKGNvbmZpZzogUm9vbUNhcmRDb25maWcpID0+IHtcbiAgICBpZiAoY29uZmlnLmVudGl0aWVzID09IHVuZGVmaW5lZCAmJiBjb25maWcuZW50aXR5ID09IHVuZGVmaW5lZCAmJiBjb25maWcuaW5mb19lbnRpdGllcyA9PT0gdW5kZWZpbmVkICYmIGNvbmZpZy5yb3dzID09PSB1bmRlZmluZWQgJiYgY29uZmlnLmNhcmRzID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdQbGVhc2UgZGVmaW5lIGVudGl0aWVzLicpO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBjb21wdXRlRW50aXR5ID0gKGVudGl0eUlkOiBzdHJpbmcpID0+IGVudGl0eUlkLnN1YnN0cihlbnRpdHlJZC5pbmRleE9mKCcuJykgKyAxKTtcblxuZXhwb3J0IGNvbnN0IGVudGl0eU5hbWUgPSAoZW50aXR5OiBSb29tQ2FyZEVudGl0eSwgaGFzczogSG9tZUFzc2lzdGFudCwgZW50aXR5U3RhdGU/OiBIb21lQXNzaXN0YW50RW50aXR5KSA9PiB7XG4gICAgY29uc3QgbmFtZSA9IGdldFRlbXBsYXRlT3JBdHRyaWJ1dGUoZW50aXR5Lm5hbWUsIGhhc3MsIGVudGl0eVN0YXRlKVxuXG4gICAgcmV0dXJuIChcbiAgICAgICAgbmFtZSB8fFxuICAgICAgICAoZW50aXR5LmVudGl0eSA/IGVudGl0eVN0YXRlLmF0dHJpYnV0ZXMuZnJpZW5kbHlfbmFtZSB8fCBjb21wdXRlRW50aXR5KGVudGl0eVN0YXRlLmVudGl0eV9pZCkgOiBudWxsKSB8fFxuICAgICAgICBudWxsXG4gICAgKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnRpdHlJY29uID0gKHN0YXRlT2JqOiBIb21lQXNzaXN0YW50RW50aXR5LCBjb25maWc6IFJvb21DYXJkRW50aXR5IHwgUm9vbUNhcmRDb25maWcsIGhhc3M6IEhvbWVBc3Npc3RhbnQpID0+IHtcbiAgICBpZignaWNvbicgaW4gY29uZmlnICYmIChjb25maWcuc2hvd19pY29uID09PSB1bmRlZmluZWQgfHwgY29uZmlnLnNob3dfaWNvbiA9PT0gZmFsc2UpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRW50aXR5OiAke2NvbmZpZy5lbnRpdHl9ID0+IEljb24gZGVmaW5lZCBidXQgc2hvd19pY29uIGlzIHNldCB0byBmYWxzZSBvciBub3QgZGVmaW5lZC4gUGxlYXNlIHNldCBzaG93X2ljb24gdG8gdHJ1ZWApO1xuICAgIH1cblxuICAgIGlmICghKCdpY29uJyBpbiBjb25maWcpKSByZXR1cm4gc3RhdGVPYmouYXR0cmlidXRlcy5pY29uIHx8IG51bGw7XG4gICAgaWYgKHR5cGVvZiBjb25maWcuaWNvbiA9PT0gJ3N0cmluZycpIHJldHVybiBjb25maWcuaWNvbjtcblxuICAgIGlmKGNvbmZpZy5pY29uLnN0YXRlX29uKSByZXR1cm4gcmVuZGVyQ3VzdG9tU3RhdGVJY29uKHN0YXRlT2JqLCBjb25maWcuaWNvbiBhcyBSb29tQ2FyZEljb24pO1xuICAgIGlmKGNvbmZpZy5pY29uLmNvbmRpdGlvbnMpIHJldHVybiByZW5kZXJDb25kaXRpb25JY29ucyhzdGF0ZU9iaiwgY29uZmlnLCBoYXNzKTtcbiAgICBpZihjb25maWcuaWNvbi50ZW1wbGF0ZT8uaWNvbikgcmV0dXJuIGV2YWxUZW1wbGF0ZShoYXNzLCBzdGF0ZU9iaiwgY29uZmlnLmljb24udGVtcGxhdGUuaWNvbik7XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJDb25kaXRpb25JY29ucyA9IChzdGF0ZU9iajogSG9tZUFzc2lzdGFudEVudGl0eSwgY29uZmlnOiBSb29tQ2FyZEVudGl0eSB8IFJvb21DYXJkQ29uZmlnLCBoYXNzOiBIb21lQXNzaXN0YW50KSA9PiB7XG4gICAgY29uc3QgZW50aXR5VmFsdWUgPSBzdGF0ZU9iai5zdGF0ZTtcbiAgICBjb25zdCBpY29uQ29uZGl0aW9ucyA9IChjb25maWcuaWNvbiBhcyBSb29tQ2FyZEljb24pLmNvbmRpdGlvbnMgYXMgRW50aXR5Q29uZGl0aW9uW107XG4gICAgY29uc3QgbWF0Y2hlZENvbmRpdGlvbnMgPSBpY29uQ29uZGl0aW9ucy5maWx0ZXIoaXRlbSA9PiB7XG5cbiAgICAgICAgbGV0IGNoZWNrRW50aXR5VmFsdWUgPSBlbnRpdHlWYWx1ZTtcbiAgICAgICAgaWYoaXRlbS5lbnRpdHkpIHtcbiAgICAgICAgICAgIGNvbnN0IGVudGl0eSA9IGhhc3Muc3RhdGVzW2l0ZW0uZW50aXR5XTtcbiAgICAgICAgICAgIGNoZWNrRW50aXR5VmFsdWUgPSBpdGVtLmF0dHJpYnV0ZSA/IGVudGl0eS5hdHRyaWJ1dGVzW2l0ZW0uYXR0cmlidXRlXSA6IGVudGl0eS5zdGF0ZTtcbiAgICAgICAgfSAgICAgICAgXG5cbiAgICAgICAgaWYoaXRlbS5hdHRyaWJ1dGUgJiYgIWl0ZW0uZW50aXR5KSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgY2hlY2tFbnRpdHlWYWx1ZSA9IHN0YXRlT2JqLmF0dHJpYnV0ZXNbaXRlbS5hdHRyaWJ1dGVdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNoZWNrQ29uZGl0aW9uYWxWYWx1ZShpdGVtLCBjaGVja0VudGl0eVZhbHVlKTtcbiAgICB9KTtcbiAgICBcbiAgICByZXR1cm4gbWF0Y2hlZENvbmRpdGlvbnMucG9wKCk7XG59XG5leHBvcnQgY29uc3QgcmVuZGVyQ3VzdG9tU3RhdGVJY29uID0gKHN0YXRlT2JqOiBIb21lQXNzaXN0YW50RW50aXR5LCBpY29uOiBSb29tQ2FyZEljb24pID0+IHtcbiAgICBjb25zdCBkb21haW4gPSBjb21wdXRlU3RhdGVEb21haW4oc3RhdGVPYmopO1xuICAgIFxuICAgIHN3aXRjaChkb21haW4pIHtcbiAgICAgICAgY2FzZSAnbGlnaHQnOlxuICAgICAgICBjYXNlICdzd2l0Y2gnOlxuICAgICAgICBjYXNlICdiaW5hcnlfc2Vuc29yJzpcbiAgICAgICAgY2FzZSAnaW5wdXRfYm9vbGVhbic6XG4gICAgICAgICAgICByZXR1cm4gc3RhdGVPYmouc3RhdGUgPT09ICdvbicgPyBpY29uLnN0YXRlX29uIDogaWNvbi5zdGF0ZV9vZmY7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgZW50aXR5U3RhdGVEaXNwbGF5ID0gKGhhc3M6IEhvbWVBc3Npc3RhbnQsIGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGVudGl0eVN0YXRlPzogSG9tZUFzc2lzdGFudEVudGl0eSkgPT4ge1xuICAgIGlmIChpc1VuYXZhaWxhYmxlKGVudGl0eVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gaGFzcy5sb2NhbGl6ZShgc3RhdGUuZGVmYXVsdC4ke2VudGl0eVN0YXRlLnN0YXRlfWApO1xuICAgIH1cblxuICAgIGxldCB2YWx1ZSA9IGdldFZhbHVlKGVudGl0eSk7XG4gICAgbGV0IHVuaXQgPSBlbnRpdHkuYXR0cmlidXRlICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgID8gZW50aXR5LnVuaXRcbiAgICAgICAgICAgIDogZW50aXR5LnVuaXQgfHwgZW50aXR5U3RhdGUuYXR0cmlidXRlcy51bml0X29mX21lYXN1cmVtZW50O1xuXG4gICAgaWYgKGVudGl0eS5mb3JtYXQpIHtcbiAgICAgICAgKHsgdmFsdWUsIHVuaXQgfSA9IGV4dHJhY3RWYWx1ZShlbnRpdHksIHZhbHVlLCBoYXNzLCB1bml0KSk7XG4gICAgICAgIHJldHVybiBgJHt2YWx1ZX0ke3VuaXQgPyBgICR7dW5pdH1gIDogJyd9YDtcbiAgICB9XG5cbiAgICBpZiAoZW50aXR5LmF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gYCR7aXNOYU4odmFsdWUpID8gdmFsdWUgOiBmb3JtYXROdW1iZXIodmFsdWUsIGhhc3MubG9jYWxlKX0ke3VuaXQgPyBgICR7dW5pdH1gIDogJyd9YDtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RpZmllZFN0YXRlT2JqID0geyAuLi5lbnRpdHlTdGF0ZSwgYXR0cmlidXRlczogeyAuLi5lbnRpdHlTdGF0ZS5hdHRyaWJ1dGVzLCB1bml0X29mX21lYXN1cmVtZW50OiB1bml0IH0gfTtcblxuICAgIHJldHVybiBjb21wdXRlU3RhdGVEaXNwbGF5KGhhc3MubG9jYWxpemUsIG1vZGlmaWVkU3RhdGVPYmosIGhhc3MubG9jYWxlKTtcbn07XG5cbmV4cG9ydCBjb25zdCBlbnRpdHlTdHlsZXMgPSAoc3R5bGVzOiBFbnRpdHlTdHlsZXMgfCBSb29tQ2FyZEF0dHJpYnV0ZVRlbXBsYXRlLCBzdGF0ZU9iajogSG9tZUFzc2lzdGFudEVudGl0eSwgaGFzczogSG9tZUFzc2lzdGFudCkgPT4ge1xuICAgIGlmKCFzdHlsZXMpIHtcbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICBcbiAgICBpZiAoJ3RlbXBsYXRlJyBpbiBzdHlsZXMpIHtcbiAgICAgICAgY29uc3QgdGVtcGxhdGVEZWZpbml0aW9uID0gc3R5bGVzIGFzIFJvb21DYXJkQXR0cmlidXRlVGVtcGxhdGU7XG4gICAgICAgIHJldHVybiBldmFsVGVtcGxhdGUoaGFzcywgc3RhdGVPYmosIHRlbXBsYXRlRGVmaW5pdGlvbi50ZW1wbGF0ZSk7XG4gICAgfVxuXG4gICAgY29uc3QgZW50aXR5U3R5bGVzID0gc3R5bGVzIGFzIEVudGl0eVN0eWxlcztcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoZW50aXR5U3R5bGVzKVxuICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiBgJHtrZXl9OiAke2VudGl0eVN0eWxlc1trZXldfTtgKVxuICAgICAgICAgICAgLmpvaW4oJycpO1xufSAgICBcblxuZXhwb3J0IGNvbnN0IHJlbmRlckljb24gPSAoc3RhdGVPYmo6IEhvbWVBc3Npc3RhbnRFbnRpdHksIGNvbmZpZzogUm9vbUNhcmRFbnRpdHkgfCBSb29tQ2FyZENvbmZpZywgaGFzczogSG9tZUFzc2lzdGFudCwgY2xhc3Nlcz8gOiBzdHJpbmcpIDogSFRNTFRlbXBsYXRlUmVzdWx0ID0+IHtcbiAgICBpZihjb25maWcuc2hvd19pY29uICE9PSB1bmRlZmluZWQgJiYgY29uZmlnLnNob3dfaWNvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgY29uc3QgY3VzdG9tSWNvbiA9IGVudGl0eUljb24oc3RhdGVPYmosIGNvbmZpZywgaGFzcyk7XG4gICAgY29uc3QgY3VzdG9tU3R5bGluZyA9IHRlbXBsYXRlU3R5bGluZyhzdGF0ZU9iaiwgY29uZmlnLCBoYXNzKTtcblxuICAgIHJldHVybiBodG1sYDxzdGF0ZS1iYWRnZVxuICAgICAgICBjbGFzcz1cImljb24tc21hbGwgJHtjbGFzc2VzfVwiXG4gICAgICAgIC5zdGF0ZU9iaj1cIiR7c3RhdGVPYmp9XCJcbiAgICAgICAgLm92ZXJyaWRlSWNvbj1cIiR7aXNPYmplY3QoY3VzdG9tSWNvbikgPyAoY3VzdG9tSWNvbiBhcyBFbnRpdHlDb25kaXRpb24pLmljb24gOiBjdXN0b21JY29uIGFzIHN0cmluZ31cIlxuICAgICAgICAuc3RhdGVDb2xvcj1cIiR7Y29uZmlnLnN0YXRlX2NvbG9yfVwiXG4gICAgICAgIHN0eWxlPVwiJHtjdXN0b21TdHlsaW5nID8/IGVudGl0eVN0eWxlcyhpc09iamVjdChjdXN0b21JY29uKSA/IChjdXN0b21JY29uIGFzIEVudGl0eUNvbmRpdGlvbikuc3R5bGVzIDogbnVsbCwgaGFzcy5zdGF0ZXNbY29uZmlnLmVudGl0eV0sIGhhc3MpfVwiXG4gICAgPjwvc3RhdGUtYmFkZ2U+YDtcbn1cblxuZXhwb3J0IGNvbnN0IHJlbmRlclZhbHVlID0gKGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGhhc3M6IEhvbWVBc3Npc3RhbnQsIGVudGl0eVN0YXRlPzogSG9tZUFzc2lzdGFudEVudGl0eSkgPT4ge1xuICAgIGlmIChlbnRpdHkudG9nZ2xlID09PSB0cnVlKSB7XG4gICAgICAgIHJldHVybiBodG1sYDxoYS1lbnRpdHktdG9nZ2xlIC5zdGF0ZU9iaj1cIiR7ZW50aXR5U3RhdGV9XCIgLmhhc3M9XCIke2hhc3N9XCI+PC9oYS1lbnRpdHktdG9nZ2xlPmA7XG4gICAgfVxuXG4gICAgaWYgKGVudGl0eS5zaG93X2ljb24gPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlckljb24oZW50aXR5U3RhdGUsIGVudGl0eSwgaGFzcyk7XG4gICAgfVxuXG4gICAgaWYgKGVudGl0eS5hdHRyaWJ1dGUgJiYgW0xBU1RfQ0hBTkdFRCwgTEFTVF9VUERBVEVEXS5pbmNsdWRlcyhlbnRpdHkuYXR0cmlidXRlKSkge1xuICAgICAgICByZXR1cm4gaHRtbGA8aGEtcmVsYXRpdmUtdGltZVxuICAgICAgICAgICAgLmhhc3M9JHtoYXNzfVxuICAgICAgICAgICAgLmRhdGV0aW1lPSR7KGVudGl0eS5hdHRyaWJ1dGUgPT09IExBU1RfQ0hBTkdFRCA/IGVudGl0eVN0YXRlLmxhc3RfY2hhbmdlZCA6IGVudGl0eVN0YXRlLmxhc3RfdXBkYXRlZCl9XG4gICAgICAgICAgICBjYXBpdGFsaXplXG4gICAgICAgID48L2hhLXJlbGF0aXZlLXRpbWU+YDtcbiAgICB9XG4gICAgaWYgKGVudGl0eS5mb3JtYXQgJiYgVElNRVNUQU1QX0ZPUk1BVFMuaW5jbHVkZXMoZW50aXR5LmZvcm1hdCkpIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBnZXRWYWx1ZShlbnRpdHkpO1xuICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZSh2YWx1ZSk7XG4gICAgICAgIGlmICghKHRpbWVzdGFtcCBpbnN0YW5jZW9mIERhdGUpIHx8IGlzTmFOKHRpbWVzdGFtcC5nZXRUaW1lKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGh0bWxgPGh1aS10aW1lc3RhbXAtZGlzcGxheVxuICAgICAgICAgICAgLmhhc3M9JHtoYXNzfVxuICAgICAgICAgICAgLnRzPSR7dGltZXN0YW1wfVxuICAgICAgICAgICAgLmZvcm1hdD0ke2VudGl0eS5mb3JtYXR9XG4gICAgICAgICAgICBjYXBpdGFsaXplXG4gICAgICAgID48L2h1aS10aW1lc3RhbXAtZGlzcGxheT5gO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gZW50aXR5U3RhdGVEaXNwbGF5KGhhc3MsIGVudGl0eSwgZW50aXR5U3RhdGUpO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyTWFpbkVudGl0eSA9IChlbnRpdHk6IFJvb21DYXJkRW50aXR5IHwgdW5kZWZpbmVkLCBjb25maWc6IFJvb21DYXJkQ29uZmlnLCBoYXNzOiBIb21lQXNzaXN0YW50LCBlbnRpdHlTdGF0ZTogSG9tZUFzc2lzdGFudEVudGl0eSkgOiBIVE1MVGVtcGxhdGVSZXN1bHQgPT4ge1xuICAgIGlmIChlbnRpdHkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBjb25zdCBzdGF0ZU9iaiA9IGhhc3Muc3RhdGVzW2VudGl0eS5lbnRpdHldO1xuXG4gICAgcmV0dXJuIGh0bWxgPGRpdlxuICAgICAgICBjbGFzcz1cIm1haW4tc3RhdGUgZW50aXR5XCJcbiAgICAgICAgc3R5bGU9XCIke2VudGl0eVN0eWxlcyhlbnRpdHkuc3R5bGVzLCBzdGF0ZU9iaiwgaGFzcyl9XCI+XG4gICAgICAgICR7Y29uZmlnLmVudGl0aWVzPy5sZW5ndGggPT09IDAgfHwgY29uZmlnLmljb25cbiAgICAgICAgICAgID8gcmVuZGVySWNvbihlbnRpdHlTdGF0ZSwgY29uZmlnLCBoYXNzLCBcIm1haW4taWNvblwiKVxuICAgICAgICAgICAgOiBlbnRpdHkuc2hvd19zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIGVudGl0eS5zaG93X3N0YXRlID09PSBmYWxzZSA/ICcnIDogcmVuZGVyVmFsdWUoZW50aXR5LCBoYXNzKX1cbiAgICA8L2Rpdj5gO1xufSAgXG5cbmV4cG9ydCBjb25zdCBjbGlja0hhbmRsZXIgPSAoZWxlbWVudDogTGl0RWxlbWVudCwgaGFzczogSG9tZUFzc2lzdGFudCwgZW50aXR5OiBSb29tQ2FyZEVudGl0eSwgZXY6IEFjdGlvbkhhbmRsZXJFdmVudCkgPT4ge1xuICAgIGhhbmRsZUFjdGlvbihlbGVtZW50LCBoYXNzLCBlbnRpdHksIGV2LmRldGFpbC5hY3Rpb24pO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyVGl0bGUgPSAoY29uZmlnOiBSb29tQ2FyZENvbmZpZywgaGFzczogSG9tZUFzc2lzdGFudCwgZWxlbWVudDogTGl0RWxlbWVudCwgZW50aXR5PzogUm9vbUNhcmRFbnRpdHksIGVudGl0eVN0YXRlPzogSG9tZUFzc2lzdGFudEVudGl0eSkgOiBIVE1MVGVtcGxhdGVSZXN1bHQgPT4ge1xuICAgIGlmKGNvbmZpZy5oaWRlX3RpdGxlID09PSB0cnVlKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIGNvbnN0IF9oYW5kbGVBY3Rpb24gPSAoZXY6IEFjdGlvbkhhbmRsZXJFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoaGFzcyAmJiBldi5kZXRhaWwuYWN0aW9uKSB7XG4gICAgICAgICAgICBjbGlja0hhbmRsZXIoZWxlbWVudCwgaGFzcywgZW50aXR5ID8/IHsgXG4gICAgICAgICAgICAgICAgdGFwX2FjdGlvbjogY29uZmlnLnRhcF9hY3Rpb24sXG4gICAgICAgICAgICAgICAgZG91YmxlX3RhcF9hY3Rpb246IGNvbmZpZy5kb3VibGVfdGFwX2FjdGlvbixcbiAgICAgICAgICAgICAgICBob2xkX2FjdGlvbjogY29uZmlnLmhvbGRfYWN0aW9uXG4gICAgICAgICAgICAgIH0gYXMgUm9vbUNhcmRFbnRpdHksIGV2KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGhhc0NvbmZpZ0FjdGlvbiA9IGNvbmZpZy50YXBfYWN0aW9uICE9PSB1bmRlZmluZWQgfHwgY29uZmlnLmRvdWJsZV90YXBfYWN0aW9uICE9PSB1bmRlZmluZWQ7XG4gICAgY29uc3QgdGl0bGUgPSBnZXRUZW1wbGF0ZU9yQXR0cmlidXRlKGNvbmZpZy50aXRsZSwgaGFzcywgZW50aXR5U3RhdGUpO1xuXG4gICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cInRpdGxlJHsoaGFzQ29uZmlnQWN0aW9uID8gJyBjbGlja2FibGUnIDogbnVsbCl9XCIgQGFjdGlvbj0ke19oYW5kbGVBY3Rpb259XG4gICAgLmFjdGlvbkhhbmRsZXI9JHthY3Rpb25IYW5kbGVyKHtcbiAgICAgICAgaGFzSG9sZDogaGFzQWN0aW9uKGVudGl0eT8uaG9sZF9hY3Rpb24pLFxuICAgICAgICBoYXNEb3VibGVDbGljazogaGFzQWN0aW9uKGVudGl0eT8uZG91YmxlX3RhcF9hY3Rpb24pLFxuICAgICAgfSl9PiR7cmVuZGVyTWFpbkVudGl0eShlbnRpdHksIGNvbmZpZywgaGFzcywgZW50aXR5U3RhdGUpfSAke3RpdGxlfTwvZGl2PmA7XG59XG5cbmV4cG9ydCBjb25zdCByZW5kZXJJbmZvRW50aXR5ID0gKGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGhhc3M6IEhvbWVBc3Npc3RhbnQsIGVsZW1lbnQ6IExpdEVsZW1lbnQsIGVudGl0eVN0YXRlOiBIb21lQXNzaXN0YW50RW50aXR5KSA6IEhUTUxUZW1wbGF0ZVJlc3VsdCA9PiB7XG4gICAgaWYgKGVudGl0eSA9PT0gdW5kZWZpbmVkIHx8ICFlbnRpdHlTdGF0ZSB8fCBoaWRlSWZFbnRpdHkoZW50aXR5LCBoYXNzKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9ICAgICAgICAgICAgICAgXG4gICAgXG4gICAgY29uc3QgX2hhbmRsZUFjdGlvbiA9IChldjogQWN0aW9uSGFuZGxlckV2ZW50KTogdm9pZCA9PiB7XG4gICAgICAgIGlmIChoYXNzICYmIGVudGl0eSAmJiBldi5kZXRhaWwuYWN0aW9uKSB7XG4gICAgICAgICAgICBjbGlja0hhbmRsZXIoZWxlbWVudCwgaGFzcywgZW50aXR5LCBldik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gaHRtbGA8ZGl2IGNsYXNzPVwic3RhdGUgZW50aXR5ICR7ZW50aXR5LnNob3dfaWNvbiA9PT0gdHJ1ZSA/ICdpY29uLWVudGl0eScgOiAnJ31cIiBzdHlsZT1cIiR7ZW50aXR5U3R5bGVzKGVudGl0eS5zdHlsZXMsIGVudGl0eVN0YXRlLCBoYXNzKX1cIiBcbiAgICBAYWN0aW9uPSR7X2hhbmRsZUFjdGlvbn1cbiAgICAuYWN0aW9uSGFuZGxlcj0ke2FjdGlvbkhhbmRsZXIoe1xuICAgICAgICBoYXNIb2xkOiBoYXNBY3Rpb24oZW50aXR5LmhvbGRfYWN0aW9uKSxcbiAgICAgICAgaGFzRG91YmxlQ2xpY2s6IGhhc0FjdGlvbihlbnRpdHkuZG91YmxlX3RhcF9hY3Rpb24pLFxuICAgICAgfSl9PiR7cmVuZGVyVmFsdWUoZW50aXR5LCBoYXNzKX08L2Rpdj5gO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyRW50aXRpZXNSb3cgPSAoY29uZmlnOiBSb29tQ2FyZENvbmZpZyB8IFJvb21DYXJkUm93LCBlbnRpdGllczogUm9vbUNhcmRFbnRpdHlbXSwgaGFzczogSG9tZUFzc2lzdGFudCwgZWxlbWVudDogTGl0RWxlbWVudCwgY2xhc3Nlcz86IHN0cmluZykgOiBIVE1MVGVtcGxhdGVSZXN1bHQgPT4geyAgICBcbiAgICBpZihlbnRpdGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH0gICBcbiAgICBjb25zb2xlLmxvZygncmVuZGVyaW5nIGVudGl0aWVzJyk7XG4gICAgcmV0dXJuIGh0bWxgPGRpdiBjbGFzcz1cIiR7cmVuZGVyQ2xhc3Nlcyhjb25maWcsIGNsYXNzZXMpfVwiPiR7ZW50aXRpZXMubWFwKChlbnRpdHkpID0+IHJlbmRlckVudGl0eShlbnRpdHksIGhhc3MsIGVsZW1lbnQpKX08L2Rpdj5gO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyRW50aXR5ID0gKGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGhhc3M6IEhvbWVBc3Npc3RhbnQsIGVsZW1lbnQ6IExpdEVsZW1lbnQsIGVudGl0eVN0YXRlPzogSG9tZUFzc2lzdGFudEVudGl0eSkgOiBIVE1MVGVtcGxhdGVSZXN1bHQgPT4geyAgICBcbiAgICBpZiAoZW50aXR5U3RhdGUgPT09IHVuZGVmaW5lZCB8fCBoaWRlSWZFbnRpdHkoZW50aXR5LCBoYXNzKSkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9ICAgICAgICAgICAgICAgIFxuICAgIFxuICAgIGNvbnN0IF9oYW5kbGVBY3Rpb24gPSAoZXY6IEFjdGlvbkhhbmRsZXJFdmVudCk6IHZvaWQgPT4ge1xuICAgICAgICBpZiAoaGFzcyAmJiBlbnRpdHkgJiYgZXYuZGV0YWlsLmFjdGlvbikge1xuICAgICAgICAgICAgY2xpY2tIYW5kbGVyKGVsZW1lbnQsIGhhc3MsIGVudGl0eSwgZXYpO1xuICAgICAgICB9XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBodG1sYDxkaXYgY2xhc3M9XCJlbnRpdHlcIiBzdHlsZT1cIiR7ZW50aXR5U3R5bGVzKGVudGl0eS5zdHlsZXMsIGhhc3Muc3RhdGVzW2VudGl0eS5lbnRpdHldLCBoYXNzKX1cIlxuICAgICAgICAgICAgQGFjdGlvbj0ke19oYW5kbGVBY3Rpb259XG4gICAgICAgICAgICAuYWN0aW9uSGFuZGxlcj0ke2FjdGlvbkhhbmRsZXIoe1xuICAgICAgICAgICAgICAgIGhhc0hvbGQ6IGhhc0FjdGlvbihlbnRpdHkuaG9sZF9hY3Rpb24pLFxuICAgICAgICAgICAgICAgIGhhc0RvdWJsZUNsaWNrOiBoYXNBY3Rpb24oZW50aXR5LmRvdWJsZV90YXBfYWN0aW9uKSxcbiAgICAgICAgICAgICAgfSl9PlxuICAgICAgICAgICAgJHtlbnRpdHkuc2hvd19uYW1lID09PSB1bmRlZmluZWQgfHwgZW50aXR5LnNob3dfbmFtZSA/IGh0bWxgPHNwYW4+JHtlbnRpdHlOYW1lKGVudGl0eSwgaGFzcyl9PC9zcGFuPmAgOiAnJ31cbiAgICAgICAgICAgIDxkaXY+JHtyZW5kZXJJY29uKGVudGl0eVN0YXRlLCBlbnRpdHksIGhhc3MpfTwvZGl2PlxuICAgICAgICAgICAgJHtlbnRpdHkuc2hvd19zdGF0ZSA/IGh0bWxgPHNwYW4+JHtlbnRpdHlTdGF0ZURpc3BsYXkoaGFzcywgZW50aXR5KX08L3NwYW4+YCA6ICcnfVxuICAgICAgICA8L2Rpdj5gO1xufVxuXG5leHBvcnQgY29uc3QgcmVuZGVyUm93cyA9IChyb3dzOiBSb29tQ2FyZFJvd1tdLCBoYXNzOiBIb21lQXNzaXN0YW50LCBlbGVtZW50OiBMaXRFbGVtZW50KSAgOiBIVE1MVGVtcGxhdGVSZXN1bHQgPT4geyBcbiAgICBjb25zdCBmaWx0ZXJlZFJvd3MgPSByb3dzLmZpbHRlcihyb3cgPT4geyByZXR1cm4gIWhpZGVJZlJvdyhyb3csIGhhc3MpOyB9KTtcblxuICAgIGNvbnNvbGUubG9nKCdSZW5kZXJpbmcgcm93cy4uLicpO1xuICAgIHJldHVybiBodG1sYCR7ZmlsdGVyZWRSb3dzLm1hcCgocm93KSA9PiB7XG4gICAgICAgIHJldHVybiByZW5kZXJFbnRpdGllc1Jvdyhyb3csIHJvdy5lbnRpdGllcywgaGFzcywgZWxlbWVudCk7XG4gICAgfSl9YDtcbn1cblxuLyogZXNsaW50LWRpc2FibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuZXhwb3J0IGNvbnN0IGV4dHJhY3RWYWx1ZSA9IChlbnRpdHk6IFJvb21DYXJkRW50aXR5LCB2YWx1ZTogYW55LCBoYXNzOiBIb21lQXNzaXN0YW50LCB1bml0OiBzdHJpbmcpID0+IHtcbiAgICBpZiAoZW50aXR5LmZvcm1hdC5zdGFydHNXaXRoKCdwcmVjaXNpb24nKSkge1xuXG4gICAgICAgIGNvbnN0IHByZWNpc2lvbiA9IHBhcnNlSW50KGVudGl0eS5mb3JtYXQuc2xpY2UoLTEpLCAxMCk7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0TnVtYmVyKHZhbHVlLCBoYXNzLmxvY2FsZSwge1xuICAgICAgICAgICAgbWluaW11bUZyYWN0aW9uRGlnaXRzOiBwcmVjaXNpb24sXG4gICAgICAgICAgICBtYXhpbXVtRnJhY3Rpb25EaWdpdHM6IHByZWNpc2lvbixcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzTmFOKHBhcnNlRmxvYXQodmFsdWUpKSB8fCAhaXNGaW5pdGUodmFsdWUpKSB7XG4gICAgICAgIC8vIGRvIG5vdGhpbmcgaWYgbm90IGEgbnVtYmVyXG4gICAgfSBlbHNlIGlmIChlbnRpdHkuZm9ybWF0ID09PSAnYnJpZ2h0bmVzcycpIHtcbiAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKCh2YWx1ZSAvIDI1NSkgKiAxMDApO1xuICAgICAgICB1bml0ID0gJyUnO1xuICAgIH0gZWxzZSBpZiAoZW50aXR5LmZvcm1hdC5zdGFydHNXaXRoKCdkdXJhdGlvbicpKSB7XG4gICAgICAgIHZhbHVlID0gc2Vjb25kc1RvRHVyYXRpb24oZW50aXR5LmZvcm1hdCA9PT0gJ2R1cmF0aW9uLW0nID8gdmFsdWUgLyAxMDAwIDogdmFsdWUpO1xuICAgICAgICB1bml0ID0gdW5kZWZpbmVkO1xuICAgIH0gZWxzZSBpZiAoZW50aXR5LmZvcm1hdCA9PT0gJ2tpbG8nKSB7XG4gICAgICAgIHZhbHVlID0gZm9ybWF0TnVtYmVyKHZhbHVlIC8gMTAwMCwgaGFzcy5sb2NhbGUsIHsgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAyIH0pO1xuICAgIH0gZWxzZSBpZiAoZW50aXR5LmZvcm1hdCA9PT0gJ2ludmVydCcpIHtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXROdW1iZXIodmFsdWUgLSB2YWx1ZSAqIDIsIGhhc3MubG9jYWxlKTtcbiAgICB9IGVsc2UgaWYgKGVudGl0eS5mb3JtYXQgPT09ICdwb3NpdGlvbicpIHtcbiAgICAgICAgdmFsdWUgPSBmb3JtYXROdW1iZXIoMTAwIC0gdmFsdWUsIGhhc3MubG9jYWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4geyB2YWx1ZSwgdW5pdCB9O1xufVxuXG4vKiBlc2xpbnQtZW5hYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi8iLCJpbXBvcnQgeyBIb21lQXNzaXN0YW50LCBMb3ZlbGFjZUNhcmRDb25maWcgfSBmcm9tIFwiY3VzdG9tLWNhcmQtaGVscGVyc1wiO1xuaW1wb3J0IHsgSGlkZUlmQ29uZmlnLCBIb21lQXNzaXN0YW50RW50aXR5LCBSb29tQ2FyZEVudGl0eSwgUm9vbUNhcmRSb3cgfSBmcm9tIFwiLi90eXBlcy9yb29tLWNhcmQtdHlwZXNcIjtcbmltcG9ydCB7IGNoZWNrQ29uZGl0aW9uYWxWYWx1ZSwgaXNVbmF2YWlsYWJsZSB9IGZyb20gXCIuL3V0aWxcIjtcblxuZXhwb3J0IGNvbnN0IGhpZGVVbmF2YWlsYWJsZSA9IChlbnRpdHk6IFJvb21DYXJkRW50aXR5LCBlbnRpdHlTdGF0ZTogSG9tZUFzc2lzdGFudEVudGl0eSkgOiBib29sZWFuID0+XG4gICAgZW50aXR5LmhpZGVfdW5hdmFpbGFibGUgJiYgaXNVbmF2YWlsYWJsZShlbnRpdHlTdGF0ZSk7XG5cbmV4cG9ydCBjb25zdCBoaWRlSWZDYXJkID0gKGNhcmRDb25maWc6IExvdmVsYWNlQ2FyZENvbmZpZywgaGFzczogSG9tZUFzc2lzdGFudCkgPT4ge1xuICAgIGlmIChjYXJkQ29uZmlnLmhpZGVfaWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKDxIaWRlSWZDb25maWc+Y2FyZENvbmZpZy5oaWRlX2lmKVxuICAgIHsgICAgICAgIFxuICAgICAgICBjb25zdCBlbnRpdHlWYWx1ZSA9IGhhc3Muc3RhdGVzW2NhcmRDb25maWcuZW50aXR5XT8uc3RhdGU7XG4gICAgICAgIGNvbnN0IG1hdGNoZWRDb25kaXRpb25zID0gKGNhcmRDb25maWcuaGlkZV9pZiBhcyBIaWRlSWZDb25maWcpLmNvbmRpdGlvbnM/LmZpbHRlcihpdGVtID0+IHtcbiAgICBcbiAgICAgICAgICAgIGxldCBjaGVja0VudGl0eVZhbHVlID0gZW50aXR5VmFsdWU7XG4gICAgICAgICAgICBpZihpdGVtLmVudGl0eSkgeyAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjb25zdCBzdGF0ZUVudGl0eSA9IGhhc3Muc3RhdGVzW2l0ZW0uZW50aXR5XTtcbiAgICAgICAgICAgICAgICBjaGVja0VudGl0eVZhbHVlID0gaXRlbS5hdHRyaWJ1dGUgPyBzdGF0ZUVudGl0eS5hdHRyaWJ1dGVzW2l0ZW0uYXR0cmlidXRlXSA6IHN0YXRlRW50aXR5LnN0YXRlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZihpdGVtLmF0dHJpYnV0ZSAmJiAhaXRlbS5lbnRpdHkpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2hlY2tFbnRpdHlWYWx1ZSA9IGhhc3Muc3RhdGVzW2NhcmRDb25maWcuZW50aXR5XS5hdHRyaWJ1dGVzW2l0ZW0uYXR0cmlidXRlXTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBjaGVja0NvbmRpdGlvbmFsVmFsdWUoaXRlbSwgY2hlY2tFbnRpdHlWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1hdGNoZWRDb25kaXRpb25zPy5sZW5ndGggPiAwOyAgICBcbiAgICB9XG59O1xuXG5leHBvcnQgY29uc3QgaGlkZUlmUm93ID0gKHJvdzogUm9vbUNhcmRSb3csIGhhc3M6IEhvbWVBc3Npc3RhbnQpID0+IHtcbiAgICBpZiAocm93LmhpZGVfaWYgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKDxIaWRlSWZDb25maWc+cm93LmhpZGVfaWYpXG4gICAge1xuICAgICAgICBjb25zdCBtYXRjaGVkQ29uZGl0aW9ucyA9IChyb3cuaGlkZV9pZiBhcyBIaWRlSWZDb25maWcpLmNvbmRpdGlvbnM/LmZpbHRlcihpdGVtID0+IHtcbiAgICBcbiAgICAgICAgICAgIGlmKGl0ZW0uZW50aXR5KSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXRlRW50aXR5ID0gaGFzcy5zdGF0ZXNbaXRlbS5lbnRpdHldO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNoZWNrQ29uZGl0aW9uYWxWYWx1ZShpdGVtLCBpdGVtLmF0dHJpYnV0ZSA/IHN0YXRlRW50aXR5LmF0dHJpYnV0ZXNbaXRlbS5hdHRyaWJ1dGVdIDogc3RhdGVFbnRpdHkuc3RhdGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBtYXRjaGVkQ29uZGl0aW9ucz8ubGVuZ3RoID4gMDsgICAgICAgIFxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBoaWRlSWZFbnRpdHkgPSAoZW50aXR5OiBSb29tQ2FyZEVudGl0eSwgaGFzczogSG9tZUFzc2lzdGFudCwgZW50aXR5U3RhdGU/OiBIb21lQXNzaXN0YW50RW50aXR5KSA9PiB7XG4gICAgaWYgKGhpZGVVbmF2YWlsYWJsZShlbnRpdHksIGVudGl0eVN0YXRlKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKGVudGl0eS5oaWRlX2lmID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmICg8SGlkZUlmQ29uZmlnPmVudGl0eS5oaWRlX2lmKVxuICAgIHtcbiAgICAgICAgY29uc3QgZW50aXR5VmFsdWUgPSBlbnRpdHlTdGF0ZS5zdGF0ZTtcbiAgICAgICAgY29uc3QgbWF0Y2hlZENvbmRpdGlvbnMgPSAoZW50aXR5LmhpZGVfaWYgYXMgSGlkZUlmQ29uZmlnKS5jb25kaXRpb25zPy5maWx0ZXIoaXRlbSA9PiB7XG4gICAgXG4gICAgICAgICAgICBsZXQgY2hlY2tFbnRpdHlWYWx1ZSA9IGVudGl0eVZhbHVlO1xuICAgICAgICAgICAgaWYoaXRlbS5lbnRpdHkpIHsgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGVFbnRpdHkgPSBoYXNzLnN0YXRlc1tpdGVtLmVudGl0eV07XG4gICAgICAgICAgICAgICAgY2hlY2tFbnRpdHlWYWx1ZSA9IGl0ZW0uYXR0cmlidXRlID8gc3RhdGVFbnRpdHkuYXR0cmlidXRlc1tpdGVtLmF0dHJpYnV0ZV0gOiBzdGF0ZUVudGl0eS5zdGF0ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYoaXRlbS5hdHRyaWJ1dGUgJiYgIWl0ZW0uZW50aXR5KSB7ICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNoZWNrRW50aXR5VmFsdWUgPSBlbnRpdHlTdGF0ZS5hdHRyaWJ1dGVzW2l0ZW0uYXR0cmlidXRlXTtcbiAgICAgICAgICAgIH1cbiAgICBcbiAgICAgICAgICAgIHJldHVybiBjaGVja0NvbmRpdGlvbmFsVmFsdWUoaXRlbSwgY2hlY2tFbnRpdHlWYWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG1hdGNoZWRDb25kaXRpb25zPy5sZW5ndGggPiAwOyAgICAgICAgXG4gICAgfVxufTtcbiIsImltcG9ydCB7IENTU1Jlc3VsdCwgaHRtbCwgTGl0RWxlbWVudCwgUHJvcGVydHlWYWx1ZXMsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IHByb3BlcnR5LCBjdXN0b21FbGVtZW50IH0gZnJvbSAnbGl0L2RlY29yYXRvcnMuanMnO1xuaW1wb3J0IHsgSG9tZUFzc2lzdGFudCwgTG92ZWxhY2VDYXJkLCBMb3ZlbGFjZUNhcmRDb25maWcgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzJztcblxuaW1wb3J0IHsgY2hlY2tDb25maWcsIGVudGl0eVN0eWxlcywgcmVuZGVyRW50aXRpZXNSb3csIHJlbmRlckluZm9FbnRpdHksIHJlbmRlclJvd3MsIHJlbmRlclRpdGxlIH0gZnJvbSAnLi9lbnRpdHknO1xuaW1wb3J0IHsgZ2V0RW50aXR5SWRzLCBtYXBTdGF0ZU9iamVjdCB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBoaWRlSWZDYXJkIH0gZnJvbSAnLi9oaWRlJztcbmltcG9ydCB7IHN0eWxlIH0gZnJvbSAnLi9zdHlsZXMnO1xuaW1wb3J0IHsgSG9tZUFzc2lzdGFudEVudGl0eSwgUm9vbUNhcmRDb25maWcsIFJvb21DYXJkRW50aXR5LCBSb29tQ2FyZExvdmVsYWNlQ2FyZENvbmZpZywgUm9vbUNhcmRSb3cgfSBmcm9tICcuL3R5cGVzL3Jvb20tY2FyZC10eXBlcyc7XG5pbXBvcnQgKiBhcyBwYWNrYWdlSnNvbiBmcm9tICcuLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgSGFzc0VudGl0aWVzLCBIYXNzRW50aXR5IH0gZnJvbSAnaG9tZS1hc3Npc3RhbnQtanMtd2Vic29ja2V0L2Rpc3QvdHlwZXMnO1xuXG5jb25zb2xlLmluZm8oXG4gICAgYCVjIFJPT00tQ0FSRCAlYyAke3BhY2thZ2VKc29uLnZlcnNpb259YCxcbiAgICAnY29sb3I6IGN5YW47IGJhY2tncm91bmQ6IGJsYWNrOyBmb250LXdlaWdodDogYm9sZDsnLFxuICAgICdjb2xvcjogZGFya2JsdWU7IGJhY2tncm91bmQ6IHdoaXRlOyBmb250LXdlaWdodDogYm9sZDsnXG4pO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55ICovXG4od2luZG93IGFzIGFueSkuY3VzdG9tQ2FyZHMgPSAod2luZG93IGFzIGFueSkuY3VzdG9tQ2FyZHMgfHwgW107XG4od2luZG93IGFzIGFueSkuY3VzdG9tQ2FyZHMucHVzaCh7XG4gICAgdHlwZTogJ3Jvb20tY2FyZCcsXG4gICAgbmFtZTogJ1Jvb20gY2FyZCcsXG4gICAgcHJldmlldzogZmFsc2UsXG4gIGRlc2NyaXB0aW9uOiAnU2hvdyBtdWx0aXBsZSBlbnRpdHkgc3RhdGVzLCBhdHRyaWJ1dGVzIGFuZCBpY29ucyBpbiBhIHNpbmdsZSBjYXJkIGluIEhvbWUgQXNzaXN0YW50XFwncyBMb3ZlbGFjZSBVSScsXG59KTtcbi8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuXG5AY3VzdG9tRWxlbWVudCgncm9vbS1jYXJkJylcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvb21DYXJkIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgQHByb3BlcnR5KHsgaGFzQ2hhbmdlZDogKCkgPT4gZmFsc2UgfSkgX2hhc3M/OiBIb21lQXNzaXN0YW50O1xuICAgIEBwcm9wZXJ0eSgpIG1vbml0b3JlZFN0YXRlcz86IEhhc3NFbnRpdGllcztcbiAgICBAcHJvcGVydHkoKSBjb25maWc/OiBSb29tQ2FyZENvbmZpZztcbiAgICBAcHJvcGVydHkoKSBfaGVscGVyczogeyBjcmVhdGVDYXJkRWxlbWVudChjb25maWc6IExvdmVsYWNlQ2FyZENvbmZpZyk6IExvdmVsYWNlQ2FyZCB9XG5cbiAgICBwcml2YXRlIF9lbnRpdHlDYXJkczogeyBba2V5OiBzdHJpbmddOiB7IGNhcmQ/OiBMb3ZlbGFjZUNhcmQsIGNvbmZpZzogUm9vbUNhcmRMb3ZlbGFjZUNhcmRDb25maWcsIGluZGV4OiBudW1iZXIgfVtdfSA9IHt9O1xuXG4gICAgZ2V0Q2hpbGRDdXN0b21DYXJkVHlwZXMoY2FyZHM6IFJvb21DYXJkTG92ZWxhY2VDYXJkQ29uZmlnW10sIHRhcmdldDogU2V0PHN0cmluZz4pIHtcbiAgICAgICAgaWYgKCFjYXJkcykgcmV0dXJuOyAgICAgICAgXG5cbiAgICAgICAgZm9yIChjb25zdCBjYXJkIG9mIGNhcmRzKSB7XG4gICAgICAgICAgICBpZiAoY2FyZC50eXBlLmluZGV4T2YoJ2N1c3RvbTonKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHRhcmdldC5hZGQoY2FyZC50eXBlLnN1YnN0cmluZyg3LCBjYXJkLnR5cGUubGVuZ3RoKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmdldENoaWxkQ3VzdG9tQ2FyZFR5cGVzKGNhcmQuY2FyZHMsIHRhcmdldClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFzeW5jIHdhaXRGb3JEZXBlbmRlbnRDb21wb25lbnRzKGNvbmZpZzogUm9vbUNhcmRDb25maWcpIHtcbiAgICAgICAgY29uc3QgZGlzdGluY3RUeXBlcyA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICAgICAgICB0aGlzLmdldENoaWxkQ3VzdG9tQ2FyZFR5cGVzKGNvbmZpZy5jYXJkcywgZGlzdGluY3RUeXBlcyk7ICAgICAgICBcbiAgICAgICAgYXdhaXQgUHJvbWlzZS5hbGwoQXJyYXkuZnJvbShkaXN0aW5jdFR5cGVzKS5tYXAodHlwZSA9PiBjdXN0b21FbGVtZW50cy53aGVuRGVmaW5lZCh0eXBlKSkpO1xuICAgIH1cblxuICAgIGFzeW5jIHNldENvbmZpZyhjb25maWc6IFJvb21DYXJkQ29uZmlnKSB7XG4gICAgICAgIGNoZWNrQ29uZmlnKGNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGVudGl0eUlkcyA9IGdldEVudGl0eUlkcyhjb25maWcpO1xuICAgICAgICAvL2NvbnN0IGNvbXBhcmUgPSB0aGlzLmZpbmRFbnRpdHlJZHNJbkNhcmQoY29uZmlnLmNhcmRzKVxuXG4gICAgICAgIHRoaXMuY29uZmlnID0geyAuLi5jb25maWcsIGVudGl0eUlkczogZW50aXR5SWRzIH07XG5cbiAgICAgICAgYXdhaXQgdGhpcy53YWl0Rm9yRGVwZW5kZW50Q29tcG9uZW50cyhjb25maWcpO1xuXG4gICAgICAgIC8qIGVzbGludC1kaXNhYmxlIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbiAgICAgICAgdGhpcy5faGVscGVycyA9IGF3YWl0ICh3aW5kb3cgYXMgYW55KS5sb2FkQ2FyZEhlbHBlcnMoKTtcblxuICAgICAgICAvLyB0aGlzLl9lbnRpdHlDYXJkcyA9IHt9O1xuXG4gICAgICAgIC8qIGVzbGludC1lbmFibGUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueSAqL1xuICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLl9oZWxwZXJzKTtcbiAgICAgICAgdGhpcy5jcmVhdGVDYXJkRWxlbWVudHMoKTtcbiAgICAgICAgLy8gYXdhaXQgdGhpcy5yZXF1ZXN0VXBkYXRlKCk7XG5cbiAgICAgICAgLy8gY29uc29sZS5sb2coJ2FsbCBjb21wb25lbnRzIG9ubGluZScpO1xuICAgIH1cblxuICAgIHNldCBoYXNzKGhhc3M6IEhvbWVBc3Npc3RhbnQpIHtcbiAgICAgICAgbGV0IGFueVVwZGF0ZXMgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgbmV3U3RhdGVzOiBIYXNzRW50aXRpZXMgPSB7fTtcblxuICAgICAgICBpZiAodGhpcy5tb25pdG9yZWRTdGF0ZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50aXR5SWQgb2YgdGhpcy5jb25maWcuZW50aXR5SWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGVudGl0eUlkIGluIGhhc3Muc3RhdGVzKSB7IFxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5SWQgaW4gdGhpcy5tb25pdG9yZWRTdGF0ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoYXNzLnN0YXRlc1tlbnRpdHlJZF0ubGFzdF91cGRhdGVkID4gdGhpcy5tb25pdG9yZWRTdGF0ZXNbZW50aXR5SWRdLmxhc3RfdXBkYXRlZCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc3Muc3RhdGVzW2VudGl0eUlkXS5sYXN0X2NoYW5nZWQgPiB0aGlzLm1vbml0b3JlZFN0YXRlc1tlbnRpdHlJZF0ubGFzdF9jaGFuZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW55VXBkYXRlcyA9IGhhc3Muc3RhdGVzW2VudGl0eUlkXSAhPT0gbmV3U3RhdGVzW2VudGl0eUlkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZXNbZW50aXR5SWRdID0gaGFzcy5zdGF0ZXNbZW50aXR5SWRdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYW55VXBkYXRlcyA9IGhhc3Muc3RhdGVzW2VudGl0eUlkXSAhPT0gbmV3U3RhdGVzW2VudGl0eUlkXTtcbiAgICAgICAgICAgICAgICAgICAgbmV3U3RhdGVzW2VudGl0eUlkXSA9IGhhc3Muc3RhdGVzW2VudGl0eUlkXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9ICAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgZW50aXR5SWQgb2YgdGhpcy5jb25maWcuZW50aXR5SWRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhc3Muc3RhdGVzW2VudGl0eUlkXSAhPT0gdW5kZWZpbmVkKSB7IFxuICAgICAgICAgICAgICAgICAgICBhbnlVcGRhdGVzID0gaGFzcy5zdGF0ZXNbZW50aXR5SWRdICE9PSBuZXdTdGF0ZXNbZW50aXR5SWRdO1xuICAgICAgICAgICAgICAgICAgICBuZXdTdGF0ZXNbZW50aXR5SWRdID0gaGFzcy5zdGF0ZXNbZW50aXR5SWRdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gICAgXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoYW55VXBkYXRlcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBbaywgdl0gb2YgT2JqZWN0LmVudHJpZXMobmV3U3RhdGVzKSkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGAgKyAke2t9OmAsdik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLm1vbml0b3JlZFN0YXRlcyA9IG5ld1N0YXRlcztcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9oYXNzID0gaGFzcztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2hvdWxkVXBkYXRlKGNoYW5nZWRQcm9wczogUHJvcGVydHlWYWx1ZXMpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5tb25pdG9yZWRTdGF0ZXMgIT09IHVuZGVmaW5lZCBcbiAgICAgICAgICAgICYmIHRoaXMuY29uZmlnICE9PSB1bmRlZmluZWQgXG4gICAgICAgICAgICAmJiBjaGFuZ2VkUHJvcHMuc2l6ZSA+IDBcbiAgICAgICAgICAgICYmIHRoaXMuX2hlbHBlcnMgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgJiYgdGhpcy5faGVscGVycy5jcmVhdGVDYXJkRWxlbWVudCAhPT0gdW5kZWZpbmVkO1xuXG4gICAgICAgIGNvbnNvbGUubG9nKGBzaG91bGQgdXBkYXRlPyAke3Jlc3VsdH1gLCBjaGFuZ2VkUHJvcHMpO1xuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdCB7XG4gICAgICAgIHJldHVybiBzdHlsZTtcbiAgICB9XG4gICAgXG4gICAgcmVuZGVyKCkgOiBUZW1wbGF0ZVJlc3VsdDwxPiB7XG4gICAgICAgIGNvbnN0IGVudGl0eVN0YXRlID0gdGhpcy5jb25maWcuZW50aXR5ICE9PSB1bmRlZmluZWQgPyB0aGlzLm1vbml0b3JlZFN0YXRlc1t0aGlzLmNvbmZpZy5lbnRpdHldIDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBjb25maWcgPSB0aGlzLmNvbmZpZy5lbnRpdHkgIT09IHVuZGVmaW5lZCA/IHsgLi4udGhpcy5jb25maWcsIHN0YXRlT2JqOiBlbnRpdHlTdGF0ZSB9IDogdW5kZWZpbmVkO1xuICAgICAgICBjb25zdCBpbmZvX2VudGl0aWVzID0gdGhpcy5jb25maWcuaW5mb19lbnRpdGllcz8ubWFwKGVudGl0eSA9PiBtYXBTdGF0ZU9iamVjdChlbnRpdHksIHRoaXMuX2hhc3MsIHRoaXMuY29uZmlnLCBlbnRpdHlTdGF0ZSkpID8/IFtdO1xuICAgICAgICBjb25zdCBlbnRpdGllcyA9IHRoaXMuY29uZmlnLmVudGl0aWVzPy5tYXAoZW50aXR5ID0+IG1hcFN0YXRlT2JqZWN0KGVudGl0eSwgdGhpcy5faGFzcywgdGhpcy5jb25maWcsIGVudGl0eVN0YXRlKSkgPz8gW107XG4gICAgICAgIGNvbnN0IHJvd3MgPVxuICAgICAgICAgICAgdGhpcy5jb25maWcucm93cz8ubWFwKChyb3cpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByb3dFbnRpdGllcyA9IHJvdy5lbnRpdGllcz8ubWFwKGVudGl0eSA9PiBtYXBTdGF0ZU9iamVjdChlbnRpdHksIHRoaXMuX2hhc3MsIHRoaXMuY29uZmlnLCBlbnRpdHlTdGF0ZSkpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGVudGl0aWVzOiByb3dFbnRpdGllcywgaGlkZV9pZjogcm93LmhpZGVfaWYsIGNvbnRlbnRfYWxpZ25tZW50OiByb3cuY29udGVudF9hbGlnbm1lbnQgfTtcbiAgICAgICAgICAgIH0pID8/IFtdO1xuXG4gICAgICAgIHRoaXMuY3JlYXRlQ2FyZEVsZW1lbnRzKCk7ICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIE9iamVjdC5lbnRyaWVzKHRoaXMuX2VudGl0eUNhcmRzKS5mbGF0TWFwKChbLHZhbHVlXSkgPT4gdmFsdWUpLmZvckVhY2godiA9PiB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2LmNvbmZpZylcbiAgICAgICAgfSk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IGh0bWxgPGhhLWNhcmQgZWxldmF0aW9uPVwiMlwiIHN0eWxlPVwiJHtlbnRpdHlTdHlsZXModGhpcy5jb25maWcuY2FyZF9zdHlsZXMsIGVudGl0eVN0YXRlLCB0aGlzLl9oYXNzKX1cIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FyZC1oZWFkZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgJHtyZW5kZXJUaXRsZSh0aGlzLmNvbmZpZywgdGhpcy5faGFzcywgdGhpcywgY29uZmlnLCBlbnRpdHlTdGF0ZSl9XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJlbnRpdGllcy1pbmZvLXJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgJHtpbmZvX2VudGl0aWVzLm1hcChlID0+IHJlbmRlckluZm9FbnRpdHkoZSwgdGhpcy5faGFzcywgdGhpcywgZW50aXR5U3RhdGUpKX1cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgJHtyb3dzLmxlbmd0aCA+IDAgPyBcbiAgICAgICAgICAgICAgICAgICAgcmVuZGVyUm93cyhyb3dzLCB0aGlzLl9oYXNzLCB0aGlzKSA6IFxuICAgICAgICAgICAgICAgICAgICByZW5kZXJFbnRpdGllc1Jvdyh0aGlzLmNvbmZpZywgZW50aXRpZXMsIHRoaXMuX2hhc3MsIHRoaXMpfVxuICAgICAgICAgICAgICAgICR7T2JqZWN0LmVudHJpZXModGhpcy5fZW50aXR5Q2FyZHMpLmZsYXRNYXAoKFssdmFsdWVdKSA9PiB2YWx1ZSkubWFwKHYgPT4gdi5jYXJkKX1cbiAgICAgICAgICAgIDwvaGEtY2FyZD5gO1xuXG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZ2V0Q2FyZFNpemUoKSB7XG4gICAgICAgIGNvbnN0IG51bWJlck9mQ2FyZHMgPSB0aGlzLmNvbmZpZy5jYXJkcyA/IHRoaXMuY29uZmlnLmNhcmRzLmxlbmd0aCA6IDA7XG4gICAgICAgIGNvbnN0IG51bWJlck9mUm93cyA9IHRoaXMuY29uZmlnLnJvd3MgPyB0aGlzLmNvbmZpZy5yb3dzLmxlbmd0aCA6IDA7XG4gICAgICAgIGNvbnN0IG1haW5TaXplID0gIXRoaXMuY29uZmlnLmluZm9fZW50aXRpZXMgJiYgdGhpcy5jb25maWcuaGlkZV90aXRsZSA/IDEgOiAyO1xuXG4gICAgICAgIHJldHVybiBudW1iZXJPZkNhcmRzICsgbnVtYmVyT2ZSb3dzICsgKHRoaXMuY29uZmlnLmVudGl0aWVzID8gdGhpcy5jb25maWcuZW50aXRpZXMubGVuZ3RoID4gMCA/IDEgOiAwIDogMCkgKyBtYWluU2l6ZTtcbiAgICB9XG5cbiAgICAqIGZpbmRWYWwob2JqZWN0OiB7IFtrOnN0cmluZ106IHVua25vd24gfSwga2V5OiBzdHJpbmcpOiBHZW5lcmF0b3I8c3RyaW5nPiB7XG4gICAgICAgIGZvciAoY29uc3QgW2ssIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhvYmplY3QpKSB7XG4gICAgICAgICAgICBpZiAoayA9PT0ga2V5KSB7XG4gICAgICAgICAgICAgICAgeWllbGQgdmFsdWUgYXMgc3RyaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9iamVjdFtrXSAmJiB0eXBlb2Ygb2JqZWN0W2tdID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLmZpbmRWYWwob2JqZWN0W2tdIGFzIHsgW2trOiBzdHJpbmddOiB1bmtub3duIH0sIGtleSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDYXJkRWxlbWVudHMoKSB7XG4gICAgICAgIHRoaXMuX2VudGl0eUNhcmRzID0ge307XG4gICAgICAgIGlmICghdGhpcy5jb25maWcuY2FyZHMpIHJldHVybjtcblxuICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgIGZvciAoY29uc3QgY2FyZENvbmZpZyBvZiB0aGlzLmNvbmZpZy5jYXJkcylcbiAgICAgICAge1xuICAgICAgICAgICAgY29uc3QgbG92ZWxhY2VDYXJkID0gdGhpcy5jcmVhdGVDYXJkRWxlbWVudChjYXJkQ29uZmlnLCB0aGlzLl9oYXNzKTtcbiAgICAgICAgICAgIC8vIGNvbnN0IGVudGl0eUlkcyA9IHRoaXMuZmluZEVudGl0eUlkc0luQ2FyZChjYXJkQ29uZmlnKTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBlbnRpdHlJZCBvZiB0aGlzLmNvbmZpZy5lbnRpdHlJZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShlbnRpdHlJZCBpbiB0aGlzLl9lbnRpdHlDYXJkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZW50aXR5Q2FyZHNbZW50aXR5SWRdID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRoaXMuX2VudGl0eUNhcmRzW2VudGl0eUlkXS5wdXNoKHsgY29uZmlnOiBjYXJkQ29uZmlnLCBjYXJkOiBsb3ZlbGFjZUNhcmQsIGluZGV4OiBpIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjcmVhdGVDYXJkRWxlbWVudChjb25maWc6IFJvb21DYXJkTG92ZWxhY2VDYXJkQ29uZmlnLCBoYXNzOiBIb21lQXNzaXN0YW50KSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGhpZGVJZkNhcmQoY29uZmlnLCBoYXNzKSB8fFxuICAgICAgICAgICAgKGNvbmZpZy5zaG93X3N0YXRlcyAmJiAhY29uZmlnLnNob3dfc3RhdGVzLmluY2x1ZGVzKGhhc3Muc3RhdGVzW2NvbmZpZy5lbnRpdHldLnN0YXRlKSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygnc2tpcHBpbmcnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgZWxlbWVudDogTG92ZWxhY2VDYXJkID0gdGhpcy5faGVscGVycy5jcmVhdGVDYXJkRWxlbWVudChjb25maWcpO1xuICAgICAgICBlbGVtZW50Lmhhc3MgPSBoYXNzO1xuICAgICAgICBlbGVtZW50LnN0eWxlLmJveFNoYWRvdyA9ICdub25lJztcbiAgICAgICAgZWxlbWVudC5zdHlsZS5ib3JkZXJSYWRpdXMgPSAnMCc7XG5cbiAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxufVxuIiwiLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vaG9tZS1hc3Npc3RhbnQvZnJvbnRlbmQvYmxvYi9kZXYvc3JjL2NvbW1vbi9lbnRpdHkvY29tcHV0ZV9zdGF0ZV9kaXNwbGF5LnRzXG5cbmltcG9ydCB7IFVOQVZBSUxBQkxFLCBVTktOT1dOIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZSB9IGZyb20gJy4vZm9ybWF0X2RhdGUnO1xuaW1wb3J0IHsgZm9ybWF0RGF0ZVRpbWUgfSBmcm9tICcuL2Zvcm1hdF9kYXRlX3RpbWUnO1xuaW1wb3J0IHsgZm9ybWF0VGltZSB9IGZyb20gJy4vZm9ybWF0X3RpbWUnO1xuaW1wb3J0IHsgZm9ybWF0TnVtYmVyLCBpc051bWVyaWNTdGF0ZSB9IGZyb20gJy4vZm9ybWF0X251bWJlcic7XG5pbXBvcnQgeyBIb21lQXNzaXN0YW50RW50aXR5IH0gZnJvbSAnLi4vdHlwZXMvcm9vbS1jYXJkLXR5cGVzJztcbmltcG9ydCB7IEZyb250ZW5kTG9jYWxlRGF0YSwgTG9jYWxpemVGdW5jIH0gZnJvbSAnY3VzdG9tLWNhcmQtaGVscGVycyc7XG5cbmV4cG9ydCBjb25zdCBjb21wdXRlU3RhdGVEb21haW4gPSAoc3RhdGVPYmo6IEhvbWVBc3Npc3RhbnRFbnRpdHkpID0+IHN0YXRlT2JqLmVudGl0eV9pZC5zdWJzdHIoMCwgc3RhdGVPYmouZW50aXR5X2lkLmluZGV4T2YoJy4nKSk7XG5cbmV4cG9ydCBjb25zdCBjb21wdXRlU3RhdGVEaXNwbGF5ID0gKGxvY2FsaXplOiBMb2NhbGl6ZUZ1bmMsIHN0YXRlT2JqOiBIb21lQXNzaXN0YW50RW50aXR5LCBsb2NhbGU6IEZyb250ZW5kTG9jYWxlRGF0YSwgc3RhdGU/OiBzdHJpbmcpID0+IHtcbiAgICBjb25zdCBjb21wYXJlU3RhdGUgPSBzdGF0ZSAhPT0gdW5kZWZpbmVkID8gc3RhdGUgOiBzdGF0ZU9iai5zdGF0ZTtcblxuICAgIGlmIChjb21wYXJlU3RhdGUgPT09IFVOS05PV04gfHwgY29tcGFyZVN0YXRlID09PSBVTkFWQUlMQUJMRSkge1xuICAgICAgICByZXR1cm4gbG9jYWxpemUoYHN0YXRlLmRlZmF1bHQuJHtjb21wYXJlU3RhdGV9YCk7XG4gICAgfVxuXG4gICAgLy8gRW50aXRpZXMgd2l0aCBhIGB1bml0X29mX21lYXN1cmVtZW50YCBvciBgc3RhdGVfY2xhc3NgIGFyZSBudW1lcmljIHZhbHVlcyBhbmQgc2hvdWxkIHVzZSBgZm9ybWF0TnVtYmVyYFxuICAgIGlmIChpc051bWVyaWNTdGF0ZShzdGF0ZU9iaikpIHtcbiAgICAgICAgaWYgKHN0YXRlT2JqLmF0dHJpYnV0ZXMuZGV2aWNlX2NsYXNzID09PSAnbW9uZXRhcnknKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXROdW1iZXIoY29tcGFyZVN0YXRlLCBsb2NhbGUsIHtcbiAgICAgICAgICAgICAgICAgICAgc3R5bGU6ICdjdXJyZW5jeScsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBzdGF0ZU9iai5hdHRyaWJ1dGVzLnVuaXRfb2ZfbWVhc3VyZW1lbnQsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGNhdGNoIChfZXJyKSB7XG4gICAgICAgICAgICAgICAgLy8gZmFsbGJhY2sgdG8gZGVmYXVsdFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtmb3JtYXROdW1iZXIoY29tcGFyZVN0YXRlLCBsb2NhbGUpfSR7XG4gICAgICAgICAgICBzdGF0ZU9iai5hdHRyaWJ1dGVzLnVuaXRfb2ZfbWVhc3VyZW1lbnQgPyAnICcgKyBzdGF0ZU9iai5hdHRyaWJ1dGVzLnVuaXRfb2ZfbWVhc3VyZW1lbnQgOiAnJ1xuICAgICAgICB9YDtcbiAgICB9XG5cbiAgICBjb25zdCBkb21haW4gPSBjb21wdXRlU3RhdGVEb21haW4oc3RhdGVPYmopO1xuXG4gICAgaWYgKGRvbWFpbiA9PT0gJ2lucHV0X2RhdGV0aW1lJykge1xuICAgICAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgLy8gSWYgdHJ5aW5nIHRvIGRpc3BsYXkgYW4gZXhwbGljaXQgc3RhdGUsIG5lZWQgdG8gcGFyc2UgdGhlIGV4cGxpY3Qgc3RhdGUgdG8gYERhdGVgIHRoZW4gZm9ybWF0LlxuICAgICAgICAgICAgLy8gQXR0cmlidXRlcyBhcmVuJ3QgYXZhaWxhYmxlLCB3ZSBoYXZlIHRvIHVzZSBgc3RhdGVgLlxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBjb21wb25lbnRzID0gc3RhdGUuc3BsaXQoJyAnKTtcbiAgICAgICAgICAgICAgICBpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRGF0ZSBhbmQgdGltZS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdERhdGVUaW1lKG5ldyBEYXRlKGNvbXBvbmVudHMuam9pbignVCcpKSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbXBvbmVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZS5pbmNsdWRlcygnLScpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEYXRlIG9ubHkuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZShuZXcgRGF0ZShgJHtzdGF0ZX1UMDA6MDBgKSwgbG9jYWxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAoc3RhdGUuaW5jbHVkZXMoJzonKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGltZSBvbmx5LlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm93ID0gbmV3IERhdGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXRUaW1lKG5ldyBEYXRlKGAke25vdy50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF19VCR7c3RhdGV9YCksIGxvY2FsZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgfSBjYXRjaCAoX2UpIHtcbiAgICAgICAgICAgICAgICAvLyBGb3JtYXR0aW5nIG1ldGhvZHMgbWF5IHRocm93IGVycm9yIGlmIGRhdGUgcGFyc2luZyBkb2Vzbid0IGdvIHdlbGwsXG4gICAgICAgICAgICAgICAgLy8ganVzdCByZXR1cm4gdGhlIHN0YXRlIHN0cmluZyBpbiB0aGF0IGNhc2UuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gSWYgbm90IHRyeWluZyB0byBkaXNwbGF5IGFuIGV4cGxpY2l0IHN0YXRlLCBjcmVhdGUgYERhdGVgIG9iamVjdCBmcm9tIGBzdGF0ZU9iamAncyBhdHRyaWJ1dGVzIHRoZW4gZm9ybWF0LlxuICAgICAgICAgICAgbGV0IGRhdGU7XG4gICAgICAgICAgICBpZiAoc3RhdGVPYmouYXR0cmlidXRlcy5oYXNfZGF0ZSAmJiBzdGF0ZU9iai5hdHRyaWJ1dGVzLmhhc190aW1lKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZU9iai5hdHRyaWJ1dGVzLnllYXIsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqLmF0dHJpYnV0ZXMubW9udGggLSAxLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZU9iai5hdHRyaWJ1dGVzLmRheSxcbiAgICAgICAgICAgICAgICAgICAgc3RhdGVPYmouYXR0cmlidXRlcy5ob3VyLFxuICAgICAgICAgICAgICAgICAgICBzdGF0ZU9iai5hdHRyaWJ1dGVzLm1pbnV0ZVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdERhdGVUaW1lKGRhdGUsIGxvY2FsZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGVPYmouYXR0cmlidXRlcy5oYXNfZGF0ZSkge1xuICAgICAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShzdGF0ZU9iai5hdHRyaWJ1dGVzLnllYXIsIHN0YXRlT2JqLmF0dHJpYnV0ZXMubW9udGggLSAxLCBzdGF0ZU9iai5hdHRyaWJ1dGVzLmRheSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdERhdGUoZGF0ZSwgbG9jYWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzdGF0ZU9iai5hdHRyaWJ1dGVzLmhhc190aW1lKSB7XG4gICAgICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRIb3VycyhzdGF0ZU9iai5hdHRyaWJ1dGVzLmhvdXIsIHN0YXRlT2JqLmF0dHJpYnV0ZXMubWludXRlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0VGltZShkYXRlLCBsb2NhbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlT2JqLnN0YXRlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRvbWFpbiA9PT0gJ2h1bWlkaWZpZXInKSB7XG4gICAgICAgIGlmIChjb21wYXJlU3RhdGUgPT09ICdvbicgJiYgc3RhdGVPYmouYXR0cmlidXRlcy5odW1pZGl0eSkge1xuICAgICAgICAgICAgcmV0dXJuIGAke3N0YXRlT2JqLmF0dHJpYnV0ZXMuaHVtaWRpdHl9ICVgO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYGNvdW50ZXJgIGBudW1iZXJgIGFuZCBgaW5wdXRfbnVtYmVyYCBkb21haW5zIGRvIG5vdCBoYXZlIGEgdW5pdCBvZiBtZWFzdXJlbWVudCBidXQgc2hvdWxkIHN0aWxsIHVzZSBgZm9ybWF0TnVtYmVyYFxuICAgIGlmIChkb21haW4gPT09ICdjb3VudGVyJyB8fCBkb21haW4gPT09ICdudW1iZXInIHx8IGRvbWFpbiA9PT0gJ2lucHV0X251bWJlcicpIHtcbiAgICAgICAgcmV0dXJuIGZvcm1hdE51bWJlcihjb21wYXJlU3RhdGUsIGxvY2FsZSk7XG4gICAgfVxuXG4gICAgLy8gc3RhdGUgb2YgYnV0dG9uIGlzIGEgdGltZXN0YW1wXG4gICAgaWYgKGRvbWFpbiA9PT0gJ2J1dHRvbicgfHwgKGRvbWFpbiA9PT0gJ3NlbnNvcicgJiYgc3RhdGVPYmouYXR0cmlidXRlcy5kZXZpY2VfY2xhc3MgPT09ICd0aW1lc3RhbXAnKSkge1xuICAgICAgICByZXR1cm4gZm9ybWF0RGF0ZVRpbWUobmV3IERhdGUoY29tcGFyZVN0YXRlKSwgbG9jYWxlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICAvLyBSZXR1cm4gZGV2aWNlIGNsYXNzIHRyYW5zbGF0aW9uXG4gICAgICAgIChzdGF0ZU9iai5hdHRyaWJ1dGVzLmRldmljZV9jbGFzcyAmJlxuICAgICAgICAgICAgbG9jYWxpemUoYGNvbXBvbmVudC4ke2RvbWFpbn0uc3RhdGUuJHtzdGF0ZU9iai5hdHRyaWJ1dGVzLmRldmljZV9jbGFzc30uJHtjb21wYXJlU3RhdGV9YCkpIHx8XG4gICAgICAgIC8vIFJldHVybiBkZWZhdWx0IHRyYW5zbGF0aW9uXG4gICAgICAgIGxvY2FsaXplKGBjb21wb25lbnQuJHtkb21haW59LnN0YXRlLl8uJHtjb21wYXJlU3RhdGV9YCkgfHxcbiAgICAgICAgLy8gV2UgZG9uJ3Qga25vdyEgUmV0dXJuIHRoZSByYXcgc3RhdGUuXG4gICAgICAgIGNvbXBhcmVTdGF0ZVxuICAgICk7XG59O1xuIiwiLy8gU291cmNlOlxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2hvbWUtYXNzaXN0YW50L2Zyb250ZW5kL2Jsb2IvZGV2L3NyYy9kYXRhL2VudGl0eS50c1xuLy8gaHR0cHM6Ly9naXRodWIuY29tL2hvbWUtYXNzaXN0YW50L2Zyb250ZW5kL2Jsb2IvZGV2L3NyYy9kYXRhL3RyYW5zbGF0aW9uLnRzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vaG9tZS1hc3Npc3RhbnQvZnJvbnRlbmQvYmxvYi9kZXYvc3JjL3BhbmVscy9sb3ZlbGFjZS9jYXJkcy90eXBlcy50c1xuXG5leHBvcnQgY29uc3QgVU5BVkFJTEFCTEUgPSAndW5hdmFpbGFibGUnO1xuZXhwb3J0IGNvbnN0IFVOS05PV04gPSAndW5rbm93bic7XG5leHBvcnQgY29uc3QgVU5BVkFJTEFCTEVfU1RBVEVTID0gW1VOQVZBSUxBQkxFLCBVTktOT1dOXTtcblxuZXhwb3J0IGNvbnN0IExBU1RfQ0hBTkdFRCA9ICdsYXN0LWNoYW5nZWQnO1xuZXhwb3J0IGNvbnN0IExBU1RfVVBEQVRFRCA9ICdsYXN0LXVwZGF0ZWQnO1xuXG5leHBvcnQgY29uc3QgVElNRVNUQU1QX0ZPUk1BVFMgPSBbJ3JlbGF0aXZlJywgJ3RvdGFsJywgJ2RhdGUnLCAndGltZScsICdkYXRldGltZSddO1xuXG5leHBvcnQgY29uc3QgU0VDT05EQVJZX0lORk9fVkFMVUVTID0gW1xuICAgICdlbnRpdHktaWQnLFxuICAgICdsYXN0LWNoYW5nZWQnLFxuICAgICdsYXN0LXVwZGF0ZWQnLFxuICAgICdsYXN0LXRyaWdnZXJlZCcsXG4gICAgJ3Bvc2l0aW9uJyxcbiAgICAndGlsdC1wb3NpdGlvbicsXG4gICAgJ2JyaWdodG5lc3MnLFxuXTtcblxuZXhwb3J0IGNvbnN0IE51bWJlckZvcm1hdCA9IHtcbiAgICBsYW5ndWFnZTogJ2xhbmd1YWdlJyxcbiAgICBzeXN0ZW06ICdzeXN0ZW0nLFxuICAgIGNvbW1hX2RlY2ltYWw6ICdjb21tYV9kZWNpbWFsJyxcbiAgICBkZWNpbWFsX2NvbW1hOiAnZGVjaW1hbF9jb21tYScsXG4gICAgc3BhY2VfY29tbWE6ICdzcGFjZV9jb21tYScsXG4gICAgbm9uZTogJ25vbmUnLFxufTtcblxuZXhwb3J0IGNvbnN0IFRpbWVGb3JtYXQgPSB7XG4gICAgbGFuZ3VhZ2U6ICdsYW5ndWFnZScsXG4gICAgc3lzdGVtOiAnc3lzdGVtJyxcbiAgICBhbV9wbTogJzEyJyxcbiAgICB0d2VudHlfZm91cjogJzI0Jyxcbn07XG4iLCIvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9ob21lLWFzc2lzdGFudC9mcm9udGVuZC9ibG9iL2Rldi9zcmMvY29tbW9uL2RhdGV0aW1lL2Zvcm1hdF9kYXRlLnRzXG5pbXBvcnQgeyBGcm9udGVuZExvY2FsZURhdGEgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzJztcblxuZXhwb3J0IGNvbnN0IGZvcm1hdERhdGUgPSAoZGF0ZU9iajogRGF0ZSwgbG9jYWxlOiBGcm9udGVuZExvY2FsZURhdGEpID0+IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZS5sYW5ndWFnZSwge1xuICAgIHllYXI6ICdudW1lcmljJyxcbiAgICBtb250aDogJ2xvbmcnLFxuICAgIGRheTogJ251bWVyaWMnLFxufSkuZm9ybWF0KGRhdGVPYmopO1xuIiwiLy8gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vaG9tZS1hc3Npc3RhbnQvZnJvbnRlbmQvYmxvYi9kZXYvc3JjL2NvbW1vbi9kYXRldGltZS9mb3JtYXRfZGF0ZV90aW1lLnRzXG5cbmltcG9ydCB7IEZyb250ZW5kTG9jYWxlRGF0YSB9IGZyb20gJ2N1c3RvbS1jYXJkLWhlbHBlcnMnO1xuaW1wb3J0IHsgdXNlQW1QbSB9IGZyb20gJy4vdXNlX2FtX3BtJztcblxuZXhwb3J0IGNvbnN0IGZvcm1hdERhdGVUaW1lID0gKGRhdGVPYmo6IERhdGUsIGxvY2FsZTogRnJvbnRlbmRMb2NhbGVEYXRhKSA9PiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUubGFuZ3VhZ2UsIHtcbiAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgbW9udGg6ICdsb25nJyxcbiAgICBkYXk6ICdudW1lcmljJyxcbiAgICBob3VyOiB1c2VBbVBtKGxvY2FsZSkgPyAnbnVtZXJpYycgOiAnMi1kaWdpdCcsXG4gICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgaG91cjEyOiB1c2VBbVBtKGxvY2FsZSlcbn0pLmZvcm1hdChkYXRlT2JqKTtcbiIsIi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2hvbWUtYXNzaXN0YW50L2Zyb250ZW5kL2Jsb2IvZGV2L3NyYy9jb21tb24vbnVtYmVyL2Zvcm1hdF9udW1iZXIudHNcblxuaW1wb3J0IHsgRnJvbnRlbmRMb2NhbGVEYXRhIH0gZnJvbSAnY3VzdG9tLWNhcmQtaGVscGVycyc7XG5pbXBvcnQgeyBGb3JtYXR0aW5nT3B0aW9ucywgSG9tZUFzc2lzdGFudEVudGl0eSB9IGZyb20gJy4uL3R5cGVzL3Jvb20tY2FyZC10eXBlcyc7XG5pbXBvcnQgeyBOdW1iZXJGb3JtYXQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCByb3VuZCA9ICh2YWx1ZT86IG51bWJlciwgcHJlY2lzaW9uID0gMikgPT4gTWF0aC5yb3VuZCh2YWx1ZSAqIDEwICoqIHByZWNpc2lvbikgLyAxMCAqKiBwcmVjaXNpb247XG5cbmV4cG9ydCBjb25zdCBpc051bWVyaWNTdGF0ZSA9IChzdGF0ZU9iajogSG9tZUFzc2lzdGFudEVudGl0eSkgPT5cbiAgICAhIXN0YXRlT2JqLmF0dHJpYnV0ZXMudW5pdF9vZl9tZWFzdXJlbWVudCB8fCAhIXN0YXRlT2JqLmF0dHJpYnV0ZXMuc3RhdGVfY2xhc3M7XG5cbmV4cG9ydCBjb25zdCBudW1iZXJGb3JtYXRUb0xvY2FsZSA9IChsb2NhbGVPcHRpb25zOiBGcm9udGVuZExvY2FsZURhdGEpID0+IHtcbiAgICBzd2l0Y2ggKGxvY2FsZU9wdGlvbnMubnVtYmVyX2Zvcm1hdCkge1xuICAgICAgICBjYXNlIE51bWJlckZvcm1hdC5jb21tYV9kZWNpbWFsOlxuICAgICAgICAgICAgcmV0dXJuIFsnZW4tVVMnLCAnZW4nXTsgLy8gVXNlIFVuaXRlZCBTdGF0ZXMgd2l0aCBmYWxsYmFjayB0byBFbmdsaXNoIGZvcm1hdHRpbmcgMSwyMzQsNTY3Ljg5XG4gICAgICAgIGNhc2UgTnVtYmVyRm9ybWF0LmRlY2ltYWxfY29tbWE6XG4gICAgICAgICAgICByZXR1cm4gWydkZScsICdlcycsICdpdCddOyAvLyBVc2UgR2VybWFuIHdpdGggZmFsbGJhY2sgdG8gU3BhbmlzaCB0aGVuIEl0YWxpYW4gZm9ybWF0dGluZyAxLjIzNC41NjcsODlcbiAgICAgICAgY2FzZSBOdW1iZXJGb3JtYXQuc3BhY2VfY29tbWE6XG4gICAgICAgICAgICByZXR1cm4gWydmcicsICdzdicsICdjcyddOyAvLyBVc2UgRnJlbmNoIHdpdGggZmFsbGJhY2sgdG8gU3dlZGlzaCBhbmQgQ3plY2ggZm9ybWF0dGluZyAxIDIzNCA1NjcsODlcbiAgICAgICAgY2FzZSBOdW1iZXJGb3JtYXQuc3lzdGVtOlxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVPcHRpb25zLmxhbmd1YWdlO1xuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBmb3JtYXROdW1iZXIgPSAobnVtOiBzdHJpbmcgfCBudW1iZXIsIGxvY2FsZU9wdGlvbnM/OiBGcm9udGVuZExvY2FsZURhdGEsIG9wdGlvbnM/OiBGb3JtYXR0aW5nT3B0aW9ucykgPT4ge1xuICAgIGNvbnN0IGxvY2FsZSA9IGxvY2FsZU9wdGlvbnMgPyBudW1iZXJGb3JtYXRUb0xvY2FsZShsb2NhbGVPcHRpb25zKSA6IHVuZGVmaW5lZDtcblxuICAgIGlmIChsb2NhbGVPcHRpb25zPy5udW1iZXJfZm9ybWF0ICE9PSBOdW1iZXJGb3JtYXQubm9uZSAmJiAhTnVtYmVyLmlzTmFOKE51bWJlcihudW0pKSAmJiBJbnRsKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KGxvY2FsZSwgZ2V0RGVmYXVsdEZvcm1hdE9wdGlvbnMobnVtLCBvcHRpb25zKSkuZm9ybWF0KE51bWJlcihudW0pKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAvLyBEb24ndCBmYWlsIHdoZW4gdXNpbmcgXCJURVNUXCIgbGFuZ3VhZ2VcbiAgICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KHVuZGVmaW5lZCwgZ2V0RGVmYXVsdEZvcm1hdE9wdGlvbnMobnVtLCBvcHRpb25zKSkuZm9ybWF0KE51bWJlcihudW0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcmV0dXJuIG51bTtcbiAgICB9XG4gICAgcmV0dXJuIGAke3JvdW5kKG51bSwgb3B0aW9ucz8ubWF4aW11bUZyYWN0aW9uRGlnaXRzKS50b1N0cmluZygpfSR7XG4gICAgICAgIG9wdGlvbnM/LnN0eWxlID09PSAnY3VycmVuY3knID8gYCAke29wdGlvbnMuY3VycmVuY3l9YCA6ICcnXG4gICAgfWA7XG59O1xuXG5jb25zdCBnZXREZWZhdWx0Rm9ybWF0T3B0aW9ucyA9IChudW06IHN0cmluZyB8IG51bWJlciwgb3B0aW9uczogRm9ybWF0dGluZ09wdGlvbnMpID0+IHtcbiAgICBjb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICAgICAgbWF4aW11bUZyYWN0aW9uRGlnaXRzOiAyLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgIH07XG5cbiAgICAvLyBpZiAodHlwZW9mIG51bSAhPT0gJ3N0cmluZycpIHtcbiAgICAvLyAgICAgcmV0dXJuIGRlZmF1bHRPcHRpb25zO1xuICAgIC8vIH1cblxuICAgIC8vIC8vIEtlZXAgZGVjaW1hbCB0cmFpbGluZyB6ZXJvcyBpZiB0aGV5IGFyZSBwcmVzZW50IGluIGEgc3RyaW5nIG51bWVyaWMgdmFsdWVcbiAgICAvLyBpZiAoIW9wdGlvbnMgfHwgKCFvcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0cyAmJiAhb3B0aW9ucy5tYXhpbXVtRnJhY3Rpb25EaWdpdHMpKSB7XG4gICAgLy8gICAgIGNvbnN0IGRpZ2l0cyA9IG51bS5pbmRleE9mKCcuJykgPiAtMSA/IG51bS5zcGxpdCgnLicpWzFdLmxlbmd0aCA6IDA7XG4gICAgLy8gICAgIGRlZmF1bHRPcHRpb25zLm1pbmltdW1GcmFjdGlvbkRpZ2l0cyA9IGRpZ2l0cztcbiAgICAvLyAgICAgZGVmYXVsdE9wdGlvbnMubWF4aW11bUZyYWN0aW9uRGlnaXRzID0gZGlnaXRzO1xuICAgIC8vIH1cblxuICAgIHJldHVybiBkZWZhdWx0T3B0aW9ucztcbn07XG4iLCIvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9ob21lLWFzc2lzdGFudC9mcm9udGVuZC9ibG9iL2Rldi9zcmMvY29tbW9uL2RhdGV0aW1lL2Zvcm1hdF90aW1lLnRzXG5pbXBvcnQgeyBGcm9udGVuZExvY2FsZURhdGEgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzJztcbmltcG9ydCB7IHVzZUFtUG0gfSBmcm9tICcuL3VzZV9hbV9wbSc7XG5cbmV4cG9ydCBjb25zdCBmb3JtYXRUaW1lID0gKGRhdGVPYmo6IERhdGUsIGxvY2FsZTogRnJvbnRlbmRMb2NhbGVEYXRhKSA9PiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUubGFuZ3VhZ2UsIHtcbiAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgbWludXRlOiAnMi1kaWdpdCcsXG4gICAgaG91cjEyOiB1c2VBbVBtKGxvY2FsZSksXG59KS5mb3JtYXQoZGF0ZU9iaik7XG4iLCIvLyBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9ob21lLWFzc2lzdGFudC9mcm9udGVuZC9ibG9iL2Rldi9zcmMvY29tbW9uL2RhdGV0aW1lL3NlY29uZHNfdG9fZHVyYXRpb24udHNcblxuY29uc3QgbGVmdFBhZCA9IChudW06IG51bWJlcikgPT4gKG51bSA8IDEwID8gYDAke251bX1gIDogbnVtKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNlY29uZHNUb0R1cmF0aW9uKGQ6IG51bWJlcikge1xuICAgIGNvbnN0IGggPSBNYXRoLmZsb29yKGQgLyAzNjAwKTtcbiAgICBjb25zdCBtID0gTWF0aC5mbG9vcigoZCAlIDM2MDApIC8gNjApO1xuICAgIGNvbnN0IHMgPSBNYXRoLmZsb29yKChkICUgMzYwMCkgJSA2MCk7XG5cbiAgICBpZiAoaCA+IDApIHtcbiAgICAgICAgcmV0dXJuIGAke2h9OiR7bGVmdFBhZChtKX06JHtsZWZ0UGFkKHMpfWA7XG4gICAgfVxuICAgIGlmIChtID4gMCkge1xuICAgICAgICByZXR1cm4gYCR7bX06JHtsZWZ0UGFkKHMpfWA7XG4gICAgfVxuICAgIGlmIChzID4gMCkge1xuICAgICAgICByZXR1cm4gJycgKyBzO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbiIsIi8vIFNvdXJjZTogaHR0cHM6Ly9naXRodWIuY29tL2hvbWUtYXNzaXN0YW50L2Zyb250ZW5kL2Jsb2IvZGV2L3NyYy9jb21tb24vZGF0ZXRpbWUvdXNlX2FtX3BtLnRzXG5pbXBvcnQgeyBGcm9udGVuZExvY2FsZURhdGEgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzJztcbmltcG9ydCB7IFRpbWVGb3JtYXQgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5cbmV4cG9ydCBjb25zdCB1c2VBbVBtID0gKGxvY2FsZTogRnJvbnRlbmRMb2NhbGVEYXRhKSA9PiB7XG4gICAgaWYgKGxvY2FsZS50aW1lX2Zvcm1hdCA9PT0gVGltZUZvcm1hdC5sYW5ndWFnZSB8fCBsb2NhbGUudGltZV9mb3JtYXQgPT09IFRpbWVGb3JtYXQuc3lzdGVtKSB7XG4gICAgICAgIGNvbnN0IHRlc3RMYW5ndWFnZSA9IGxvY2FsZS50aW1lX2Zvcm1hdCA9PT0gVGltZUZvcm1hdC5sYW5ndWFnZSA/IGxvY2FsZS5sYW5ndWFnZSA6IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgdGVzdCA9IG5ldyBEYXRlKCkudG9Mb2NhbGVTdHJpbmcodGVzdExhbmd1YWdlKTtcbiAgICAgICAgcmV0dXJuIHRlc3QuaW5jbHVkZXMoJ0FNJykgfHwgdGVzdC5pbmNsdWRlcygnUE0nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gbG9jYWxlLnRpbWVfZm9ybWF0ID09PSBUaW1lRm9ybWF0LmFtX3BtO1xufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdCc7XG5cbmV4cG9ydCBjb25zdCBzdHlsZSA9IGNzc2BcbiAgICBoYS1jYXJkIHtcbiAgICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgICB9XG4gICAgaGEtY2FyZCAuY2FyZC1oZWFkZXIge1xuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMHB4O1xuICAgIH1cbiAgICAuaWNvbi1zbWFsbCB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICB9XG4gICAgLmVudGl0eSB7XG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICAuZW50aXR5IHNwYW4ge1xuICAgICAgICBmb250LXNpemU6IDEwcHg7XG4gICAgfVxuICAgIC5lbnRpdGllcy1yb3cge1xuICAgICAgICBmbGV4LWRpcmVjdGlvbjogcm93O1xuICAgICAgICBmbGV4LXdyYXA6IHdyYXA7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICBwYWRkaW5nOiAwIDIwcHggMTBweCAyMHB4O1xuICAgIH1cbiAgICAuZW50aXRpZXMtcm93IC5lbnRpdHkge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDE2cHg7XG4gICAgfSAgICBcbiAgICAuZW50aXRpZXMtcm93IC5lbnRpdHk6bGFzdC1vZi10eXBlLFxuICAgIC5lbnRpdGllcy1pbmZvLXJvdyAuZW50aXR5Omxhc3Qtb2YtdHlwZSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMDtcbiAgICB9XG4gICAgLmVudGl0aWVzLWNvbHVtbiB7XG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBmbGV4LWVuZDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1ldmVubHk7XG4gICAgfVxuICAgIC5lbnRpdGllcy1jb2x1bW4gLmVudGl0eSBkaXYge1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgfVxuXG4gICAgLmVudGl0aWVzLWluZm8tcm93IHtcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IHJvdztcbiAgICAgICAgZmxleC13cmFwOiB3cmFwO1xuICAgICAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgICAgIHBhZGRpbmc6IDAgMjBweCAxMHB4IDIwcHg7XG4gICAgICAgIGZvbnQtc2l6ZTogMTJweDtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICByaWdodDogMjBweDtcbiAgICAgICAgdG9wOiAxNXB4O1xuICAgIH1cbiAgICAuZW50aXRpZXMtaW5mby1yb3cgLmVudGl0eSB7XG4gICAgICAgIG1hcmdpbi1yaWdodDogMTZweDtcbiAgICB9XG4gICAgLmVudGl0aWVzLWluZm8tcm93IC5lbnRpdHkuaWNvbi1lbnRpdHkge1xuICAgICAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICB9XG4gICAgLm1haW4tc3RhdGUge1xuICAgICAgICBmbG9hdDogbGVmdDtcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xuICAgIH1cbiAgICAubWFpbi1zdGF0ZSA+IGhhLXN0YXRlLWljb24gPiBoYS1zdmctaWNvbiB7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICB9XG4gICAgLm1haW4taWNvbiB7XG4gICAgICAgIHZlcnRpY2FsLWFsaWduOiBiYXNlbGluZTtcbiAgICAgICAgZm9udC1zaXplOiAzMHB4O1xuICAgIH1cbiAgICAudGl0bGUge1xuICAgICAgICBtaW4taGVpZ2h0OiA0OHB4O1xuICAgIH1cbiAgICAuY2xpY2thYmxlIHtcbiAgICAgICAgY3Vyc29yOiBwb2ludGVyO1xuICAgIH1cbiAgICAuY29udGVudC1sZWZ0IHtcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBsZWZ0O1xuICAgIH1cbiAgICAuY29udGVudC1jZW50ZXIge1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbiAgICB9XG4gICAgLmNvbnRlbnQtcmlnaHQge1xuICAgICAgICBqdXN0aWZ5LWNvbnRlbnQ6IHJpZ2h0O1xuICAgIH1cbmA7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzICovXG5pbXBvcnQgeyBIb21lQXNzaXN0YW50IH0gZnJvbSBcImN1c3RvbS1jYXJkLWhlbHBlcnNcIjtcbmltcG9ydCB7IEhvbWVBc3Npc3RhbnRFbnRpdHksIFJvb21DYXJkQXR0cmlidXRlVGVtcGxhdGUsIFJvb21DYXJkQ29uZmlnLCBSb29tQ2FyZEVudGl0eSwgUm9vbUNhcmRJY29uIH0gZnJvbSBcIi4vdHlwZXMvcm9vbS1jYXJkLXR5cGVzXCI7XG5pbXBvcnQgeyBldmFsVGVtcGxhdGUgfSBmcm9tIFwiLi91dGlsXCI7XG5cbmV4cG9ydCBjb25zdCB0ZW1wbGF0ZVN0eWxpbmcgPSAoc3RhdGVPYmo6IEhvbWVBc3Npc3RhbnRFbnRpdHksIGNvbmZpZzogUm9vbUNhcmRFbnRpdHkgfCBSb29tQ2FyZENvbmZpZywgaGFzczogSG9tZUFzc2lzdGFudCkgOiBGdW5jdGlvbiA9PiB7XG4gICAgY29uc3QgaWNvbiA9IChjb25maWcuaWNvbiBhcyBSb29tQ2FyZEljb24pO1xuXG4gICAgcmV0dXJuIGljb24/LnRlbXBsYXRlPy5zdHlsZXMgIT09IHVuZGVmaW5lZCA/IGV2YWxUZW1wbGF0ZShoYXNzLCBzdGF0ZU9iaiwgaWNvbi50ZW1wbGF0ZS5zdHlsZXMpIDogbnVsbDtcbn1cblxuZXhwb3J0IGNvbnN0IG1hcFRlbXBsYXRlID0gKGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGNvbmZpZzogUm9vbUNhcmRDb25maWcsIGVudGl0eVN0YXRlOiBIb21lQXNzaXN0YW50RW50aXR5KSA9PiB7XG4gICAgaWYoZW50aXR5ICE9PSB1bmRlZmluZWQgJiYgZW50aXR5LnRlbXBsYXRlKSB7XG4gICAgICAgIGNvbnN0IHRlbXBsYXRlc1dpdGhNYXRjaGluZ05hbWUgPSBjb25maWcudGVtcGxhdGVzLmZpbHRlcih0ZW1wbGF0ZSA9PiB0ZW1wbGF0ZS5uYW1lID09PSBlbnRpdHkudGVtcGxhdGUpO1xuICAgICAgICBpZih0ZW1wbGF0ZXNXaXRoTWF0Y2hpbmdOYW1lLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHRlbXBsYXRlRnJvbUNvbmZpZyA9IHRlbXBsYXRlc1dpdGhNYXRjaGluZ05hbWVbMF07XG5cbiAgICAgICAgICAgIHJldHVybiB7IHN0YXRlT2JqOiBlbnRpdHlTdGF0ZSwgLi4uZW50aXR5LCAuLi50ZW1wbGF0ZUZyb21Db25maWcudGVtcGxhdGUgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBlbnRpdHk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRUZW1wbGF0ZU9yQXR0cmlidXRlID0gKGF0dHJpYnV0ZTogc3RyaW5nIHwgbnVtYmVyIHwgUm9vbUNhcmRBdHRyaWJ1dGVUZW1wbGF0ZSB8IGJvb2xlYW4sIGhhc3M6IEhvbWVBc3Npc3RhbnQsIHN0YXRlT2JqOiBIb21lQXNzaXN0YW50RW50aXR5KSA9PiB7XG4gICAgaWYoIWF0dHJpYnV0ZSkge1xuICAgICAgICByZXR1cm4gYXR0cmlidXRlO1xuICAgIH1cblxuICAgIGlmKHR5cGVvZiBhdHRyaWJ1dGUgPT0gXCJvYmplY3RcIikge1xuICAgICAgICBpZigndGVtcGxhdGUnIGluIGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGV2YWxUZW1wbGF0ZShoYXNzLCBzdGF0ZU9iaiwgKGF0dHJpYnV0ZSBhcyBSb29tQ2FyZEF0dHJpYnV0ZVRlbXBsYXRlKS50ZW1wbGF0ZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYXR0cmlidXRlO1xufSIsImltcG9ydCB7IEhvbWVBc3Npc3RhbnQgfSBmcm9tICdjdXN0b20tY2FyZC1oZWxwZXJzJztcbmltcG9ydCB7IGh0bWwsIFByb3BlcnR5VmFsdWVzIH0gZnJvbSAnbGl0JztcbmltcG9ydCB7IEhhc3NFbnRpdHkgfSBmcm9tICdob21lLWFzc2lzdGFudC1qcy13ZWJzb2NrZXQnO1xuaW1wb3J0IHsgVU5BVkFJTEFCTEVfU1RBVEVTLCBMQVNUX1VQREFURUQgfSBmcm9tICcuL2xpYi9jb25zdGFudHMnO1xuaW1wb3J0IHsgSG9tZUFzc2lzdGFudEVudGl0eSwgUm9vbUNhcmRDb25maWcsIFJvb21DYXJkRW50aXR5LCBFbnRpdHlDb25kaXRpb24sIFJvb21DYXJkTG92ZWxhY2VDYXJkQ29uZmlnLCBSb29tQ2FyZFJvdywgUm9vbUNhcmRJY29uLCBIaWRlSWZDb25maWcgfSBmcm9tICcuL3R5cGVzL3Jvb20tY2FyZC10eXBlcyc7XG5pbXBvcnQgeyBtYXBUZW1wbGF0ZSB9IGZyb20gJy4vdGVtcGxhdGUnO1xuXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAob2JqOiB1bmtub3duKSA6IGJvb2xlYW4gPT4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgIUFycmF5LmlzQXJyYXkob2JqKSAmJiAhIW9iajtcblxuZXhwb3J0IGNvbnN0IGlzVW5hdmFpbGFibGUgPSAoc3RhdGVPYmo6IEhvbWVBc3Npc3RhbnRFbnRpdHkpIDogYm9vbGVhbiA9PiAhc3RhdGVPYmogfHwgVU5BVkFJTEFCTEVfU1RBVEVTLmluY2x1ZGVzKHN0YXRlT2JqLnN0YXRlKTtcblxuZXhwb3J0IGNvbnN0IGdldFZhbHVlID0gKGVudGl0eTogUm9vbUNhcmRFbnRpdHksIGVudGl0eVN0YXRlPzogSG9tZUFzc2lzdGFudEVudGl0eSkgPT4ge1xuICAgIGlmKGVudGl0eS5hdHRyaWJ1dGUgJiYgZW50aXR5U3RhdGU/LmF0dHJpYnV0ZXNbZW50aXR5LmF0dHJpYnV0ZV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEVudGl0eTogJyR7ZW50aXR5LmVudGl0eX0nIGhhcyBubyBhdHRyaWJ1dGUgbmFtZWQgJyR7ZW50aXR5LmF0dHJpYnV0ZX0nYCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVudGl0eS5hdHRyaWJ1dGUgPyBlbnRpdHlTdGF0ZS5hdHRyaWJ1dGVzW2VudGl0eS5hdHRyaWJ1dGVdIDogZW50aXR5U3RhdGUuc3RhdGU7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRFbnRpdHlJZHMgPSAoY29uZmlnOiBSb29tQ2FyZENvbmZpZyk6IHN0cmluZ1tdID0+IHtcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgU2V0PHN0cmluZz4oKTtcbiAgICByZXN1bHQuYWRkKGNvbmZpZy5lbnRpdHkpO1xuICAgIGNvbmZpZy5lbnRpdGllcz8uZm9yRWFjaCgoZW50aXR5KSA9PiByZXN1bHQuYWRkKGdldEVudGl0eShlbnRpdHkpKSk7XG4gICAgY29uZmlnLmluZm9fZW50aXRpZXM/LmZvckVhY2goKGVudGl0eSkgPT4gcmVzdWx0LmFkZChnZXRFbnRpdHkoZW50aXR5KSkpO1xuICAgIGNvbmZpZy5yb3dzPy5mbGF0TWFwKChyb3cpID0+IHJvdy5lbnRpdGllcykuZm9yRWFjaCgoZW50aXR5KSA9PiByZXN1bHQuYWRkKGdldEVudGl0eShlbnRpdHkpKSk7XG4gICAgY29uZmlnLmNhcmRzPy5mbGF0TWFwKChjYXJkKSA9PiBnZXRDYXJkRW50aXRpZXMoY2FyZCkpLmZvckVhY2goKGVudGl0eSkgPT4gcmVzdWx0LmFkZChlbnRpdHkpKTtcbiAgICBnZXRDb25kaXRpb25FbnRpdGllc0Zyb21Db25maWcoY29uZmlnKS5mb3JFYWNoKChlbnRpdHkpID0+IHJlc3VsdC5hZGQoZW50aXR5KSk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20ocmVzdWx0KTtcbn1cblxuZXhwb3J0IGNvbnN0IGdldEVudGl0eSA9IChlbnRpdHk/OiBzdHJpbmcgfCBSb29tQ2FyZEVudGl0eSkgOiBzdHJpbmcgPT4ge1xuICAgIHJldHVybiBlbnRpdHkgPT09IHVuZGVmaW5lZCA/IG51bGwgOiB0eXBlb2YgZW50aXR5ID09PSAnc3RyaW5nJyA/IGVudGl0eSA6IGVudGl0eS5lbnRpdHk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRDb25kaXRpb25FbnRpdGllcyA9IChlbnRpdGllcz86IFJvb21DYXJkRW50aXR5W10pIDogRW50aXR5Q29uZGl0aW9uW10gPT4ge1xuICAgIGxldCBjb25kaXRpb25zOiBFbnRpdHlDb25kaXRpb25bXSA9IFtdO1xuICAgIGVudGl0aWVzPy5mb3JFYWNoKGVudGl0eSA9PiB7XG4gICAgICAgIGNvbnN0IGljb25Db25kaXRpb25zV2l0aEVudGl0eSA9IChlbnRpdHk/Lmljb24gYXMgUm9vbUNhcmRJY29uKT8uY29uZGl0aW9ucz8uZmlsdGVyKHggPT4geC5lbnRpdHkgIT09IHVuZGVmaW5lZCk7XG4gICAgICAgIGlmKGljb25Db25kaXRpb25zV2l0aEVudGl0eSkge1xuICAgICAgICAgICAgY29uZGl0aW9ucyA9IGNvbmRpdGlvbnMuY29uY2F0KGljb25Db25kaXRpb25zV2l0aEVudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGlkZUNvbmRpdGlvbnNXaXRoRW50aXR5ID0gKGVudGl0eT8uaGlkZV9pZiBhcyBIaWRlSWZDb25maWcpPy5jb25kaXRpb25zPy5maWx0ZXIoeCA9PiB4LmVudGl0eSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYoaGlkZUNvbmRpdGlvbnNXaXRoRW50aXR5KSB7XG4gICAgICAgICAgICBjb25kaXRpb25zID0gY29uZGl0aW9ucy5jb25jYXQoaGlkZUNvbmRpdGlvbnNXaXRoRW50aXR5KTtcbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGNvbmRpdGlvbnM7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRDb25kaXRpb25FbnRpdGllc0Zyb21Db25maWcgPSAoY29uZmlnOiBSb29tQ2FyZENvbmZpZykgOiBzdHJpbmdbXSA9PiB7XG4gICAgY29uc3QgZW50aXRpZXMgPSBbY29uZmlnLmVudGl0aWVzLCBjb25maWcuaW5mb19lbnRpdGllcywgY29uZmlnLnJvd3M/LmZsYXRNYXAocm93ID0+IHJvdy5lbnRpdGllcyldXG4gICAgY29uc3QgY29uZGl0aW9uV2l0aEVudGl0aWVzID0gZ2V0Q29uZGl0aW9uRW50aXRpZXMoZW50aXRpZXMuZmxhdE1hcChlbnRpdGllcyA9PiBlbnRpdGllcykpO1xuXG4gICAgcmV0dXJuIGNvbmRpdGlvbldpdGhFbnRpdGllcy5maWx0ZXIoY29uZGl0aW9uID0+IGNvbmRpdGlvbi5lbnRpdHkpLm1hcChjb25kaXRpb24gPT4gY29uZGl0aW9uLmVudGl0eSk7XG59XG5cbmV4cG9ydCBjb25zdCBnZXRDYXJkRW50aXRpZXMgPSAoY2FyZDogUm9vbUNhcmRMb3ZlbGFjZUNhcmRDb25maWcpIDogc3RyaW5nW10gPT4ge1xuICAgIHJldHVybiBbZ2V0RW50aXR5KGNhcmQuZW50aXR5KV1cbiAgICAgICAgLmNvbmNhdChjYXJkLmNhcmRzPy5mbGF0TWFwKChjYXJkKSA9PiBnZXRDYXJkRW50aXRpZXMoY2FyZCkpKVxuICAgICAgICAuY29uY2F0KGNhcmQuZW50aXRpZXM/LmZsYXRNYXAoKGVudGl0eSkgPT4gZ2V0RW50aXR5KGVudGl0eSBhcyBSb29tQ2FyZEVudGl0eSkpKVxuICAgICAgICAuZmlsdGVyKChlbnRpdHkpID0+IGVudGl0eSk7XG59XG5cbmV4cG9ydCBjb25zdCBjaGVja0NvbmRpdGlvbmFsVmFsdWUgPSAoaXRlbTogRW50aXR5Q29uZGl0aW9uLCBjaGVja1ZhbHVlOiB1bmtub3duKSA9PiB7XG4gICAgY29uc3QgaXRlbVZhbHVlID0gdHlwZW9mIGl0ZW0udmFsdWUgPT09ICdib29sZWFuJyA/IFN0cmluZyhpdGVtLnZhbHVlKSA6IGl0ZW0udmFsdWU7XG4gICAgaWYoaXRlbS5jb25kaXRpb24gPT0gJ2VxdWFscycgJiYgY2hlY2tWYWx1ZSA9PSBpdGVtVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGlmKGl0ZW0uY29uZGl0aW9uID09ICdub3RfZXF1YWxzJyAmJiBjaGVja1ZhbHVlICE9IGl0ZW1WYWx1ZSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYoaXRlbS5jb25kaXRpb24gPT0gJ2Fib3ZlJyAmJiBjaGVja1ZhbHVlID4gaXRlbVZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZihpdGVtLmNvbmRpdGlvbiA9PSAnYmVsb3cnICYmIGNoZWNrVmFsdWUgPCBpdGVtVmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgY29uc3QgbWFwU3RhdGVPYmplY3QgPSAoZW50aXR5OiBSb29tQ2FyZEVudGl0eSB8IHN0cmluZywgaGFzczogSG9tZUFzc2lzdGFudCwgY29uZmlnOiBSb29tQ2FyZENvbmZpZywgZW50aXR5U3RhdGU6IEhvbWVBc3Npc3RhbnRFbnRpdHkpIDogUm9vbUNhcmRFbnRpdHkgPT4geyAgICAgICAgXG4gICAgY29uc3QgY29uZiA9IHR5cGVvZiBlbnRpdHkgPT09ICdzdHJpbmcnID8geyBlbnRpdHk6IGVudGl0eSB9IDogZW50aXR5O1xuICAgIHJldHVybiBtYXBUZW1wbGF0ZShjb25mIGFzIFJvb21DYXJkRW50aXR5LCBjb25maWcsIGVudGl0eVN0YXRlKTtcbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9iYW4tdHlwZXNcbmV4cG9ydCBjb25zdCBldmFsVGVtcGxhdGUgPSAoaGFzczogSG9tZUFzc2lzdGFudCB8IHVuZGVmaW5lZCwgc3RhdGU6IEhhc3NFbnRpdHksIGZ1bmM6IHN0cmluZyk6IEZ1bmN0aW9uID0+IHtcbiAgICAvKiBlc2xpbnQgbm8tbmV3LWZ1bmM6IDAgKi9cbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKCdzdGF0ZXMnLCAnZW50aXR5JywgJ3VzZXInLCAnaGFzcycsICdodG1sJywgYCd1c2Ugc3RyaWN0JzsgJHtmdW5jfWApLmNhbGwoXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgaGFzcz8uc3RhdGVzLFxuICAgICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgICBoYXNzPy51c2VyLFxuICAgICAgICAgICAgaGFzcyxcbiAgICAgICAgICAgIGh0bWwsXG4gICAgICAgICk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjb25zdCBmdW5jVHJpbW1lZCA9IGZ1bmMubGVuZ3RoIDw9IDEwMCA/IGZ1bmMudHJpbSgpIDogYCR7ZnVuYy50cmltKCkuc3Vic3RyaW5nKDAsIDk4KX0uLi5gO1xuICAgICAgICBlLm1lc3NhZ2UgPSBgJHtlLm5hbWV9OiAke2UubWVzc2FnZX0gaW4gJyR7ZnVuY1RyaW1tZWR9J2A7XG4gICAgICAgIGUubmFtZSA9ICdSb29tQ2FyZEpTVGVtcGxhdGVFcnJvcic7XG4gICAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbmV4cG9ydCBjb25zdCByZW5kZXJDbGFzc2VzID0gKGNvbmZpZzogUm9vbUNhcmRDb25maWcgfCBSb29tQ2FyZFJvdywgY2xhc3Nlcz86IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgcmV0dXJuIGBlbnRpdGllcy1yb3cgJHtjb25maWcuY29udGVudF9hbGlnbm1lbnQgPyBgY29udGVudC0ke2NvbmZpZy5jb250ZW50X2FsaWdubWVudH1gIDogJ2NvbnRlbnQtbGVmdCd9JHtjbGFzc2VzICE9PSB1bmRlZmluZWQgPyBgICR7Y2xhc3Nlc31gIDogJycgfWA7XG59IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBlPWU9Pm49PlwiZnVuY3Rpb25cIj09dHlwZW9mIG4/KChlLG4pPT4oY3VzdG9tRWxlbWVudHMuZGVmaW5lKGUsbiksbikpKGUsbik6KChlLG4pPT57Y29uc3R7a2luZDp0LGVsZW1lbnRzOnN9PW47cmV0dXJue2tpbmQ6dCxlbGVtZW50czpzLGZpbmlzaGVyKG4pe2N1c3RvbUVsZW1lbnRzLmRlZmluZShlLG4pfX19KShlLG4pO2V4cG9ydHtlIGFzIGN1c3RvbUVsZW1lbnR9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnQuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGk9KGksZSk9PlwibWV0aG9kXCI9PT1lLmtpbmQmJmUuZGVzY3JpcHRvciYmIShcInZhbHVlXCJpbiBlLmRlc2NyaXB0b3IpP3suLi5lLGZpbmlzaGVyKG4pe24uY3JlYXRlUHJvcGVydHkoZS5rZXksaSl9fTp7a2luZDpcImZpZWxkXCIsa2V5OlN5bWJvbCgpLHBsYWNlbWVudDpcIm93blwiLGRlc2NyaXB0b3I6e30sb3JpZ2luYWxLZXk6ZS5rZXksaW5pdGlhbGl6ZXIoKXtcImZ1bmN0aW9uXCI9PXR5cGVvZiBlLmluaXRpYWxpemVyJiYodGhpc1tlLmtleV09ZS5pbml0aWFsaXplci5jYWxsKHRoaXMpKX0sZmluaXNoZXIobil7bi5jcmVhdGVQcm9wZXJ0eShlLmtleSxpKX19LGU9KGksZSxuKT0+e2UuY29uc3RydWN0b3IuY3JlYXRlUHJvcGVydHkobixpKX07ZnVuY3Rpb24gbihuKXtyZXR1cm4odCxvKT0+dm9pZCAwIT09bz9lKG4sdCxvKTppKG4sdCl9ZXhwb3J0e24gYXMgcHJvcGVydHl9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvcGVydHkuanMubWFwXG4iLCJpbXBvcnR7cHJvcGVydHkgYXMgcn1mcm9tXCIuL3Byb3BlcnR5LmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiB0KHQpe3JldHVybiByKHsuLi50LHN0YXRlOiEwfSl9ZXhwb3J0e3QgYXMgc3RhdGV9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RhdGUuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IGU9KGUsdCxvKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LG8sZSl9LHQ9KGUsdCk9Pih7a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTp0LmtleSxkZXNjcmlwdG9yOmV9KSxvPSh7ZmluaXNoZXI6ZSxkZXNjcmlwdG9yOnR9KT0+KG8sbik9Pnt2YXIgcjtpZih2b2lkIDA9PT1uKXtjb25zdCBuPW51bGwhPT0ocj1vLm9yaWdpbmFsS2V5KSYmdm9pZCAwIT09cj9yOm8ua2V5LGk9bnVsbCE9dD97a2luZDpcIm1ldGhvZFwiLHBsYWNlbWVudDpcInByb3RvdHlwZVwiLGtleTpuLGRlc2NyaXB0b3I6dChvLmtleSl9OnsuLi5vLGtleTpufTtyZXR1cm4gbnVsbCE9ZSYmKGkuZmluaXNoZXI9ZnVuY3Rpb24odCl7ZSh0LG4pfSksaX17Y29uc3Qgcj1vLmNvbnN0cnVjdG9yO3ZvaWQgMCE9PXQmJk9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLG4sdChuKSksbnVsbD09ZXx8ZShyLG4pfX07ZXhwb3J0e28gYXMgZGVjb3JhdGVQcm9wZXJ0eSxlIGFzIGxlZ2FjeVByb3RvdHlwZU1ldGhvZCx0IGFzIHN0YW5kYXJkUHJvdG90eXBlTWV0aG9kfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhc2UuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyByfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovZnVuY3Rpb24gZShlKXtyZXR1cm4gcih7ZmluaXNoZXI6KHIsdCk9PntPYmplY3QuYXNzaWduKHIucHJvdG90eXBlW3RdLGUpfX0pfWV4cG9ydHtlIGFzIGV2ZW50T3B0aW9uc307XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ldmVudC1vcHRpb25zLmpzLm1hcFxuIiwiaW1wb3J0e2RlY29yYXRlUHJvcGVydHkgYXMgb31mcm9tXCIuL2Jhc2UuanNcIjtcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL2Z1bmN0aW9uIGkoaSxuKXtyZXR1cm4gbyh7ZGVzY3JpcHRvcjpvPT57Y29uc3QgdD17Z2V0KCl7dmFyIG8sbjtyZXR1cm4gbnVsbCE9PShuPW51bGw9PT0obz10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1vP3ZvaWQgMDpvLnF1ZXJ5U2VsZWN0b3IoaSkpJiZ2b2lkIDAhPT1uP246bnVsbH0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9O2lmKG4pe2NvbnN0IG49XCJzeW1ib2xcIj09dHlwZW9mIG8/U3ltYm9sKCk6XCJfX1wiK287dC5nZXQ9ZnVuY3Rpb24oKXt2YXIgbyx0O3JldHVybiB2b2lkIDA9PT10aGlzW25dJiYodGhpc1tuXT1udWxsIT09KHQ9bnVsbD09PShvPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PW8/dm9pZCAwOm8ucXVlcnlTZWxlY3RvcihpKSkmJnZvaWQgMCE9PXQ/dDpudWxsKSx0aGlzW25dfX1yZXR1cm4gdH19KX1leHBvcnR7aSBhcyBxdWVyeX07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS5qcy5tYXBcbiIsImltcG9ydHtkZWNvcmF0ZVByb3BlcnR5IGFzIHJ9ZnJvbVwiLi9iYXNlLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBlKGUpe3JldHVybiByKHtkZXNjcmlwdG9yOnI9Pih7Z2V0KCl7dmFyIHIsbztyZXR1cm4gbnVsbCE9PShvPW51bGw9PT0ocj10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1yP3ZvaWQgMDpyLnF1ZXJ5U2VsZWN0b3JBbGwoZSkpJiZ2b2lkIDAhPT1vP286W119LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7ZSBhcyBxdWVyeUFsbH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1xdWVyeS1hbGwuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyByfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5mdW5jdGlvbiBlKGUpe3JldHVybiByKHtkZXNjcmlwdG9yOnI9Pih7YXN5bmMgZ2V0KCl7dmFyIHI7cmV0dXJuIGF3YWl0IHRoaXMudXBkYXRlQ29tcGxldGUsbnVsbD09PShyPXRoaXMucmVuZGVyUm9vdCl8fHZvaWQgMD09PXI/dm9pZCAwOnIucXVlcnlTZWxlY3RvcihlKX0sZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITB9KX0pfWV4cG9ydHtlIGFzIHF1ZXJ5QXN5bmN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXN5bmMuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBvfWZyb21cIi4vYmFzZS5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIG47Y29uc3QgZT1udWxsIT0obnVsbD09PShuPXdpbmRvdy5IVE1MU2xvdEVsZW1lbnQpfHx2b2lkIDA9PT1uP3ZvaWQgMDpuLnByb3RvdHlwZS5hc3NpZ25lZEVsZW1lbnRzKT8obyxuKT0+by5hc3NpZ25lZEVsZW1lbnRzKG4pOihvLG4pPT5vLmFzc2lnbmVkTm9kZXMobikuZmlsdGVyKChvPT5vLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpKTtmdW5jdGlvbiBsKG4pe2NvbnN0e3Nsb3Q6bCxzZWxlY3Rvcjp0fT1udWxsIT1uP246e307cmV0dXJuIG8oe2Rlc2NyaXB0b3I6bz0+KHtnZXQoKXt2YXIgbztjb25zdCByPVwic2xvdFwiKyhsP2BbbmFtZT0ke2x9XWA6XCI6bm90KFtuYW1lXSlcIiksaT1udWxsPT09KG89dGhpcy5yZW5kZXJSb290KXx8dm9pZCAwPT09bz92b2lkIDA6by5xdWVyeVNlbGVjdG9yKHIpLHM9bnVsbCE9aT9lKGksbik6W107cmV0dXJuIHQ/cy5maWx0ZXIoKG89Pm8ubWF0Y2hlcyh0KSkpOnN9LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7bCBhcyBxdWVyeUFzc2lnbmVkRWxlbWVudHN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtZWxlbWVudHMuanMubWFwXG4iLCJpbXBvcnR7ZGVjb3JhdGVQcm9wZXJ0eSBhcyBlfWZyb21cIi4vYmFzZS5qc1wiO2ltcG9ydHtxdWVyeUFzc2lnbmVkRWxlbWVudHMgYXMgdH1mcm9tXCIuL3F1ZXJ5LWFzc2lnbmVkLWVsZW1lbnRzLmpzXCI7XG4vKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9mdW5jdGlvbiBvKG8sbixyKXtsZXQgbCxzPW87cmV0dXJuXCJvYmplY3RcIj09dHlwZW9mIG8/KHM9by5zbG90LGw9byk6bD17ZmxhdHRlbjpufSxyP3Qoe3Nsb3Q6cyxmbGF0dGVuOm4sc2VsZWN0b3I6cn0pOmUoe2Rlc2NyaXB0b3I6ZT0+KHtnZXQoKXt2YXIgZSx0O2NvbnN0IG89XCJzbG90XCIrKHM/YFtuYW1lPSR7c31dYDpcIjpub3QoW25hbWVdKVwiKSxuPW51bGw9PT0oZT10aGlzLnJlbmRlclJvb3QpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnF1ZXJ5U2VsZWN0b3Iobyk7cmV0dXJuIG51bGwhPT0odD1udWxsPT1uP3ZvaWQgMDpuLmFzc2lnbmVkTm9kZXMobCkpJiZ2b2lkIDAhPT10P3Q6W119LGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwfSl9KX1leHBvcnR7byBhcyBxdWVyeUFzc2lnbmVkTm9kZXN9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cXVlcnktYXNzaWduZWQtbm9kZXMuanMubWFwXG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgTExDXG4gKiBTUERYLUxpY2Vuc2UtSWRlbnRpZmllcjogQlNELTMtQ2xhdXNlXG4gKi9cbmNvbnN0IHQ9e0FUVFJJQlVURToxLENISUxEOjIsUFJPUEVSVFk6MyxCT09MRUFOX0FUVFJJQlVURTo0LEVWRU5UOjUsRUxFTUVOVDo2fSxlPXQ9PiguLi5lKT0+KHtfJGxpdERpcmVjdGl2ZSQ6dCx2YWx1ZXM6ZX0pO2NsYXNzIGl7Y29uc3RydWN0b3IodCl7fWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQVQodCxlLGkpe3RoaXMuXyRDdD10LHRoaXMuXyRBTT1lLHRoaXMuXyRDaT1pfV8kQVModCxlKXtyZXR1cm4gdGhpcy51cGRhdGUodCxlKX11cGRhdGUodCxlKXtyZXR1cm4gdGhpcy5yZW5kZXIoLi4uZSl9fWV4cG9ydHtpIGFzIERpcmVjdGl2ZSx0IGFzIFBhcnRUeXBlLGUgYXMgZGlyZWN0aXZlfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRpcmVjdGl2ZS5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xuY29uc3QgdD13aW5kb3csZT10LlNoYWRvd1Jvb3QmJih2b2lkIDA9PT10LlNoYWR5Q1NTfHx0LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykmJlwiYWRvcHRlZFN0eWxlU2hlZXRzXCJpbiBEb2N1bWVudC5wcm90b3R5cGUmJlwicmVwbGFjZVwiaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUscz1TeW1ib2woKSxuPW5ldyBXZWFrTWFwO2NsYXNzIG97Y29uc3RydWN0b3IodCxlLG4pe2lmKHRoaXMuXyRjc3NSZXN1bHQkPSEwLG4hPT1zKXRocm93IEVycm9yKFwiQ1NTUmVzdWx0IGlzIG5vdCBjb25zdHJ1Y3RhYmxlLiBVc2UgYHVuc2FmZUNTU2Agb3IgYGNzc2AgaW5zdGVhZC5cIik7dGhpcy5jc3NUZXh0PXQsdGhpcy50PWV9Z2V0IHN0eWxlU2hlZXQoKXtsZXQgdD10aGlzLm87Y29uc3Qgcz10aGlzLnQ7aWYoZSYmdm9pZCAwPT09dCl7Y29uc3QgZT12b2lkIDAhPT1zJiYxPT09cy5sZW5ndGg7ZSYmKHQ9bi5nZXQocykpLHZvaWQgMD09PXQmJigodGhpcy5vPXQ9bmV3IENTU1N0eWxlU2hlZXQpLnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCksZSYmbi5zZXQocyx0KSl9cmV0dXJuIHR9dG9TdHJpbmcoKXtyZXR1cm4gdGhpcy5jc3NUZXh0fX1jb25zdCByPXQ9Pm5ldyBvKFwic3RyaW5nXCI9PXR5cGVvZiB0P3Q6dCtcIlwiLHZvaWQgMCxzKSxpPSh0LC4uLmUpPT57Y29uc3Qgbj0xPT09dC5sZW5ndGg/dFswXTplLnJlZHVjZSgoKGUscyxuKT0+ZSsodD0+e2lmKCEwPT09dC5fJGNzc1Jlc3VsdCQpcmV0dXJuIHQuY3NzVGV4dDtpZihcIm51bWJlclwiPT10eXBlb2YgdClyZXR1cm4gdDt0aHJvdyBFcnJvcihcIlZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiBcIit0K1wiLiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dCB0YWtlIGNhcmUgdG8gZW5zdXJlIHBhZ2Ugc2VjdXJpdHkuXCIpfSkocykrdFtuKzFdKSx0WzBdKTtyZXR1cm4gbmV3IG8obix0LHMpfSxTPShzLG4pPT57ZT9zLmFkb3B0ZWRTdHlsZVNoZWV0cz1uLm1hcCgodD0+dCBpbnN0YW5jZW9mIENTU1N0eWxlU2hlZXQ/dDp0LnN0eWxlU2hlZXQpKTpuLmZvckVhY2goKGU9Pntjb25zdCBuPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKSxvPXQubGl0Tm9uY2U7dm9pZCAwIT09byYmbi5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLG8pLG4udGV4dENvbnRlbnQ9ZS5jc3NUZXh0LHMuYXBwZW5kQ2hpbGQobil9KSl9LGM9ZT90PT50OnQ9PnQgaW5zdGFuY2VvZiBDU1NTdHlsZVNoZWV0Pyh0PT57bGV0IGU9XCJcIjtmb3IoY29uc3QgcyBvZiB0LmNzc1J1bGVzKWUrPXMuY3NzVGV4dDtyZXR1cm4gcihlKX0pKHQpOnQ7ZXhwb3J0e28gYXMgQ1NTUmVzdWx0LFMgYXMgYWRvcHRTdHlsZXMsaSBhcyBjc3MsYyBhcyBnZXRDb21wYXRpYmxlU3R5bGUsZSBhcyBzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsciBhcyB1bnNhZmVDU1N9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3NzLXRhZy5qcy5tYXBcbiIsImltcG9ydHtnZXRDb21wYXRpYmxlU3R5bGUgYXMgdCxhZG9wdFN0eWxlcyBhcyBpfWZyb21cIi4vY3NzLXRhZy5qc1wiO2V4cG9ydHtDU1NSZXN1bHQsYWRvcHRTdHlsZXMsY3NzLGdldENvbXBhdGlibGVTdHlsZSxzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsdW5zYWZlQ1NTfWZyb21cIi4vY3NzLXRhZy5qc1wiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIHM7Y29uc3QgZT13aW5kb3cscj1lLnRydXN0ZWRUeXBlcyxoPXI/ci5lbXB0eVNjcmlwdDpcIlwiLG89ZS5yZWFjdGl2ZUVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQsbj17dG9BdHRyaWJ1dGUodCxpKXtzd2l0Y2goaSl7Y2FzZSBCb29sZWFuOnQ9dD9oOm51bGw7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0PW51bGw9PXQ/dDpKU09OLnN0cmluZ2lmeSh0KX1yZXR1cm4gdH0sZnJvbUF0dHJpYnV0ZSh0LGkpe2xldCBzPXQ7c3dpdGNoKGkpe2Nhc2UgQm9vbGVhbjpzPW51bGwhPT10O2JyZWFrO2Nhc2UgTnVtYmVyOnM9bnVsbD09PXQ/bnVsbDpOdW1iZXIodCk7YnJlYWs7Y2FzZSBPYmplY3Q6Y2FzZSBBcnJheTp0cnl7cz1KU09OLnBhcnNlKHQpfWNhdGNoKHQpe3M9bnVsbH19cmV0dXJuIHN9fSxhPSh0LGkpPT5pIT09dCYmKGk9PWl8fHQ9PXQpLGw9e2F0dHJpYnV0ZTohMCx0eXBlOlN0cmluZyxjb252ZXJ0ZXI6bixyZWZsZWN0OiExLGhhc0NoYW5nZWQ6YX0sZD1cImZpbmFsaXplZFwiO2NsYXNzIHUgZXh0ZW5kcyBIVE1MRWxlbWVudHtjb25zdHJ1Y3Rvcigpe3N1cGVyKCksdGhpcy5fJEVpPW5ldyBNYXAsdGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITEsdGhpcy5oYXNVcGRhdGVkPSExLHRoaXMuXyRFbD1udWxsLHRoaXMuXyRFdSgpfXN0YXRpYyBhZGRJbml0aWFsaXplcih0KXt2YXIgaTt0aGlzLmZpbmFsaXplKCksKG51bGwhPT0oaT10aGlzLmgpJiZ2b2lkIDAhPT1pP2k6dGhpcy5oPVtdKS5wdXNoKHQpfXN0YXRpYyBnZXQgb2JzZXJ2ZWRBdHRyaWJ1dGVzKCl7dGhpcy5maW5hbGl6ZSgpO2NvbnN0IHQ9W107cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZm9yRWFjaCgoKGkscyk9Pntjb25zdCBlPXRoaXMuXyRFcChzLGkpO3ZvaWQgMCE9PWUmJih0aGlzLl8kRXYuc2V0KGUscyksdC5wdXNoKGUpKX0pKSx0fXN0YXRpYyBjcmVhdGVQcm9wZXJ0eSh0LGk9bCl7aWYoaS5zdGF0ZSYmKGkuYXR0cmlidXRlPSExKSx0aGlzLmZpbmFsaXplKCksdGhpcy5lbGVtZW50UHJvcGVydGllcy5zZXQodCxpKSwhaS5ub0FjY2Vzc29yJiYhdGhpcy5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkodCkpe2NvbnN0IHM9XCJzeW1ib2xcIj09dHlwZW9mIHQ/U3ltYm9sKCk6XCJfX1wiK3QsZT10aGlzLmdldFByb3BlcnR5RGVzY3JpcHRvcih0LHMsaSk7dm9pZCAwIT09ZSYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLHQsZSl9fXN0YXRpYyBnZXRQcm9wZXJ0eURlc2NyaXB0b3IodCxpLHMpe3JldHVybntnZXQoKXtyZXR1cm4gdGhpc1tpXX0sc2V0KGUpe2NvbnN0IHI9dGhpc1t0XTt0aGlzW2ldPWUsdGhpcy5yZXF1ZXN0VXBkYXRlKHQscixzKX0sY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITB9fXN0YXRpYyBnZXRQcm9wZXJ0eU9wdGlvbnModCl7cmV0dXJuIHRoaXMuZWxlbWVudFByb3BlcnRpZXMuZ2V0KHQpfHxsfXN0YXRpYyBmaW5hbGl6ZSgpe2lmKHRoaXMuaGFzT3duUHJvcGVydHkoZCkpcmV0dXJuITE7dGhpc1tkXT0hMDtjb25zdCB0PU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZih0LmZpbmFsaXplKCksdm9pZCAwIT09dC5oJiYodGhpcy5oPVsuLi50LmhdKSx0aGlzLmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAodC5lbGVtZW50UHJvcGVydGllcyksdGhpcy5fJEV2PW5ldyBNYXAsdGhpcy5oYXNPd25Qcm9wZXJ0eShcInByb3BlcnRpZXNcIikpe2NvbnN0IHQ9dGhpcy5wcm9wZXJ0aWVzLGk9Wy4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHQpLC4uLk9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCldO2Zvcihjb25zdCBzIG9mIGkpdGhpcy5jcmVhdGVQcm9wZXJ0eShzLHRbc10pfXJldHVybiB0aGlzLmVsZW1lbnRTdHlsZXM9dGhpcy5maW5hbGl6ZVN0eWxlcyh0aGlzLnN0eWxlcyksITB9c3RhdGljIGZpbmFsaXplU3R5bGVzKGkpe2NvbnN0IHM9W107aWYoQXJyYXkuaXNBcnJheShpKSl7Y29uc3QgZT1uZXcgU2V0KGkuZmxhdCgxLzApLnJldmVyc2UoKSk7Zm9yKGNvbnN0IGkgb2YgZSlzLnVuc2hpZnQodChpKSl9ZWxzZSB2b2lkIDAhPT1pJiZzLnB1c2godChpKSk7cmV0dXJuIHN9c3RhdGljIF8kRXAodCxpKXtjb25zdCBzPWkuYXR0cmlidXRlO3JldHVybiExPT09cz92b2lkIDA6XCJzdHJpbmdcIj09dHlwZW9mIHM/czpcInN0cmluZ1wiPT10eXBlb2YgdD90LnRvTG93ZXJDYXNlKCk6dm9pZCAwfV8kRXUoKXt2YXIgdDt0aGlzLl8kRV89bmV3IFByb21pc2UoKHQ9PnRoaXMuZW5hYmxlVXBkYXRpbmc9dCkpLHRoaXMuXyRBTD1uZXcgTWFwLHRoaXMuXyRFZygpLHRoaXMucmVxdWVzdFVwZGF0ZSgpLG51bGw9PT0odD10aGlzLmNvbnN0cnVjdG9yLmgpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9PnQodGhpcykpKX1hZGRDb250cm9sbGVyKHQpe3ZhciBpLHM7KG51bGwhPT0oaT10aGlzLl8kRVMpJiZ2b2lkIDAhPT1pP2k6dGhpcy5fJEVTPVtdKS5wdXNoKHQpLHZvaWQgMCE9PXRoaXMucmVuZGVyUm9vdCYmdGhpcy5pc0Nvbm5lY3RlZCYmKG51bGw9PT0ocz10Lmhvc3RDb25uZWN0ZWQpfHx2b2lkIDA9PT1zfHxzLmNhbGwodCkpfXJlbW92ZUNvbnRyb2xsZXIodCl7dmFyIGk7bnVsbD09PShpPXRoaXMuXyRFUyl8fHZvaWQgMD09PWl8fGkuc3BsaWNlKHRoaXMuXyRFUy5pbmRleE9mKHQpPj4+MCwxKX1fJEVnKCl7dGhpcy5jb25zdHJ1Y3Rvci5lbGVtZW50UHJvcGVydGllcy5mb3JFYWNoKCgodCxpKT0+e3RoaXMuaGFzT3duUHJvcGVydHkoaSkmJih0aGlzLl8kRWkuc2V0KGksdGhpc1tpXSksZGVsZXRlIHRoaXNbaV0pfSkpfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdDtjb25zdCBzPW51bGwhPT0odD10aGlzLnNoYWRvd1Jvb3QpJiZ2b2lkIDAhPT10P3Q6dGhpcy5hdHRhY2hTaGFkb3codGhpcy5jb25zdHJ1Y3Rvci5zaGFkb3dSb290T3B0aW9ucyk7cmV0dXJuIGkocyx0aGlzLmNvbnN0cnVjdG9yLmVsZW1lbnRTdHlsZXMpLHN9Y29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDt2b2lkIDA9PT10aGlzLnJlbmRlclJvb3QmJih0aGlzLnJlbmRlclJvb3Q9dGhpcy5jcmVhdGVSZW5kZXJSb290KCkpLHRoaXMuZW5hYmxlVXBkYXRpbmcoITApLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdENvbm5lY3RlZCl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKX1lbmFibGVVcGRhdGluZyh0KXt9ZGlzY29ubmVjdGVkQ2FsbGJhY2soKXt2YXIgdDtudWxsPT09KHQ9dGhpcy5fJEVTKXx8dm9pZCAwPT09dHx8dC5mb3JFYWNoKCh0PT57dmFyIGk7cmV0dXJuIG51bGw9PT0oaT10Lmhvc3REaXNjb25uZWN0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSl9YXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHQsaSxzKXt0aGlzLl8kQUsodCxzKX1fJEVPKHQsaSxzPWwpe3ZhciBlO2NvbnN0IHI9dGhpcy5jb25zdHJ1Y3Rvci5fJEVwKHQscyk7aWYodm9pZCAwIT09ciYmITA9PT1zLnJlZmxlY3Qpe2NvbnN0IGg9KHZvaWQgMCE9PShudWxsPT09KGU9cy5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1lP3ZvaWQgMDplLnRvQXR0cmlidXRlKT9zLmNvbnZlcnRlcjpuKS50b0F0dHJpYnV0ZShpLHMudHlwZSk7dGhpcy5fJEVsPXQsbnVsbD09aD90aGlzLnJlbW92ZUF0dHJpYnV0ZShyKTp0aGlzLnNldEF0dHJpYnV0ZShyLGgpLHRoaXMuXyRFbD1udWxsfX1fJEFLKHQsaSl7dmFyIHM7Y29uc3QgZT10aGlzLmNvbnN0cnVjdG9yLHI9ZS5fJEV2LmdldCh0KTtpZih2b2lkIDAhPT1yJiZ0aGlzLl8kRWwhPT1yKXtjb25zdCB0PWUuZ2V0UHJvcGVydHlPcHRpb25zKHIpLGg9XCJmdW5jdGlvblwiPT10eXBlb2YgdC5jb252ZXJ0ZXI/e2Zyb21BdHRyaWJ1dGU6dC5jb252ZXJ0ZXJ9OnZvaWQgMCE9PShudWxsPT09KHM9dC5jb252ZXJ0ZXIpfHx2b2lkIDA9PT1zP3ZvaWQgMDpzLmZyb21BdHRyaWJ1dGUpP3QuY29udmVydGVyOm47dGhpcy5fJEVsPXIsdGhpc1tyXT1oLmZyb21BdHRyaWJ1dGUoaSx0LnR5cGUpLHRoaXMuXyRFbD1udWxsfX1yZXF1ZXN0VXBkYXRlKHQsaSxzKXtsZXQgZT0hMDt2b2lkIDAhPT10JiYoKChzPXN8fHRoaXMuY29uc3RydWN0b3IuZ2V0UHJvcGVydHlPcHRpb25zKHQpKS5oYXNDaGFuZ2VkfHxhKSh0aGlzW3RdLGkpPyh0aGlzLl8kQUwuaGFzKHQpfHx0aGlzLl8kQUwuc2V0KHQsaSksITA9PT1zLnJlZmxlY3QmJnRoaXMuXyRFbCE9PXQmJih2b2lkIDA9PT10aGlzLl8kRUMmJih0aGlzLl8kRUM9bmV3IE1hcCksdGhpcy5fJEVDLnNldCh0LHMpKSk6ZT0hMSksIXRoaXMuaXNVcGRhdGVQZW5kaW5nJiZlJiYodGhpcy5fJEVfPXRoaXMuXyRFaigpKX1hc3luYyBfJEVqKCl7dGhpcy5pc1VwZGF0ZVBlbmRpbmc9ITA7dHJ5e2F3YWl0IHRoaXMuXyRFX31jYXRjaCh0KXtQcm9taXNlLnJlamVjdCh0KX1jb25zdCB0PXRoaXMuc2NoZWR1bGVVcGRhdGUoKTtyZXR1cm4gbnVsbCE9dCYmYXdhaXQgdCwhdGhpcy5pc1VwZGF0ZVBlbmRpbmd9c2NoZWR1bGVVcGRhdGUoKXtyZXR1cm4gdGhpcy5wZXJmb3JtVXBkYXRlKCl9cGVyZm9ybVVwZGF0ZSgpe3ZhciB0O2lmKCF0aGlzLmlzVXBkYXRlUGVuZGluZylyZXR1cm47dGhpcy5oYXNVcGRhdGVkLHRoaXMuXyRFaSYmKHRoaXMuXyRFaS5mb3JFYWNoKCgodCxpKT0+dGhpc1tpXT10KSksdGhpcy5fJEVpPXZvaWQgMCk7bGV0IGk9ITE7Y29uc3Qgcz10aGlzLl8kQUw7dHJ5e2k9dGhpcy5zaG91bGRVcGRhdGUocyksaT8odGhpcy53aWxsVXBkYXRlKHMpLG51bGw9PT0odD10aGlzLl8kRVMpfHx2b2lkIDA9PT10fHx0LmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZSl8fHZvaWQgMD09PWk/dm9pZCAwOmkuY2FsbCh0KX0pKSx0aGlzLnVwZGF0ZShzKSk6dGhpcy5fJEVrKCl9Y2F0Y2godCl7dGhyb3cgaT0hMSx0aGlzLl8kRWsoKSx0fWkmJnRoaXMuXyRBRShzKX13aWxsVXBkYXRlKHQpe31fJEFFKHQpe3ZhciBpO251bGw9PT0oaT10aGlzLl8kRVMpfHx2b2lkIDA9PT1pfHxpLmZvckVhY2goKHQ9Pnt2YXIgaTtyZXR1cm4gbnVsbD09PShpPXQuaG9zdFVwZGF0ZWQpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLmNhbGwodCl9KSksdGhpcy5oYXNVcGRhdGVkfHwodGhpcy5oYXNVcGRhdGVkPSEwLHRoaXMuZmlyc3RVcGRhdGVkKHQpKSx0aGlzLnVwZGF0ZWQodCl9XyRFaygpe3RoaXMuXyRBTD1uZXcgTWFwLHRoaXMuaXNVcGRhdGVQZW5kaW5nPSExfWdldCB1cGRhdGVDb21wbGV0ZSgpe3JldHVybiB0aGlzLmdldFVwZGF0ZUNvbXBsZXRlKCl9Z2V0VXBkYXRlQ29tcGxldGUoKXtyZXR1cm4gdGhpcy5fJEVffXNob3VsZFVwZGF0ZSh0KXtyZXR1cm4hMH11cGRhdGUodCl7dm9pZCAwIT09dGhpcy5fJEVDJiYodGhpcy5fJEVDLmZvckVhY2goKCh0LGkpPT50aGlzLl8kRU8oaSx0aGlzW2ldLHQpKSksdGhpcy5fJEVDPXZvaWQgMCksdGhpcy5fJEVrKCl9dXBkYXRlZCh0KXt9Zmlyc3RVcGRhdGVkKHQpe319dVtkXT0hMCx1LmVsZW1lbnRQcm9wZXJ0aWVzPW5ldyBNYXAsdS5lbGVtZW50U3R5bGVzPVtdLHUuc2hhZG93Um9vdE9wdGlvbnM9e21vZGU6XCJvcGVuXCJ9LG51bGw9PW98fG8oe1JlYWN0aXZlRWxlbWVudDp1fSksKG51bGwhPT0ocz1lLnJlYWN0aXZlRWxlbWVudFZlcnNpb25zKSYmdm9pZCAwIT09cz9zOmUucmVhY3RpdmVFbGVtZW50VmVyc2lvbnM9W10pLnB1c2goXCIxLjYuM1wiKTtleHBvcnR7dSBhcyBSZWFjdGl2ZUVsZW1lbnQsbiBhcyBkZWZhdWx0Q29udmVydGVyLGEgYXMgbm90RXF1YWx9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhY3RpdmUtZWxlbWVudC5qcy5tYXBcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTENcbiAqIFNQRFgtTGljZW5zZS1JZGVudGlmaWVyOiBCU0QtMy1DbGF1c2VcbiAqL1xudmFyIHQ7Y29uc3QgaT13aW5kb3cscz1pLnRydXN0ZWRUeXBlcyxlPXM/cy5jcmVhdGVQb2xpY3koXCJsaXQtaHRtbFwiLHtjcmVhdGVIVE1MOnQ9PnR9KTp2b2lkIDAsbz1cIiRsaXQkXCIsbj1gbGl0JCR7KE1hdGgucmFuZG9tKCkrXCJcIikuc2xpY2UoOSl9JGAsbD1cIj9cIituLGg9YDwke2x9PmAscj1kb2N1bWVudCx1PSgpPT5yLmNyZWF0ZUNvbW1lbnQoXCJcIiksZD10PT5udWxsPT09dHx8XCJvYmplY3RcIiE9dHlwZW9mIHQmJlwiZnVuY3Rpb25cIiE9dHlwZW9mIHQsYz1BcnJheS5pc0FycmF5LHY9dD0+Yyh0KXx8XCJmdW5jdGlvblwiPT10eXBlb2YobnVsbD09dD92b2lkIDA6dFtTeW1ib2wuaXRlcmF0b3JdKSxhPVwiWyBcXHRcXG5cXGZcXHJdXCIsZj0vPCg/OighLS18XFwvW15hLXpBLVpdKXwoXFwvP1thLXpBLVpdW14+XFxzXSopfChcXC8/JCkpL2csXz0vLS0+L2csbT0vPi9nLHA9UmVnRXhwKGA+fCR7YX0oPzooW15cXFxcc1wiJz49L10rKSgke2F9Kj0ke2F9Kig/OlteIFxcdFxcblxcZlxcclwiJ1xcYDw+PV18KFwifCcpfCkpfCQpYCxcImdcIiksZz0vJy9nLCQ9L1wiL2cseT0vXig/OnNjcmlwdHxzdHlsZXx0ZXh0YXJlYXx0aXRsZSkkL2ksdz10PT4oaSwuLi5zKT0+KHtfJGxpdFR5cGUkOnQsc3RyaW5nczppLHZhbHVlczpzfSkseD13KDEpLGI9dygyKSxUPVN5bWJvbC5mb3IoXCJsaXQtbm9DaGFuZ2VcIiksQT1TeW1ib2wuZm9yKFwibGl0LW5vdGhpbmdcIiksRT1uZXcgV2Vha01hcCxDPXIuY3JlYXRlVHJlZVdhbGtlcihyLDEyOSxudWxsLCExKTtmdW5jdGlvbiBQKHQsaSl7aWYoIUFycmF5LmlzQXJyYXkodCl8fCF0Lmhhc093blByb3BlcnR5KFwicmF3XCIpKXRocm93IEVycm9yKFwiaW52YWxpZCB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XCIpO3JldHVybiB2b2lkIDAhPT1lP2UuY3JlYXRlSFRNTChpKTppfWNvbnN0IFY9KHQsaSk9Pntjb25zdCBzPXQubGVuZ3RoLTEsZT1bXTtsZXQgbCxyPTI9PT1pP1wiPHN2Zz5cIjpcIlwiLHU9Zjtmb3IobGV0IGk9MDtpPHM7aSsrKXtjb25zdCBzPXRbaV07bGV0IGQsYyx2PS0xLGE9MDtmb3IoO2E8cy5sZW5ndGgmJih1Lmxhc3RJbmRleD1hLGM9dS5leGVjKHMpLG51bGwhPT1jKTspYT11Lmxhc3RJbmRleCx1PT09Zj9cIiEtLVwiPT09Y1sxXT91PV86dm9pZCAwIT09Y1sxXT91PW06dm9pZCAwIT09Y1syXT8oeS50ZXN0KGNbMl0pJiYobD1SZWdFeHAoXCI8L1wiK2NbMl0sXCJnXCIpKSx1PXApOnZvaWQgMCE9PWNbM10mJih1PXApOnU9PT1wP1wiPlwiPT09Y1swXT8odT1udWxsIT1sP2w6Zix2PS0xKTp2b2lkIDA9PT1jWzFdP3Y9LTI6KHY9dS5sYXN0SW5kZXgtY1syXS5sZW5ndGgsZD1jWzFdLHU9dm9pZCAwPT09Y1szXT9wOidcIic9PT1jWzNdPyQ6Zyk6dT09PSR8fHU9PT1nP3U9cDp1PT09X3x8dT09PW0/dT1mOih1PXAsbD12b2lkIDApO2NvbnN0IHc9dT09PXAmJnRbaSsxXS5zdGFydHNXaXRoKFwiLz5cIik/XCIgXCI6XCJcIjtyKz11PT09Zj9zK2g6dj49MD8oZS5wdXNoKGQpLHMuc2xpY2UoMCx2KStvK3Muc2xpY2Uodikrbit3KTpzK24rKC0yPT09dj8oZS5wdXNoKHZvaWQgMCksaSk6dyl9cmV0dXJuW1AodCxyKyh0W3NdfHxcIjw/PlwiKSsoMj09PWk/XCI8L3N2Zz5cIjpcIlwiKSksZV19O2NsYXNzIE57Y29uc3RydWN0b3Ioe3N0cmluZ3M6dCxfJGxpdFR5cGUkOml9LGUpe2xldCBoO3RoaXMucGFydHM9W107bGV0IHI9MCxkPTA7Y29uc3QgYz10Lmxlbmd0aC0xLHY9dGhpcy5wYXJ0cyxbYSxmXT1WKHQsaSk7aWYodGhpcy5lbD1OLmNyZWF0ZUVsZW1lbnQoYSxlKSxDLmN1cnJlbnROb2RlPXRoaXMuZWwuY29udGVudCwyPT09aSl7Y29uc3QgdD10aGlzLmVsLmNvbnRlbnQsaT10LmZpcnN0Q2hpbGQ7aS5yZW1vdmUoKSx0LmFwcGVuZCguLi5pLmNoaWxkTm9kZXMpfWZvcig7bnVsbCE9PShoPUMubmV4dE5vZGUoKSkmJnYubGVuZ3RoPGM7KXtpZigxPT09aC5ub2RlVHlwZSl7aWYoaC5oYXNBdHRyaWJ1dGVzKCkpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGkgb2YgaC5nZXRBdHRyaWJ1dGVOYW1lcygpKWlmKGkuZW5kc1dpdGgobyl8fGkuc3RhcnRzV2l0aChuKSl7Y29uc3Qgcz1mW2QrK107aWYodC5wdXNoKGkpLHZvaWQgMCE9PXMpe2NvbnN0IHQ9aC5nZXRBdHRyaWJ1dGUocy50b0xvd2VyQ2FzZSgpK28pLnNwbGl0KG4pLGk9LyhbLj9AXSk/KC4qKS8uZXhlYyhzKTt2LnB1c2goe3R5cGU6MSxpbmRleDpyLG5hbWU6aVsyXSxzdHJpbmdzOnQsY3RvcjpcIi5cIj09PWlbMV0/SDpcIj9cIj09PWlbMV0/TDpcIkBcIj09PWlbMV0/ejprfSl9ZWxzZSB2LnB1c2goe3R5cGU6NixpbmRleDpyfSl9Zm9yKGNvbnN0IGkgb2YgdCloLnJlbW92ZUF0dHJpYnV0ZShpKX1pZih5LnRlc3QoaC50YWdOYW1lKSl7Y29uc3QgdD1oLnRleHRDb250ZW50LnNwbGl0KG4pLGk9dC5sZW5ndGgtMTtpZihpPjApe2gudGV4dENvbnRlbnQ9cz9zLmVtcHR5U2NyaXB0OlwiXCI7Zm9yKGxldCBzPTA7czxpO3MrKyloLmFwcGVuZCh0W3NdLHUoKSksQy5uZXh0Tm9kZSgpLHYucHVzaCh7dHlwZToyLGluZGV4Oisrcn0pO2guYXBwZW5kKHRbaV0sdSgpKX19fWVsc2UgaWYoOD09PWgubm9kZVR5cGUpaWYoaC5kYXRhPT09bCl2LnB1c2goe3R5cGU6MixpbmRleDpyfSk7ZWxzZXtsZXQgdD0tMTtmb3IoOy0xIT09KHQ9aC5kYXRhLmluZGV4T2Yobix0KzEpKTspdi5wdXNoKHt0eXBlOjcsaW5kZXg6cn0pLHQrPW4ubGVuZ3RoLTF9cisrfX1zdGF0aWMgY3JlYXRlRWxlbWVudCh0LGkpe2NvbnN0IHM9ci5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7cmV0dXJuIHMuaW5uZXJIVE1MPXQsc319ZnVuY3Rpb24gUyh0LGkscz10LGUpe3ZhciBvLG4sbCxoO2lmKGk9PT1UKXJldHVybiBpO2xldCByPXZvaWQgMCE9PWU/bnVsbD09PShvPXMuXyRDbyl8fHZvaWQgMD09PW8/dm9pZCAwOm9bZV06cy5fJENsO2NvbnN0IHU9ZChpKT92b2lkIDA6aS5fJGxpdERpcmVjdGl2ZSQ7cmV0dXJuKG51bGw9PXI/dm9pZCAwOnIuY29uc3RydWN0b3IpIT09dSYmKG51bGw9PT0obj1udWxsPT1yP3ZvaWQgMDpyLl8kQU8pfHx2b2lkIDA9PT1ufHxuLmNhbGwociwhMSksdm9pZCAwPT09dT9yPXZvaWQgMDoocj1uZXcgdSh0KSxyLl8kQVQodCxzLGUpKSx2b2lkIDAhPT1lPyhudWxsIT09KGw9KGg9cykuXyRDbykmJnZvaWQgMCE9PWw/bDpoLl8kQ289W10pW2VdPXI6cy5fJENsPXIpLHZvaWQgMCE9PXImJihpPVModCxyLl8kQVModCxpLnZhbHVlcykscixlKSksaX1jbGFzcyBNe2NvbnN0cnVjdG9yKHQsaSl7dGhpcy5fJEFWPVtdLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5fJEFEPXQsdGhpcy5fJEFNPWl9Z2V0IHBhcmVudE5vZGUoKXtyZXR1cm4gdGhpcy5fJEFNLnBhcmVudE5vZGV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9dSh0KXt2YXIgaTtjb25zdHtlbDp7Y29udGVudDpzfSxwYXJ0czplfT10aGlzLl8kQUQsbz0obnVsbCE9PShpPW51bGw9PXQ/dm9pZCAwOnQuY3JlYXRpb25TY29wZSkmJnZvaWQgMCE9PWk/aTpyKS5pbXBvcnROb2RlKHMsITApO0MuY3VycmVudE5vZGU9bztsZXQgbj1DLm5leHROb2RlKCksbD0wLGg9MCx1PWVbMF07Zm9yKDt2b2lkIDAhPT11Oyl7aWYobD09PXUuaW5kZXgpe2xldCBpOzI9PT11LnR5cGU/aT1uZXcgUihuLG4ubmV4dFNpYmxpbmcsdGhpcyx0KToxPT09dS50eXBlP2k9bmV3IHUuY3RvcihuLHUubmFtZSx1LnN0cmluZ3MsdGhpcyx0KTo2PT09dS50eXBlJiYoaT1uZXcgWihuLHRoaXMsdCkpLHRoaXMuXyRBVi5wdXNoKGkpLHU9ZVsrK2hdfWwhPT0obnVsbD09dT92b2lkIDA6dS5pbmRleCkmJihuPUMubmV4dE5vZGUoKSxsKyspfXJldHVybiBDLmN1cnJlbnROb2RlPXIsb312KHQpe2xldCBpPTA7Zm9yKGNvbnN0IHMgb2YgdGhpcy5fJEFWKXZvaWQgMCE9PXMmJih2b2lkIDAhPT1zLnN0cmluZ3M/KHMuXyRBSSh0LHMsaSksaSs9cy5zdHJpbmdzLmxlbmd0aC0yKTpzLl8kQUkodFtpXSkpLGkrK319Y2xhc3MgUntjb25zdHJ1Y3Rvcih0LGkscyxlKXt2YXIgbzt0aGlzLnR5cGU9Mix0aGlzLl8kQUg9QSx0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBQT10LHRoaXMuXyRBQj1pLHRoaXMuXyRBTT1zLHRoaXMub3B0aW9ucz1lLHRoaXMuXyRDcD1udWxsPT09KG89bnVsbD09ZT92b2lkIDA6ZS5pc0Nvbm5lY3RlZCl8fHZvaWQgMD09PW98fG99Z2V0IF8kQVUoKXt2YXIgdCxpO3JldHVybiBudWxsIT09KGk9bnVsbD09PSh0PXRoaXMuXyRBTSl8fHZvaWQgMD09PXQ/dm9pZCAwOnQuXyRBVSkmJnZvaWQgMCE9PWk/aTp0aGlzLl8kQ3B9Z2V0IHBhcmVudE5vZGUoKXtsZXQgdD10aGlzLl8kQUEucGFyZW50Tm9kZTtjb25zdCBpPXRoaXMuXyRBTTtyZXR1cm4gdm9pZCAwIT09aSYmMTE9PT0obnVsbD09dD92b2lkIDA6dC5ub2RlVHlwZSkmJih0PWkucGFyZW50Tm9kZSksdH1nZXQgc3RhcnROb2RlKCl7cmV0dXJuIHRoaXMuXyRBQX1nZXQgZW5kTm9kZSgpe3JldHVybiB0aGlzLl8kQUJ9XyRBSSh0LGk9dGhpcyl7dD1TKHRoaXMsdCxpKSxkKHQpP3Q9PT1BfHxudWxsPT10fHxcIlwiPT09dD8odGhpcy5fJEFIIT09QSYmdGhpcy5fJEFSKCksdGhpcy5fJEFIPUEpOnQhPT10aGlzLl8kQUgmJnQhPT1UJiZ0aGlzLl8odCk6dm9pZCAwIT09dC5fJGxpdFR5cGUkP3RoaXMuZyh0KTp2b2lkIDAhPT10Lm5vZGVUeXBlP3RoaXMuJCh0KTp2KHQpP3RoaXMuVCh0KTp0aGlzLl8odCl9ayh0KXtyZXR1cm4gdGhpcy5fJEFBLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHQsdGhpcy5fJEFCKX0kKHQpe3RoaXMuXyRBSCE9PXQmJih0aGlzLl8kQVIoKSx0aGlzLl8kQUg9dGhpcy5rKHQpKX1fKHQpe3RoaXMuXyRBSCE9PUEmJmQodGhpcy5fJEFIKT90aGlzLl8kQUEubmV4dFNpYmxpbmcuZGF0YT10OnRoaXMuJChyLmNyZWF0ZVRleHROb2RlKHQpKSx0aGlzLl8kQUg9dH1nKHQpe3ZhciBpO2NvbnN0e3ZhbHVlczpzLF8kbGl0VHlwZSQ6ZX09dCxvPVwibnVtYmVyXCI9PXR5cGVvZiBlP3RoaXMuXyRBQyh0KToodm9pZCAwPT09ZS5lbCYmKGUuZWw9Ti5jcmVhdGVFbGVtZW50KFAoZS5oLGUuaFswXSksdGhpcy5vcHRpb25zKSksZSk7aWYoKG51bGw9PT0oaT10aGlzLl8kQUgpfHx2b2lkIDA9PT1pP3ZvaWQgMDppLl8kQUQpPT09byl0aGlzLl8kQUgudihzKTtlbHNle2NvbnN0IHQ9bmV3IE0obyx0aGlzKSxpPXQudSh0aGlzLm9wdGlvbnMpO3QudihzKSx0aGlzLiQoaSksdGhpcy5fJEFIPXR9fV8kQUModCl7bGV0IGk9RS5nZXQodC5zdHJpbmdzKTtyZXR1cm4gdm9pZCAwPT09aSYmRS5zZXQodC5zdHJpbmdzLGk9bmV3IE4odCkpLGl9VCh0KXtjKHRoaXMuXyRBSCl8fCh0aGlzLl8kQUg9W10sdGhpcy5fJEFSKCkpO2NvbnN0IGk9dGhpcy5fJEFIO2xldCBzLGU9MDtmb3IoY29uc3QgbyBvZiB0KWU9PT1pLmxlbmd0aD9pLnB1c2gocz1uZXcgUih0aGlzLmsodSgpKSx0aGlzLmsodSgpKSx0aGlzLHRoaXMub3B0aW9ucykpOnM9aVtlXSxzLl8kQUkobyksZSsrO2U8aS5sZW5ndGgmJih0aGlzLl8kQVIocyYmcy5fJEFCLm5leHRTaWJsaW5nLGUpLGkubGVuZ3RoPWUpfV8kQVIodD10aGlzLl8kQUEubmV4dFNpYmxpbmcsaSl7dmFyIHM7Zm9yKG51bGw9PT0ocz10aGlzLl8kQVApfHx2b2lkIDA9PT1zfHxzLmNhbGwodGhpcywhMSwhMCxpKTt0JiZ0IT09dGhpcy5fJEFCOyl7Y29uc3QgaT10Lm5leHRTaWJsaW5nO3QucmVtb3ZlKCksdD1pfX1zZXRDb25uZWN0ZWQodCl7dmFyIGk7dm9pZCAwPT09dGhpcy5fJEFNJiYodGhpcy5fJENwPXQsbnVsbD09PShpPXRoaXMuXyRBUCl8fHZvaWQgMD09PWl8fGkuY2FsbCh0aGlzLHQpKX19Y2xhc3Mga3tjb25zdHJ1Y3Rvcih0LGkscyxlLG8pe3RoaXMudHlwZT0xLHRoaXMuXyRBSD1BLHRoaXMuXyRBTj12b2lkIDAsdGhpcy5lbGVtZW50PXQsdGhpcy5uYW1lPWksdGhpcy5fJEFNPWUsdGhpcy5vcHRpb25zPW8scy5sZW5ndGg+Mnx8XCJcIiE9PXNbMF18fFwiXCIhPT1zWzFdPyh0aGlzLl8kQUg9QXJyYXkocy5sZW5ndGgtMSkuZmlsbChuZXcgU3RyaW5nKSx0aGlzLnN0cmluZ3M9cyk6dGhpcy5fJEFIPUF9Z2V0IHRhZ05hbWUoKXtyZXR1cm4gdGhpcy5lbGVtZW50LnRhZ05hbWV9Z2V0IF8kQVUoKXtyZXR1cm4gdGhpcy5fJEFNLl8kQVV9XyRBSSh0LGk9dGhpcyxzLGUpe2NvbnN0IG89dGhpcy5zdHJpbmdzO2xldCBuPSExO2lmKHZvaWQgMD09PW8pdD1TKHRoaXMsdCxpLDApLG49IWQodCl8fHQhPT10aGlzLl8kQUgmJnQhPT1ULG4mJih0aGlzLl8kQUg9dCk7ZWxzZXtjb25zdCBlPXQ7bGV0IGwsaDtmb3IodD1vWzBdLGw9MDtsPG8ubGVuZ3RoLTE7bCsrKWg9Uyh0aGlzLGVbcytsXSxpLGwpLGg9PT1UJiYoaD10aGlzLl8kQUhbbF0pLG58fChuPSFkKGgpfHxoIT09dGhpcy5fJEFIW2xdKSxoPT09QT90PUE6dCE9PUEmJih0Kz0obnVsbCE9aD9oOlwiXCIpK29bbCsxXSksdGhpcy5fJEFIW2xdPWh9biYmIWUmJnRoaXMuaih0KX1qKHQpe3Q9PT1BP3RoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTp0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSxudWxsIT10P3Q6XCJcIil9fWNsYXNzIEggZXh0ZW5kcyBre2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9M31qKHQpe3RoaXMuZWxlbWVudFt0aGlzLm5hbWVdPXQ9PT1BP3ZvaWQgMDp0fX1jb25zdCBJPXM/cy5lbXB0eVNjcmlwdDpcIlwiO2NsYXNzIEwgZXh0ZW5kcyBre2NvbnN0cnVjdG9yKCl7c3VwZXIoLi4uYXJndW1lbnRzKSx0aGlzLnR5cGU9NH1qKHQpe3QmJnQhPT1BP3RoaXMuZWxlbWVudC5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLEkpOnRoaXMuZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKX19Y2xhc3MgeiBleHRlbmRzIGt7Y29uc3RydWN0b3IodCxpLHMsZSxvKXtzdXBlcih0LGkscyxlLG8pLHRoaXMudHlwZT01fV8kQUkodCxpPXRoaXMpe3ZhciBzO2lmKCh0PW51bGwhPT0ocz1TKHRoaXMsdCxpLDApKSYmdm9pZCAwIT09cz9zOkEpPT09VClyZXR1cm47Y29uc3QgZT10aGlzLl8kQUgsbz10PT09QSYmZSE9PUF8fHQuY2FwdHVyZSE9PWUuY2FwdHVyZXx8dC5vbmNlIT09ZS5vbmNlfHx0LnBhc3NpdmUhPT1lLnBhc3NpdmUsbj10IT09QSYmKGU9PT1BfHxvKTtvJiZ0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyxlKSxuJiZ0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsdGhpcyx0KSx0aGlzLl8kQUg9dH1oYW5kbGVFdmVudCh0KXt2YXIgaSxzO1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuXyRBSD90aGlzLl8kQUguY2FsbChudWxsIT09KHM9bnVsbD09PShpPXRoaXMub3B0aW9ucyl8fHZvaWQgMD09PWk/dm9pZCAwOmkuaG9zdCkmJnZvaWQgMCE9PXM/czp0aGlzLmVsZW1lbnQsdCk6dGhpcy5fJEFILmhhbmRsZUV2ZW50KHQpfX1jbGFzcyBae2NvbnN0cnVjdG9yKHQsaSxzKXt0aGlzLmVsZW1lbnQ9dCx0aGlzLnR5cGU9Nix0aGlzLl8kQU49dm9pZCAwLHRoaXMuXyRBTT1pLHRoaXMub3B0aW9ucz1zfWdldCBfJEFVKCl7cmV0dXJuIHRoaXMuXyRBTS5fJEFVfV8kQUkodCl7Uyh0aGlzLHQpfX1jb25zdCBqPXtPOm8sUDpuLEE6bCxDOjEsTTpWLEw6TSxSOnYsRDpTLEk6UixWOmssSDpMLE46eixVOkgsRjpafSxCPWkubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtudWxsPT1CfHxCKE4sUiksKG51bGwhPT0odD1pLmxpdEh0bWxWZXJzaW9ucykmJnZvaWQgMCE9PXQ/dDppLmxpdEh0bWxWZXJzaW9ucz1bXSkucHVzaChcIjIuOC4wXCIpO2NvbnN0IEQ9KHQsaSxzKT0+e3ZhciBlLG87Y29uc3Qgbj1udWxsIT09KGU9bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1lP2U6aTtsZXQgbD1uLl8kbGl0UGFydCQ7aWYodm9pZCAwPT09bCl7Y29uc3QgdD1udWxsIT09KG89bnVsbD09cz92b2lkIDA6cy5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT1vP286bnVsbDtuLl8kbGl0UGFydCQ9bD1uZXcgUihpLmluc2VydEJlZm9yZSh1KCksdCksdCx2b2lkIDAsbnVsbCE9cz9zOnt9KX1yZXR1cm4gbC5fJEFJKHQpLGx9O2V4cG9ydHtqIGFzIF8kTEgseCBhcyBodG1sLFQgYXMgbm9DaGFuZ2UsQSBhcyBub3RoaW5nLEQgYXMgcmVuZGVyLGIgYXMgc3ZnfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1odG1sLmpzLm1hcFxuIiwiaW1wb3J0e1JlYWN0aXZlRWxlbWVudCBhcyB0fWZyb21cIkBsaXQvcmVhY3RpdmUtZWxlbWVudFwiO2V4cG9ydCpmcm9tXCJAbGl0L3JlYWN0aXZlLWVsZW1lbnRcIjtpbXBvcnR7cmVuZGVyIGFzIGUsbm9DaGFuZ2UgYXMgaX1mcm9tXCJsaXQtaHRtbFwiO2V4cG9ydCpmcm9tXCJsaXQtaHRtbFwiO1xuLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovdmFyIGwsbztjb25zdCByPXQ7Y2xhc3MgcyBleHRlbmRzIHR7Y29uc3RydWN0b3IoKXtzdXBlciguLi5hcmd1bWVudHMpLHRoaXMucmVuZGVyT3B0aW9ucz17aG9zdDp0aGlzfSx0aGlzLl8kRG89dm9pZCAwfWNyZWF0ZVJlbmRlclJvb3QoKXt2YXIgdCxlO2NvbnN0IGk9c3VwZXIuY3JlYXRlUmVuZGVyUm9vdCgpO3JldHVybiBudWxsIT09KHQ9KGU9dGhpcy5yZW5kZXJPcHRpb25zKS5yZW5kZXJCZWZvcmUpJiZ2b2lkIDAhPT10fHwoZS5yZW5kZXJCZWZvcmU9aS5maXJzdENoaWxkKSxpfXVwZGF0ZSh0KXtjb25zdCBpPXRoaXMucmVuZGVyKCk7dGhpcy5oYXNVcGRhdGVkfHwodGhpcy5yZW5kZXJPcHRpb25zLmlzQ29ubmVjdGVkPXRoaXMuaXNDb25uZWN0ZWQpLHN1cGVyLnVwZGF0ZSh0KSx0aGlzLl8kRG89ZShpLHRoaXMucmVuZGVyUm9vdCx0aGlzLnJlbmRlck9wdGlvbnMpfWNvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITApfWRpc2Nvbm5lY3RlZENhbGxiYWNrKCl7dmFyIHQ7c3VwZXIuZGlzY29ubmVjdGVkQ2FsbGJhY2soKSxudWxsPT09KHQ9dGhpcy5fJERvKXx8dm9pZCAwPT09dHx8dC5zZXRDb25uZWN0ZWQoITEpfXJlbmRlcigpe3JldHVybiBpfX1zLmZpbmFsaXplZD0hMCxzLl8kbGl0RWxlbWVudCQ9ITAsbnVsbD09PShsPWdsb2JhbFRoaXMubGl0RWxlbWVudEh5ZHJhdGVTdXBwb3J0KXx8dm9pZCAwPT09bHx8bC5jYWxsKGdsb2JhbFRoaXMse0xpdEVsZW1lbnQ6c30pO2NvbnN0IG49Z2xvYmFsVGhpcy5saXRFbGVtZW50UG9seWZpbGxTdXBwb3J0O251bGw9PW58fG4oe0xpdEVsZW1lbnQ6c30pO2NvbnN0IGg9e18kQUs6KHQsZSxpKT0+e3QuXyRBSyhlLGkpfSxfJEFMOnQ9PnQuXyRBTH07KG51bGwhPT0obz1nbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucykmJnZvaWQgMCE9PW8/bzpnbG9iYWxUaGlzLmxpdEVsZW1lbnRWZXJzaW9ucz1bXSkucHVzaChcIjMuMy4zXCIpO2V4cG9ydHtzIGFzIExpdEVsZW1lbnQsciBhcyBVcGRhdGluZ0VsZW1lbnQsaCBhcyBfJExFfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxpdC1lbGVtZW50LmpzLm1hcFxuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjIgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG5jb25zdCBvPSExO2V4cG9ydHtvIGFzIGlzU2VydmVyfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLXNlcnZlci5qcy5tYXBcbiIsIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiLy8gc3RhcnR1cFxuLy8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vLyBUaGlzIGVudHJ5IG1vZHVsZSBpcyByZWZlcmVuY2VkIGJ5IG90aGVyIG1vZHVsZXMgc28gaXQgY2FuJ3QgYmUgaW5saW5lZFxudmFyIF9fd2VicGFja19leHBvcnRzX18gPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNyk7XG4iXSwibmFtZXMiOlsidCIsInIiLCJlIiwiX19hc3NpZ24iLCJPYmplY3QiLCJhc3NpZ24iLCJzIiwiaSIsIm4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJwIiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJ0aGlzIiwiREVGQVVMVF9USFJFU0hPTERTIiwic2Vjb25kIiwibWludXRlIiwiaG91ciIsImRheSIsImZvcm1hdCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsImxhbmd1YWdlIiwid2Vla2RheSIsIm1vbnRoIiwiYSIsIm8iLCJ5ZWFyIiwidSIsImMiLCJtIiwibCIsImQiLCJmIiwiZyIsImgiLCJzeXN0ZW0iLCJjb21tYV9kZWNpbWFsIiwiZGVjaW1hbF9jb21tYSIsInNwYWNlX2NvbW1hIiwibm9uZSIsImFtX3BtIiwidHdlbnR5X2ZvdXIiLCJiIiwidGltZV9mb3JtYXQiLCJEYXRlIiwidG9Mb2NhbGVTdHJpbmciLCJpbmNsdWRlcyIsInYiLCJfIiwiaG91cjEyIiwieSIsInciLCJrIiwieCIsIkQiLCJTIiwiRiIsIlQiLCJJIiwiTiIsIk0iLCJmcm9tIiwidG8iLCJ0aHJlc2hvbGRzIiwibm93IiwicmVzb2x2ZWRUaHJlc2hvbGRzIiwic2VjcyIsIk1hdGgiLCJhYnMiLCJ2YWx1ZSIsInJvdW5kIiwidW5pdCIsIm1pbnMiLCJob3VycyIsIlNFQ1NfUEVSX01JTiIsImRheXMiLCJTRUNTX1BFUl9IT1VSIiwiZnJvbURhdGUiLCJ0b0RhdGUiLCJ5ZWFycyIsImdldEZ1bGxZZWFyIiwibW9udGhzIiwiZ2V0TW9udGgiLCJ3ZWVrcyIsIlNFQ1NfUEVSX0RBWSIsIlJlbGF0aXZlVGltZUZvcm1hdCIsIm51bWVyaWMiLCJOdW1iZXJGb3JtYXQiLCJzdHlsZSIsInVuaXREaXNwbGF5IiwiQyIsImF0dHJpYnV0ZXMiLCJyZW1haW5pbmciLCJzcGxpdCIsIm1hcCIsIk51bWJlciIsInN0YXRlIiwiZ2V0VGltZSIsImxhc3RfY2hhbmdlZCIsIm1heCIsIk8iLCJxIiwiX3RoZW1lcyIsImRlZmF1bHRfdGhlbWUiLCJ0aGVtZXMiLCJrZXlzIiwiZm9yRWFjaCIsInVwZGF0ZVN0eWxlcyIsIndpbmRvdyIsIlNoYWR5Q1NTIiwic3R5bGVTdWJ0cmVlIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaGFzQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiQSIsImdldENhcmRTaXplIiwiRSIsInN1YnN0ciIsImluZGV4T2YiLCJqIiwiUiIsImxvY2FsZSIsInRyYW5zbGF0aW9uTWV0YWRhdGEiLCJ0cmFuc2xhdGlvbnMiLCJpc1JUTCIsInoiLCJMIiwiZW50aXR5X2lkIiwiUCIsInVuaXRfb2ZfbWVhc3VyZW1lbnQiLCJzdGF0ZV9jbGFzcyIsIlUiLCJudW1iZXJfZm9ybWF0IiwiQiIsInBvdyIsIkgiLCJpc05hTiIsIlYiLCJjb25zb2xlIiwiZXJyb3IiLCJtYXhpbXVtRnJhY3Rpb25EaWdpdHMiLCJ0b1N0cmluZyIsImN1cnJlbmN5IiwibWluaW11bUZyYWN0aW9uRGlnaXRzIiwiVyIsImRldmljZV9jbGFzcyIsImhhc19kYXRlIiwiaGFzX3RpbWUiLCJzZXRIb3VycyIsImpvaW4iLCJ0b0lTT1N0cmluZyIsImh1bWlkaXR5IiwiRyIsIkoiLCJLIiwiUSIsIlgiLCJZIiwiWiIsIiQiLCJTZXQiLCJlZSIsInRlIiwicmUiLCJuZSIsIkV2ZW50IiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJCb29sZWFuIiwiY29tcG9zZWQiLCJkZXRhaWwiLCJkaXNwYXRjaEV2ZW50IiwiaWUiLCJhZSIsImFsZXJ0IiwiYXV0b21hdGlvbiIsImNsaW1hdGUiLCJjb3ZlciIsImZhbiIsImdyb3VwIiwiaW5wdXRfYm9vbGVhbiIsImlucHV0X251bWJlciIsImlucHV0X3NlbGVjdCIsImlucHV0X3RleHQiLCJsaWdodCIsImxvY2siLCJtZWRpYV9wbGF5ZXIiLCJyZW1vdGUiLCJzY2VuZSIsInNjcmlwdCIsInNlbnNvciIsInRpbWVyIiwic3dpdGNoIiwidmFjdXVtIiwid2F0ZXJfaGVhdGVyIiwiaW5wdXRfZGF0ZXRpbWUiLCJvZSIsInR5cGUiLCJjb25maWciLCJjcmVhdGVFbGVtZW50Iiwic2V0Q29uZmlnIiwibWVzc2FnZSIsInN0YXJ0c1dpdGgiLCJoYXMiLCJlbnRpdHkiLCJjdXN0b21FbGVtZW50cyIsImdldCIsImRpc3BsYXkiLCJzZXRUaW1lb3V0Iiwid2hlbkRlZmluZWQiLCJ0aGVuIiwiY2xlYXJUaW1lb3V0IiwidWUiLCJzbGljZSIsImNlIiwiY2FsZW5kYXIiLCJjYW1lcmEiLCJjb25maWd1cmF0b3IiLCJjb252ZXJzYXRpb24iLCJkZXZpY2VfdHJhY2tlciIsImhpc3RvcnlfZ3JhcGgiLCJob21lYXNzaXN0YW50IiwiaG9tZWtpdCIsImltYWdlX3Byb2Nlc3NpbmciLCJtYWlsYm94Iiwibm90aWZ5IiwicGVyc29uIiwicGxhbnQiLCJwcm94aW1pdHkiLCJzaW1wbGVfYWxhcm0iLCJzdW4iLCJ1cGRhdGVyIiwid2VibGluayIsIm1lIiwid2FybiIsInNlIiwiYXR0cmlidXRlIiwib3BlcmF0b3IiLCJtYXRjaCIsImxlIiwiZGUiLCJoaXN0b3J5IiwicmVwbGFjZVN0YXRlIiwicHVzaFN0YXRlIiwicmVwbGFjZSIsImZlIiwiY2FsbFNlcnZpY2UiLCJnZSIsInN0YXRlcyIsInBlIiwiYWN0aW9uIiwiY29uZmlybWF0aW9uIiwiZXhlbXB0aW9ucyIsInNvbWUiLCJ1c2VyIiwiaWQiLCJjb25maXJtIiwidGV4dCIsImNhbWVyYV9pbWFnZSIsImVudGl0eUlkIiwibmF2aWdhdGlvbl9wYXRoIiwidXJsX3BhdGgiLCJvcGVuIiwic2VydmljZSIsInNlcnZpY2VfZGF0YSIsInRhcmdldCIsImhlIiwiZG91YmxlX3RhcF9hY3Rpb24iLCJob2xkX2FjdGlvbiIsInRhcF9hY3Rpb24iLCJiZSIsImhhcHRpYyIsInZlIiwiX2UiLCJoYXNzIiwieWUiLCJ3ZSIsInB1c2giLCJrZSIsInNoYWRvd1Jvb3QiLCJsb3ZlbGFjZSIsImN1cnJlbnRfdmlldyIsIl9fX2N1clZpZXciLCJ4ZSIsImlsbHVtaW5hbmNlIiwidGVtcGVyYXR1cmUiLCJwcmVzc3VyZSIsInBvd2VyIiwic2lnbmFsX3N0cmVuZ3RoIiwiRGUiLCJiaW5hcnlfc2Vuc29yIiwiU2UiLCJpY29uIiwiaXNUb3VjaCIsIm5hdmlnYXRvciIsIm1heFRvdWNoUG9pbnRzIiwiQWN0aW9uSGFuZGxlciIsIkhUTUxFbGVtZW50IiwiY29uc3RydWN0b3IiLCJzdXBlciIsImhvbGRUaW1lIiwiaGVsZCIsInJpcHBsZSIsImNvbm5lY3RlZENhbGxiYWNrIiwicG9zaXRpb24iLCJ3aWR0aCIsImhlaWdodCIsInRyYW5zZm9ybSIsInBvaW50ZXJFdmVudHMiLCJ6SW5kZXgiLCJhcHBlbmRDaGlsZCIsInByaW1hcnkiLCJldiIsImFkZEV2ZW50TGlzdGVuZXIiLCJzdG9wQW5pbWF0aW9uIiwidW5kZWZpbmVkIiwicGFzc2l2ZSIsImJpbmQiLCJlbGVtZW50Iiwib3B0aW9ucyIsImFjdGlvbkhhbmRsZXIiLCJldmVudCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicmV0dXJuVmFsdWUiLCJzdGFydCIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwic3RhcnRBbmltYXRpb24iLCJlbmQiLCJmaXJlRXZlbnQiLCJoYXNEb3VibGVDbGljayIsImRibENsaWNrVGltZW91dCIsImtleUNvZGUiLCJsZWZ0IiwidG9wIiwiZGlzYWJsZWQiLCJhY3RpdmUiLCJ1bmJvdW5kZWQiLCJkZWZpbmUiLCJhY3Rpb25IYW5kbGVyQmluZCIsImFjdGlvbmhhbmRsZXIiLCJib2R5IiwiZ2V0QWN0aW9uSGFuZGxlciIsImRpcmVjdGl2ZSIsIkRpcmVjdGl2ZSIsInVwZGF0ZSIsInBhcnQiLCJub0NoYW5nZSIsInJlbmRlciIsIl9vcHRpb25zIiwiY2hlY2tDb25maWciLCJlbnRpdGllcyIsImluZm9fZW50aXRpZXMiLCJyb3dzIiwiY2FyZHMiLCJFcnJvciIsImNvbXB1dGVFbnRpdHkiLCJlbnRpdHlOYW1lIiwiZW50aXR5U3RhdGUiLCJnZXRUZW1wbGF0ZU9yQXR0cmlidXRlIiwibmFtZSIsImZyaWVuZGx5X25hbWUiLCJlbnRpdHlJY29uIiwic3RhdGVPYmoiLCJzaG93X2ljb24iLCJzdGF0ZV9vbiIsInJlbmRlckN1c3RvbVN0YXRlSWNvbiIsImNvbmRpdGlvbnMiLCJyZW5kZXJDb25kaXRpb25JY29ucyIsInRlbXBsYXRlIiwiZXZhbFRlbXBsYXRlIiwiZW50aXR5VmFsdWUiLCJmaWx0ZXIiLCJpdGVtIiwiY2hlY2tFbnRpdHlWYWx1ZSIsImNoZWNrQ29uZGl0aW9uYWxWYWx1ZSIsInBvcCIsImNvbXB1dGVTdGF0ZURvbWFpbiIsInN0YXRlX29mZiIsImVudGl0eVN0YXRlRGlzcGxheSIsImlzVW5hdmFpbGFibGUiLCJsb2NhbGl6ZSIsImdldFZhbHVlIiwiZXh0cmFjdFZhbHVlIiwiZm9ybWF0TnVtYmVyIiwibW9kaWZpZWRTdGF0ZU9iaiIsImNvbXB1dGVTdGF0ZURpc3BsYXkiLCJlbnRpdHlTdHlsZXMiLCJzdHlsZXMiLCJ0ZW1wbGF0ZURlZmluaXRpb24iLCJrZXkiLCJyZW5kZXJJY29uIiwiY2xhc3NlcyIsImN1c3RvbUljb24iLCJjdXN0b21TdHlsaW5nIiwidGVtcGxhdGVTdHlsaW5nIiwiaHRtbCIsImlzT2JqZWN0Iiwic3RhdGVfY29sb3IiLCJyZW5kZXJWYWx1ZSIsInRvZ2dsZSIsIkxBU1RfQ0hBTkdFRCIsIkxBU1RfVVBEQVRFRCIsImxhc3RfdXBkYXRlZCIsIlRJTUVTVEFNUF9GT1JNQVRTIiwidGltZXN0YW1wIiwicmVuZGVyTWFpbkVudGl0eSIsInNob3dfc3RhdGUiLCJjbGlja0hhbmRsZXIiLCJoYW5kbGVBY3Rpb24iLCJyZW5kZXJUaXRsZSIsImhpZGVfdGl0bGUiLCJoYXNDb25maWdBY3Rpb24iLCJ0aXRsZSIsImhhc0hvbGQiLCJoYXNBY3Rpb24iLCJyZW5kZXJJbmZvRW50aXR5IiwiaGlkZUlmRW50aXR5IiwicmVuZGVyRW50aXRpZXNSb3ciLCJsb2ciLCJyZW5kZXJDbGFzc2VzIiwicmVuZGVyRW50aXR5Iiwic2hvd19uYW1lIiwicmVuZGVyUm93cyIsImZpbHRlcmVkUm93cyIsInJvdyIsImhpZGVJZlJvdyIsInByZWNpc2lvbiIsInBhcnNlSW50IiwicGFyc2VGbG9hdCIsImlzRmluaXRlIiwic2Vjb25kc1RvRHVyYXRpb24iLCJoaWRlVW5hdmFpbGFibGUiLCJoaWRlX3VuYXZhaWxhYmxlIiwiaGlkZUlmQ2FyZCIsImNhcmRDb25maWciLCJoaWRlX2lmIiwibWF0Y2hlZENvbmRpdGlvbnMiLCJzdGF0ZUVudGl0eSIsImluZm8iLCJwYWNrYWdlSnNvbiIsInZlcnNpb24iLCJjdXN0b21DYXJkcyIsInByZXZpZXciLCJkZXNjcmlwdGlvbiIsIlJvb21DYXJkIiwiTGl0RWxlbWVudCIsIl9lbnRpdHlDYXJkcyIsImdldENoaWxkQ3VzdG9tQ2FyZFR5cGVzIiwiY2FyZCIsImFkZCIsInN1YnN0cmluZyIsIndhaXRGb3JEZXBlbmRlbnRDb21wb25lbnRzIiwiZGlzdGluY3RUeXBlcyIsIlByb21pc2UiLCJhbGwiLCJBcnJheSIsImVudGl0eUlkcyIsImdldEVudGl0eUlkcyIsIl9oZWxwZXJzIiwibG9hZENhcmRIZWxwZXJzIiwiY3JlYXRlQ2FyZEVsZW1lbnRzIiwiYW55VXBkYXRlcyIsIm5ld1N0YXRlcyIsIm1vbml0b3JlZFN0YXRlcyIsImVudHJpZXMiLCJfaGFzcyIsInNob3VsZFVwZGF0ZSIsImNoYW5nZWRQcm9wcyIsInJlc3VsdCIsInNpemUiLCJjcmVhdGVDYXJkRWxlbWVudCIsIm1hcFN0YXRlT2JqZWN0IiwiY29udGVudF9hbGlnbm1lbnQiLCJmbGF0TWFwIiwiY2FyZF9zdHlsZXMiLCJudW1iZXJPZkNhcmRzIiwibnVtYmVyT2ZSb3dzIiwibWFpblNpemUiLCJvYmplY3QiLCJmaW5kVmFsIiwibG92ZWxhY2VDYXJkIiwiaW5kZXgiLCJzaG93X3N0YXRlcyIsImJveFNoYWRvdyIsImJvcmRlclJhZGl1cyIsInByb3BlcnR5IiwiaGFzQ2hhbmdlZCIsImN1c3RvbUVsZW1lbnQiLCJjb21wYXJlU3RhdGUiLCJVTktOT1dOIiwiVU5BVkFJTEFCTEUiLCJpc051bWVyaWNTdGF0ZSIsIl9lcnIiLCJkb21haW4iLCJkYXRlIiwiZm9ybWF0RGF0ZVRpbWUiLCJmb3JtYXREYXRlIiwiZm9ybWF0VGltZSIsImNvbXBvbmVudHMiLCJVTkFWQUlMQUJMRV9TVEFURVMiLCJTRUNPTkRBUllfSU5GT19WQUxVRVMiLCJUaW1lRm9ybWF0IiwiZGF0ZU9iaiIsInVzZUFtUG0iLCJudW1iZXJGb3JtYXRUb0xvY2FsZSIsImxvY2FsZU9wdGlvbnMiLCJudW0iLCJnZXREZWZhdWx0Rm9ybWF0T3B0aW9ucyIsImVyciIsImxlZnRQYWQiLCJmbG9vciIsInRlc3RMYW5ndWFnZSIsInRlc3QiLCJjc3MiLCJtYXBUZW1wbGF0ZSIsInRlbXBsYXRlc1dpdGhNYXRjaGluZ05hbWUiLCJ0ZW1wbGF0ZXMiLCJ0ZW1wbGF0ZUZyb21Db25maWciLCJvYmoiLCJpc0FycmF5IiwiZ2V0RW50aXR5IiwiZ2V0Q2FyZEVudGl0aWVzIiwiZ2V0Q29uZGl0aW9uRW50aXRpZXNGcm9tQ29uZmlnIiwiZ2V0Q29uZGl0aW9uRW50aXRpZXMiLCJpY29uQ29uZGl0aW9uc1dpdGhFbnRpdHkiLCJjb25jYXQiLCJoaWRlQ29uZGl0aW9uc1dpdGhFbnRpdHkiLCJjb25kaXRpb24iLCJjaGVja1ZhbHVlIiwiaXRlbVZhbHVlIiwiU3RyaW5nIiwiY29uZiIsImZ1bmMiLCJGdW5jdGlvbiIsImZ1bmNUcmltbWVkIiwidHJpbSIsImtpbmQiLCJlbGVtZW50cyIsImZpbmlzaGVyIiwiZGVzY3JpcHRvciIsImNyZWF0ZVByb3BlcnR5IiwiU3ltYm9sIiwicGxhY2VtZW50Iiwib3JpZ2luYWxLZXkiLCJpbml0aWFsaXplciIsImRlZmluZVByb3BlcnR5IiwicmVuZGVyUm9vdCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJxdWVyeVNlbGVjdG9yQWxsIiwiYXN5bmMiLCJ1cGRhdGVDb21wbGV0ZSIsIkhUTUxTbG90RWxlbWVudCIsImFzc2lnbmVkRWxlbWVudHMiLCJhc3NpZ25lZE5vZGVzIiwibm9kZVR5cGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwic2xvdCIsInNlbGVjdG9yIiwibWF0Y2hlcyIsImZsYXR0ZW4iLCJBVFRSSUJVVEUiLCJDSElMRCIsIlBST1BFUlRZIiwiQk9PTEVBTl9BVFRSSUJVVEUiLCJFVkVOVCIsIkVMRU1FTlQiLCJfJGxpdERpcmVjdGl2ZSQiLCJ2YWx1ZXMiLCJfJEFVIiwiXyRBTSIsIl8kQVQiLCJfJEN0IiwiXyRDaSIsIl8kQVMiLCJTaGFkb3dSb290IiwibmF0aXZlU2hhZG93IiwiRG9jdW1lbnQiLCJDU1NTdHlsZVNoZWV0IiwiV2Vha01hcCIsIl8kY3NzUmVzdWx0JCIsImNzc1RleHQiLCJzdHlsZVNoZWV0IiwicmVwbGFjZVN5bmMiLCJzZXQiLCJyZWR1Y2UiLCJhZG9wdGVkU3R5bGVTaGVldHMiLCJsaXROb25jZSIsInRleHRDb250ZW50IiwiY3NzUnVsZXMiLCJ0cnVzdGVkVHlwZXMiLCJlbXB0eVNjcmlwdCIsInJlYWN0aXZlRWxlbWVudFBvbHlmaWxsU3VwcG9ydCIsInRvQXR0cmlidXRlIiwiSlNPTiIsInN0cmluZ2lmeSIsImZyb21BdHRyaWJ1dGUiLCJwYXJzZSIsImNvbnZlcnRlciIsInJlZmxlY3QiLCJfJEVpIiwiTWFwIiwiaXNVcGRhdGVQZW5kaW5nIiwiaGFzVXBkYXRlZCIsIl8kRWwiLCJfJEV1Iiwic3RhdGljIiwiZmluYWxpemUiLCJvYnNlcnZlZEF0dHJpYnV0ZXMiLCJlbGVtZW50UHJvcGVydGllcyIsIl8kRXAiLCJfJEV2Iiwibm9BY2Nlc3NvciIsImdldFByb3BlcnR5RGVzY3JpcHRvciIsInJlcXVlc3RVcGRhdGUiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnRpZXMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZWxlbWVudFN0eWxlcyIsImZpbmFsaXplU3R5bGVzIiwiZmxhdCIsInJldmVyc2UiLCJ1bnNoaWZ0IiwidG9Mb3dlckNhc2UiLCJfJEVfIiwiZW5hYmxlVXBkYXRpbmciLCJfJEFMIiwiXyRFZyIsImFkZENvbnRyb2xsZXIiLCJfJEVTIiwiaXNDb25uZWN0ZWQiLCJob3N0Q29ubmVjdGVkIiwicmVtb3ZlQ29udHJvbGxlciIsInNwbGljZSIsImNyZWF0ZVJlbmRlclJvb3QiLCJhdHRhY2hTaGFkb3ciLCJzaGFkb3dSb290T3B0aW9ucyIsImRpc2Nvbm5lY3RlZENhbGxiYWNrIiwiaG9zdERpc2Nvbm5lY3RlZCIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIl8kQUsiLCJfJEVPIiwicmVtb3ZlQXR0cmlidXRlIiwiZ2V0UHJvcGVydHlPcHRpb25zIiwiXyRFQyIsIl8kRWoiLCJyZWplY3QiLCJzY2hlZHVsZVVwZGF0ZSIsInBlcmZvcm1VcGRhdGUiLCJ3aWxsVXBkYXRlIiwiaG9zdFVwZGF0ZSIsIl8kRWsiLCJfJEFFIiwiaG9zdFVwZGF0ZWQiLCJmaXJzdFVwZGF0ZWQiLCJ1cGRhdGVkIiwiZ2V0VXBkYXRlQ29tcGxldGUiLCJtb2RlIiwiUmVhY3RpdmVFbGVtZW50IiwicmVhY3RpdmVFbGVtZW50VmVyc2lvbnMiLCJjcmVhdGVQb2xpY3kiLCJjcmVhdGVIVE1MIiwicmFuZG9tIiwiY3JlYXRlQ29tbWVudCIsIml0ZXJhdG9yIiwiUmVnRXhwIiwiXyRsaXRUeXBlJCIsInN0cmluZ3MiLCJmb3IiLCJjcmVhdGVUcmVlV2Fsa2VyIiwibGFzdEluZGV4IiwiZXhlYyIsInBhcnRzIiwiZWwiLCJjdXJyZW50Tm9kZSIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwicmVtb3ZlIiwiYXBwZW5kIiwiY2hpbGROb2RlcyIsIm5leHROb2RlIiwiaGFzQXR0cmlidXRlcyIsImdldEF0dHJpYnV0ZU5hbWVzIiwiZW5kc1dpdGgiLCJjdG9yIiwidGFnTmFtZSIsImRhdGEiLCJpbm5lckhUTUwiLCJfJENvIiwiXyRDbCIsIl8kQU8iLCJfJEFWIiwiXyRBTiIsIl8kQUQiLCJwYXJlbnROb2RlIiwiY3JlYXRpb25TY29wZSIsImltcG9ydE5vZGUiLCJuZXh0U2libGluZyIsIl8kQUkiLCJfJEFIIiwiXyRBQSIsIl8kQUIiLCJfJENwIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsIl8kQVIiLCJpbnNlcnRCZWZvcmUiLCJjcmVhdGVUZXh0Tm9kZSIsIl8kQUMiLCJfJEFQIiwic2V0Q29ubmVjdGVkIiwiZmlsbCIsImNhcHR1cmUiLCJvbmNlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiaG9zdCIsImxpdEh0bWxQb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sVmVyc2lvbnMiLCJyZW5kZXJCZWZvcmUiLCJfJGxpdFBhcnQkIiwicmVuZGVyT3B0aW9ucyIsIl8kRG8iLCJmaW5hbGl6ZWQiLCJfJGxpdEVsZW1lbnQkIiwiZ2xvYmFsVGhpcyIsImxpdEVsZW1lbnRIeWRyYXRlU3VwcG9ydCIsImxpdEVsZW1lbnRQb2x5ZmlsbFN1cHBvcnQiLCJsaXRFbGVtZW50VmVyc2lvbnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJleHBvcnRzIiwibW9kdWxlIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImRlZmluaXRpb24iLCJwcm9wIiwidG9TdHJpbmdUYWciXSwic291cmNlUm9vdCI6IiJ9